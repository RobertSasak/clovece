{"version":3,"sources":["src/types.ts","src/Theme.tsx","src/Storage.tsx","src/screens/Settings.tsx","src/moves/move.ts","src/moves/roll.ts","src/moves/select.ts","src/helpers/enumerate.ts","src/helpers/setup.ts","src/Game.ts","src/helpers/endIf.ts","src/utils.ts","src/boards/components/Die.tsx","src/boards/Classic/components/Square.tsx","src/boards/Classic/components/Lap.tsx","src/boards/Classic/components/Road.tsx","src/boards/Classic/components/End.tsx","src/boards/Classic/components/Token.tsx","src/boards/Classic/colors.ts","src/boards/Classic/components/Start.tsx","src/boards/components/Badge.tsx","src/boards/Classic/components/Select.tsx","src/boards/Classic/Classis.tsx","src/boards/SmallBoardForTwo/definition.ts","src/boards/SmallBoardForTwo/colors.ts","src/boards/SmallBoardForTwo/Stack.tsx","src/boards/types.ts","src/boards/SmallBoardForTwo/Board.tsx","src/boards/SmallBoardForTwo/Field.tsx","src/boards/SmallBoardForTwo/Token.tsx","src/boards/PlayingBoard.tsx","src/Board.tsx","src/helpers/client.ts","src/bots/simple.ts","src/Client.tsx","src/screens/Play.tsx","src/Navigation.tsx","App.tsx"],"names":["Color","FieldSector","config","strictMode","theme","extendTheme","colors","primary","50","100","200","300","400","500","600","700","800","900","components","Icon","defaultProps","as","MaterialCommunityIcons","useSystemColorMode","Theme","children","NativeBaseProvider","Storage","useState","loading","setLoading","useEffect","syncStorage","init","then","Settings","navigation","useStatePersist","type","setType","players","setPlayers","bots","setBots","VStack","flex","bg","alignItems","justifyContent","alignContent","safeArea","borderRadius","sm","maxW","w","minH","base","undefined","m","ScrollView","p","Heading","size","textAlign","my","Button","Group","isAttached","onPress","variant","isDisabled","Text","color","mx","mb","navigate","bot1","bot2","bot3","bot4","START_SQUARES","EXIT_SQUARES","moveError","G","ctx","id","token","tokens","gameover","kicked","Error","moves","sector","START","playerId","currentPlayer","END","start","LAP","end","fieldId","finish","exitSquare","rollError","color2FieldId","Red","Green","Blue","Yellow","selectError","_ctx","push","move","args","i","length","playOrder","forEach","game","name","minPlayers","maxPlayers","setup","reduce","prev","v","red","green","blue","yellow","finished","place","squares","Array","fill","die","roll","INVALID_MOVE","random","D6","enumerate","events","endTurn","s","playOrderPos","newFieldId","select","endIf","winner","ai","stepper","walk","stepSize","skipFirst","x","y","split","map","d","oldX","oldY","AnimatedG","Animated","createAnimatedComponent","AnimatedCircle","Circle","inputRange","Die","value","disabled","useRef","Value","current","v60","interpolate","outputRange","scale","d1","d2","d3","d4","d5","d6","d7","setValue","useCallback","parallel","sequence","timing","toValue","duration","useNativeDriver","onClick","width","height","stroke","strokeWidth","rx","ry","cx","cy","r","opacity","Square","Lap","data","join","Road","closed","rest","End","AG","ACircle","Token","xy","ValueXY","animation","glow","wiggle","stopAnimation","loop","fillOpacity","getColor","playerColor","light","Start","Badge","fontSize","Select","visible","SQUARE_ZERO","playerBox","WIDTH","lap","HEIGHT","exits","Classic","dieError","onDiePress","onTokenPress","onPlayerSelect","useWindowDimensions","maxSize","Math","min","toast","useToast","Box","h","viewBox","preserveAspectRatio","Fragment","key","selectable","show","title","error","field","definition","BoardType","Stack","props","textAnchor","Board","FOR_ALL_PLAYERS","keys","P0","P1","stackData","posX","fields","WHOLE_BOARD_WIDTH","board","renderFields","list","idPrefix","idx","WHOLE_BOARD_MARGIN","WHOLE_BOARD_HEIGHT","lastField","x1","y1","x2","y2","flatMap","dieDisabled","Field","PlayingBoard","boardType","boardProps","SMALL_BOARD_FOR_TWO","CLASSIC","console","warn","selectedBoard","t","Platform","OS","ClientReact","ClientReactNative","SimpleBot","objectives","_G","finished1","checker","weight","finished2","finished3","kickPlayer","iterations","playoutDepth","MCTSBot","Client","hasBots","C","useMemo","multiplayer","Local","client","Game","debug","collapseOnLoad","hideToggleButton","numPlayers","playerID","Play","route","params","showModal","setShowModal","Modal","isOpen","onClose","Content","maxWidth","CloseButton","Header","Footer","borderWidth","space","colorScheme","safeAreaTop","safeAreaRight","position","top","right","IconButton","_icon","RootStack","createStackNavigator","Navigation","NavigationContainer","Navigator","screenOptions","headerShown","Screen","component","App"],"mappings":"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","file":"static/js/app.3926401d.chunk.js","sourcesContent":["import type { PlayerID } from 'boardgame.io'\n\nexport enum Color {\n    Red = 'red',\n    Green = 'green',\n    Blue = 'blue',\n    Yellow = 'yellow',\n}\n\nexport interface Token {\n    id: number\n    color: Color\n    playerId: string\n    sector: FieldSector\n    fieldId: number\n}\n\nexport interface TokenUI extends Token {\n    error: string | false\n}\n\nexport type Players = {\n    [key: PlayerID]: {\n        name: string\n        start: {\n            [color in Color]: boolean\n        }\n        end: {\n            [color in Color]: boolean\n        }\n        finish: [boolean, boolean, boolean, boolean]\n        finished: number\n        place: null | number\n    }\n}\n\nexport interface State {\n    size: number\n    tokens: Token[]\n    squares: (number | null)[]\n    die: number | null\n    moves: number\n    kicked: number | null\n    players: Players\n    finished: number\n}\n\nexport enum FieldSector {\n    START = 'start',\n    LAP = 'lap',\n    END = 'end',\n}\n\nexport interface PlayingBoardDefinition {\n    maxPlayers: number\n    tokensPerPlayer: number\n    allFields: number\n    /** Start field id for each player. */\n    startField: number[]\n    /**\n     * How many fields the player needs to go to reach home.\n     * If first field is 0, the last field is this number.\n     */\n    fieldsToHome: number\n}\n\nexport interface GenericPlayingBoardProps {\n    players: {\n        id: string\n        name: string\n        place: null | number\n        selectable: boolean\n    }[]\n    currentPlayer: string\n    die: number\n    dieError: string | false\n    tokens: TokenUI[]\n    onTokenPress: (tokenId: number) => void\n    onDiePress: () => void\n    onPlayerSelect: (playerId: string) => void\n}\n\nexport interface Point {\n    x: number\n    y: number\n}\n","import React from 'react'\nimport { extendTheme, INativebaseConfig, NativeBaseProvider } from 'native-base'\nimport { MaterialCommunityIcons } from '@native-base/icons'\n\nconst config: INativebaseConfig = {\n    strictMode: 'warn',\n}\n\nconst theme = extendTheme({\n    colors: {\n        primary: {\n            50: '#e6f7fd',\n            100: '#c5e5ec',\n            200: '#a3d3dd',\n            300: '#80c2d1',\n            400: '#5eb1c3',\n            500: '#4797aa',\n            600: '#367584',\n            700: '#26545f',\n            800: '#13333a',\n            900: '#001216',\n        },\n    },\n    components: {\n        Icon: {\n            defaultProps: {\n                as: MaterialCommunityIcons,\n            },\n        },\n    },\n    config: {\n        useSystemColorMode: false,\n    },\n})\n\nconst Theme: React.FC = ({ children }) => (\n    <NativeBaseProvider theme={theme} config={config}>\n        {children}\n    </NativeBaseProvider>\n)\n\nexport default Theme\n","import React, { useEffect, useState } from 'react'\nimport { syncStorage } from 'use-state-persist'\n\nconst Storage: React.FC = ({ children }) => {\n    const [loading, setLoading] = useState(true)\n    useEffect(() => {\n        syncStorage.init().then(() => {\n            setLoading(false)\n        })\n    }, [])\n    return <>{loading ? null : children}</>\n}\n\nexport default Storage\n","import React from 'react'\nimport { Heading, Button, ScrollView, VStack, Text } from 'native-base'\nimport { useStatePersist } from 'use-state-persist'\n\nimport PlayerInput from '../components/PlayerInput'\nimport { RootStackScreenProps } from '../navigation/types'\n\nconst Settings = ({ navigation }: RootStackScreenProps<'Settings'>) => {\n    const [type, setType] = useStatePersist('TYPE', 'local')\n    const [players, setPlayers] = useStatePersist('PLAYERS', '2')\n    // const [theme, setTheme] = useStatePersist('THEME', 'classic')\n    // const [player1, setPlayer1] = useStatePersist('PLAYER1', '')\n    // const [player2, setPlayer2] = useStatePersist('PLAYER2', '')\n    // const [player3, setPlayer3] = useStatePersist('PLAYER3', '')\n    // const [player4, setPlayer4] = useStatePersist('PLAYER4', '')\n    // const [bot1, setBot1] = useStatePersist('BOT1', false)\n    // const [bot2, setBot2] = useStatePersist('BOT2', true)\n    // const [bot3, setBot3] = useStatePersist('BOT3', true)\n    // const [bot4, setBot4] = useStatePersist('BOT4', true)\n    const [bots, setBots] = useStatePersist('BOTS', false)\n    return (\n        <VStack\n            flex={1}\n            bg=\"lightBlue.200\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            alignContent={'stretch'}>\n            <VStack\n                safeArea\n                bg=\"white\"\n                borderRadius={{ sm: 20 }}\n                maxW={480}\n                w=\"100%\"\n                minH={{\n                    base: '100%',\n                    sm: undefined,\n                }}\n                m={{ sm: 5 }}>\n                <ScrollView p={5}>\n                    <Heading size=\"4xl\" textAlign=\"center\">\n                        Clovece\n                    </Heading>\n                    <Heading size=\"lg\" my=\"3\">\n                        Game type\n                    </Heading>\n                    <Button.Group isAttached>\n                        <Button\n                            onPress={() => setType('local')}\n                            variant={type === 'local' ? 'solid' : 'outline'}>\n                            Local\n                        </Button>\n                        <Button\n                            onPress={() => setType('online')}\n                            variant={type === 'online' ? 'solid' : 'outline'}\n                            isDisabled>\n                            Online*\n                        </Button>\n                    </Button.Group>\n                    <Heading size=\"lg\" my=\"3\">\n                        Number of players\n                    </Heading>\n                    <Button.Group isAttached>\n                        <Button\n                            onPress={() => setPlayers('2')}\n                            variant={players === '2' ? 'solid' : 'outline'}>\n                            2\n                        </Button>\n                        <Button\n                            onPress={() => setPlayers('3')}\n                            variant={players === '3' ? 'solid' : 'outline'}\n                            isDisabled>\n                            3*\n                        </Button>\n                        <Button\n                            onPress={() => setPlayers('4')}\n                            variant={players === '4' ? 'solid' : 'outline'}>\n                            4\n                        </Button>\n                    </Button.Group>\n                    <Heading size=\"lg\" my=\"3\">\n                        Play with bots\n                    </Heading>\n                    <Button.Group isAttached>\n                        <Button\n                            onPress={() => setBots(true)}\n                            variant={bots ? 'solid' : 'outline'}>\n                            Yes\n                        </Button>\n                        <Button\n                            onPress={() => setBots(false)}\n                            variant={!bots ? 'solid' : 'outline'}>\n                            No\n                        </Button>\n                    </Button.Group>\n                    {/* <Heading size=\"lg\" my=\"3\">\n                        Theme\n                    </Heading>\n                    <Button.Group isAttached>\n                        <Button\n                            onPress={() => setTheme('classic')}\n                            variant={theme === 'classic' ? 'solid' : 'outline'}>\n                            Classic\n                        </Button>\n                        <Button\n                            onPress={() => setTheme('modern')}\n                            variant={theme === 'modern' ? 'solid' : 'outline'}\n                            isDisabled>\n                            Modern*\n                        </Button>\n                    </Button.Group> */}\n                    {/* <Heading size=\"lg\" my=\"3\">\n                        Players\n                    </Heading>\n                    <PlayerInput\n                        value={player1}\n                        placeholder=\"Player 1\"\n                        onChange={setPlayer1}\n                        bot={bot1}\n                        setBot={setBot1}\n                    />\n                    <PlayerInput\n                        visible={+players >= 2}\n                        value={player2}\n                        placeholder=\"Player 2\"\n                        onChange={setPlayer2}\n                        bot={bot2}\n                        setBot={setBot2}\n                    />\n                    <PlayerInput\n                        visible={+players >= 3}\n                        value={player3}\n                        placeholder=\"Player 3\"\n                        onChange={setPlayer3}\n                        bot={bot3}\n                        setBot={setBot3}\n                    />\n                    <PlayerInput\n                        visible={+players >= 4}\n                        value={player4}\n                        placeholder=\"Player 4\"\n                        onChange={setPlayer4}\n                        bot={bot4}\n                        setBot={setBot4}\n                    /> */}\n                    <Text color={'gray.400'}>\n                        *Stay tuned for future version\n                    </Text>\n                </ScrollView>\n                <Button\n                    size=\"lg\"\n                    mx={5}\n                    mb={5}\n                    onPress={() =>\n                        navigation.navigate('Play', {\n                            players: +players,\n                            bot1: false,\n                            bot2: +players > 1 && bots,\n                            bot3: +players > 2 && bots,\n                            bot4: +players > 3 && bots,\n                        })\n                    }>\n                    Start game\n                </Button>\n            </VStack>\n        </VStack>\n    )\n}\n\nexport default Settings\n","import { Ctx, Move } from 'boardgame.io'\nimport { INVALID_MOVE } from 'boardgame.io/core'\n\nimport { SEGMENT_SIZE } from '../constants'\nimport { FieldSector, State } from '../types'\n\nconst START_SQUARES = [0, 2 * SEGMENT_SIZE, 1 * SEGMENT_SIZE, 3 * SEGMENT_SIZE]\nconst EXIT_SQUARES = [\n    4 * SEGMENT_SIZE - 1,\n    2 * SEGMENT_SIZE - 1,\n    1 * SEGMENT_SIZE - 1,\n    3 * SEGMENT_SIZE - 1,\n]\n\nexport const moveError = (G: State, ctx: Ctx, id: number): false | string => {\n    const token = G.tokens[id]\n    if (ctx.gameover) {\n        return 'The game is over.'\n    }\n    if (G.kicked !== null) {\n        return 'Select which player gets kicked out token before continue.'\n    }\n    if (!token) {\n        throw new Error('id is undefined')\n    }\n    if (G.moves !== 6 && token.sector === FieldSector.START) {\n        return 'Throw 6 on dice in order to take token from staring zone.'\n    }\n    if (\n        token.sector === FieldSector.START &&\n        token.playerId !== ctx.currentPlayer\n    ) {\n        return 'You can only select token from your own starting zone.'\n    }\n    if (\n        token.sector === FieldSector.END &&\n        token.playerId !== ctx.currentPlayer\n    ) {\n        return 'You can only move tokens in own endzone.'\n    }\n    if (G.moves === 0) {\n        return 'Throw the die first to determine how many steps you can move.'\n    }\n    if (\n        token.sector !== FieldSector.START &&\n        G.players[ctx.currentPlayer].start[token.color]\n    ) {\n        return 'You need to bring ${token.color} token from staring zone to game so that you can move with any ${token.color} tokens.'\n    }\n    if (\n        token.sector === FieldSector.LAP &&\n        G.players[ctx.currentPlayer].end[token.color]\n    ) {\n        return 'You cannot move this token. Token of this color is already in your endzone.'\n    }\n    if (token.sector === FieldSector.END && token.fieldId + G.moves > 3) {\n        return 'You cannot move this token. There is not enough squares to move.'\n    }\n    if (\n        token.sector === FieldSector.END &&\n        G.players[ctx.currentPlayer].finish[token.fieldId + G.moves]\n    ) {\n        return 'You cannot move this token. You would land on your own token in the finish.'\n    }\n\n    if (token.sector === FieldSector.LAP) {\n        let moves = G.moves\n        let fieldId = token.fieldId\n        const exitSquare = EXIT_SQUARES[+ctx.currentPlayer]\n        while (moves > 0 && fieldId !== exitSquare) {\n            fieldId++\n            moves--\n            if (fieldId === exitSquare) {\n                break\n            }\n        }\n        if (moves > 0) {\n            if (moves > 4) {\n                return 'You cannot move this token. You would land behind finish.'\n            }\n            if (G.players[ctx.currentPlayer].finish[moves - 1]) {\n                return 'You cannot move this token. You would land on your own token in the finish.'\n            }\n        }\n    }\n    return false\n}\n\nexport const move: Move<State> = (G, ctx, id: number) => {\n    if (moveError(G, ctx, id)) {\n        return INVALID_MOVE\n    }\n    const token = G.tokens[id]\n    if (token.sector === FieldSector.START) {\n        token.sector = FieldSector.LAP\n        const s = START_SQUARES[ctx.playOrderPos]\n        if (G.squares[s] !== null) {\n            G.kicked = G.squares[s]\n        }\n        G.moves = 0\n        G.squares[s] = id\n        G.players[ctx.currentPlayer].start[token.color] = false\n        token.fieldId = s\n    } else if (token.sector === FieldSector.END) {\n        G.players[ctx.currentPlayer].finish[token.fieldId] = false\n        token.fieldId += G.moves\n        G.players[ctx.currentPlayer].finish[token.fieldId] = true\n    } else {\n        const exitSquare = EXIT_SQUARES[+ctx.currentPlayer]\n        G.squares[token.fieldId] = null\n        let newFieldId = token.fieldId\n        while (G.moves > 0 && newFieldId !== exitSquare) {\n            G.moves--\n            newFieldId = (newFieldId + 1) % G.size\n            if (newFieldId === exitSquare) {\n                break\n            }\n        }\n        if (G.moves > 0) {\n            token.sector = FieldSector.END\n            token.fieldId = G.moves - 1\n            token.playerId = ctx.currentPlayer\n            G.players[ctx.currentPlayer].finish[token.fieldId] = true\n            G.players[ctx.currentPlayer].end[token.color] = true\n            G.players[ctx.currentPlayer].finished++\n            if (G.players[ctx.currentPlayer].finished === 4) {\n                G.finished++\n                G.players[ctx.currentPlayer].place = G.finished\n            }\n        } else {\n            token.fieldId = newFieldId\n            if (G.squares[newFieldId] !== null) {\n                G.kicked = G.squares[newFieldId]\n            }\n            G.squares[newFieldId] = token.id\n        }\n    }\n    G.moves = 0\n    if (G.die !== 6 && G.kicked === null) {\n        ctx.events?.endTurn()\n    }\n}\n","import { Ctx, Move } from 'boardgame.io'\nimport { INVALID_MOVE } from 'boardgame.io/core'\n\nimport enumerate from '../helpers/enumerate'\nimport { State } from '../types'\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const rollError = (G: State, ctx: Ctx): false | string => {\n    if (G.moves !== 0) {\n        return 'Finish your move before before rolling die.'\n    }\n    if (G.kicked !== null) {\n        return 'Select which player gets kicked out token before rolling die again.'\n    }\n    if (ctx.gameover) {\n        return 'The game is over.'\n    }\n    return false\n}\n\nexport const roll: Move<State> = (G, ctx) => {\n    if (rollError(G, ctx)) {\n        return INVALID_MOVE\n    }\n    if (!ctx.random) {\n        throw new Error('Random is undefined')\n    }\n    G.die = ctx.random.D6()\n    G.moves = G.die\n    if (enumerate(G, ctx).length == 0) {\n        G.moves = 0\n        ctx.events?.endTurn()\n    }\n}\n","import { Ctx, Move } from 'boardgame.io'\nimport { INVALID_MOVE } from 'boardgame.io/core'\n\nimport { Color, FieldSector, State } from '../types'\n\nconst color2FieldId = {\n    [Color.Red]: 0,\n    [Color.Green]: 1,\n    [Color.Blue]: 2,\n    [Color.Yellow]: 3,\n}\n\nexport const selectError = (\n    G: State,\n    _ctx: Ctx,\n    playerId: string,\n): false | string => {\n    if (playerId === undefined) {\n        throw new Error('PlayerId is undefined')\n    }\n    if (G.kicked === null) {\n        return 'Nothing to select. Token need to be kicked out first.'\n    }\n    const token = G.tokens[G.kicked]\n    if (G.players[playerId].start[token.color]) {\n        return `Player ${playerId} already has token of ${token.color} color in their start.`\n    }\n    if (G.players[playerId].end[token.color]) {\n        return `Player ${playerId} already has token of ${token.color} color in their finish.`\n    }\n    return false\n}\n\nexport const select: Move<State> = (G, ctx, playerId: string) => {\n    if (selectError(G, ctx, playerId)) {\n        return INVALID_MOVE\n    }\n    if (G.kicked === null) {\n        return INVALID_MOVE\n    }\n    const token = G.tokens[G.kicked]\n    token.sector = FieldSector.START\n    token.playerId = playerId\n    token.fieldId = color2FieldId[token.color]\n    G.players[playerId].start[token.color] = true\n    G.kicked = null\n    if (G.die !== 6) {\n        ctx.events?.endTurn()\n    }\n}\n","import { Ctx } from 'boardgame.io'\n\nimport { moveError } from '../moves/move'\nimport { rollError } from '../moves/roll'\nimport { selectError } from '../moves/select'\nimport { State } from '../types'\n\nexport default (G: State, ctx: Ctx) => {\n    const moves = []\n    if (!rollError(G, ctx)) {\n        moves.push({ move: 'roll', args: [] })\n    }\n    for (let i = 0; i < G.tokens.length; i++) {\n        if (!moveError(G, ctx, i)) {\n            moves.push({ move: 'move', args: [i] })\n        }\n    }\n    ctx.playOrder.forEach((p) => {\n        if (!selectError(G, ctx, p)) {\n            moves.push({ move: 'select', args: [p] })\n        }\n    })\n    return moves\n}\n","import { Ctx } from 'boardgame.io'\n\nimport { SEGMENT_SIZE } from '../constants'\nimport { Token, Color, FieldSector, Players } from '../types'\n\nexport default (ctx: Ctx) => {\n    const tokens: Token[] = ctx.playOrder.reduce<Token[]>(\n        (prev, p, i) => [\n            ...prev,\n            {\n                id: i * 4,\n                color: Color.Red,\n                playerId: p,\n                sector: FieldSector.START,\n                fieldId: 0,\n            },\n            {\n                id: i * 4 + 1,\n                color: Color.Green,\n                playerId: p,\n                sector: FieldSector.START,\n                fieldId: 1,\n            },\n            {\n                id: i * 4 + 2,\n                color: Color.Blue,\n                playerId: p,\n                sector: FieldSector.START,\n                fieldId: 2,\n            },\n            {\n                id: i * 4 + 3,\n                color: Color.Yellow,\n                playerId: p,\n                sector: FieldSector.START,\n                fieldId: 3,\n            },\n        ],\n        [],\n    )\n    const size = 4 * SEGMENT_SIZE\n    const players: Players = ctx.playOrder.reduce(\n        (p, v) => ({\n            ...p,\n            [v]: {\n                name: '',\n                start: {\n                    red: true,\n                    green: true,\n                    blue: true,\n                    yellow: true,\n                },\n                end: {\n                    red: false,\n                    green: false,\n                    blue: false,\n                    yellow: false,\n                },\n                finish: [false, false, false, false],\n                finished: 0,\n                place: null,\n            },\n        }),\n        {},\n    )\n\n    return {\n        size,\n        tokens,\n        squares: new Array(size).fill(null),\n        kicked: null,\n        die: null,\n        moves: 0,\n        players,\n        finished: 0,\n    }\n}\n","import type { Game } from 'boardgame.io'\n\nimport enumerate from './helpers/enumerate'\nimport endIf from './helpers/endIf'\nimport setup from './helpers/setup'\nimport { move } from './moves/move'\nimport { roll } from './moves/roll'\nimport { select } from './moves/select'\nimport { State } from './types'\n\nconst game: Game<State> = {\n    name: 'Clovece',\n    // seed: 0,\n    minPlayers: 2,\n    maxPlayers: 4,\n    setup,\n    moves: {\n        roll,\n        move,\n        select,\n    },\n    endIf,\n    ai: {\n        enumerate,\n    },\n}\n\nexport default game\n","import { Ctx } from 'boardgame.io'\n\nimport { State } from '../types'\n\nexport default (G: State, ctx: Ctx) => {\n    for (let i = 0; i < ctx.playOrder.length; i++) {\n        if (G.players[ctx.playOrder[i]].finished === 4) {\n            return { winner: ctx.playOrder[i] }\n        }\n    }\n}\n","import { Point } from './types'\n\nexport const stepper = (\n    start: Point,\n    walk: string,\n    stepSize: number,\n    skipFirst = true,\n) => {\n    let { x, y } = start\n    return walk.split('').map((d) => {\n        const oldX = x\n        const oldY = y\n        if (d === 'U') {\n            y -= stepSize\n        } else if (d === 'D') {\n            y += stepSize\n        } else if (d === 'L') {\n            x -= stepSize\n        } else if (d === 'R') {\n            x += stepSize\n        } else if (d === '↘') {\n            x += stepSize\n            y += stepSize\n        } else if (d === '↖') {\n            x -= stepSize\n            y -= stepSize\n        } else if (d === '↙') {\n            x -= stepSize\n            y += stepSize\n        } else if (d === '↗') {\n            x += stepSize\n            y -= stepSize\n        } else {\n            throw new Error(`Unknown direction \"${d}\"`)\n        }\n        if (skipFirst) {\n            return { x, y }\n        }\n        return { x: oldX, y: oldY }\n    })\n}\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport { Animated } from 'react-native'\nimport { Rect, G, Circle } from 'react-native-svg'\n\ninterface Props {\n    x: number\n    y: number\n    size: number\n    value: number\n    disabled: boolean\n    onPress: () => void\n}\n\nconst SIZE = 200\n\nconst AnimatedG = Animated.createAnimatedComponent(G)\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle)\n\nconst inputRange = [0, 59, 60, 119, 120, 179, 180, 239, 240, 299, 300, 360]\n\nconst Die: React.FC<Props> = ({ x, y, size, value, disabled, onPress }) => {\n    const v = useRef(new Animated.Value(value)).current\n    const v60 = v.interpolate({ inputRange: [1, 6], outputRange: [0, 360] })\n    const scale = useRef(new Animated.Value(size / 200)).current\n\n    const d1 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],\n    })\n    const d2 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\n    })\n    const d3 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    })\n    const d4 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    })\n    const d5 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\n    })\n    const d6 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],\n    })\n    const d7 = v60.interpolate({\n        inputRange,\n        outputRange: [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],\n    })\n    useEffect(() => {\n        v.setValue(value)\n    }, [disabled, value])\n\n    const roll = useCallback(() => {\n        if (!disabled) {\n            Animated.parallel([\n                Animated.sequence([\n                    Animated.timing(scale, {\n                        toValue: (size / SIZE) * 1.2,\n                        duration: 500,\n                        useNativeDriver: false,\n                    }),\n                    Animated.timing(scale, {\n                        toValue: size / SIZE,\n                        duration: 500,\n                        useNativeDriver: false,\n                    }),\n                ]),\n                Animated.sequence([\n                    Animated.timing(v, {\n                        toValue: 6,\n                        duration: 500,\n                        useNativeDriver: true,\n                    }),\n                    Animated.timing(v, {\n                        toValue: 1,\n                        duration: 500,\n                        useNativeDriver: true,\n                    }),\n                ]),\n            ]).start(() => {\n                onPress()\n            })\n        } else {\n            onPress()\n        }\n    }, [disabled])\n\n    return (\n        <G x={x} y={y}>\n            <AnimatedG scale={scale} onPress={roll} onClick={roll}>\n                <Rect\n                    x={-100}\n                    y={-100}\n                    width={200}\n                    height={200}\n                    stroke=\"gray\"\n                    strokeWidth={1}\n                    rx={20}\n                    ry={20}\n                    fill=\"white\"\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={-60}\n                    cy={-60}\n                    r={25}\n                    opacity={d1}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={0}\n                    cy={-60}\n                    r={25}\n                    opacity={d2}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={60}\n                    cy={-60}\n                    r={25}\n                    opacity={d3}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={-60}\n                    cy={60}\n                    r={25}\n                    opacity={d4}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={0}\n                    cy={60}\n                    r={25}\n                    opacity={d5}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={60}\n                    cy={60}\n                    r={25}\n                    opacity={d6}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={0}\n                    cy={0}\n                    r={25}\n                    opacity={d7}\n                />\n            </AnimatedG>\n        </G>\n    )\n}\n\nexport default Die\n","import React from 'react'\nimport { Circle } from 'react-native-svg'\n\ninterface Props {\n    x: number\n    y: number\n}\nconst Square = ({ x, y }: Props) => {\n    return (\n        <Circle\n            cx={x}\n            cy={y}\n            r={30}\n            fill=\"white\"\n            stroke=\"#333\"\n            strokeWidth={3}\n        />\n    )\n}\n\nexport default Square\n","import React from 'react'\nimport { Path } from 'react-native-svg'\n\nimport { Point } from '../../../types'\nimport Square from './Square'\n\ninterface Props {\n    data: Point[]\n}\n\nconst Lap = ({ data }: Props) => {\n    return (\n        <>\n            <Path\n                d={\n                    data\n                        .map(\n                            ({ x, y }, i) =>\n                                `${i === 0 ? 'M' : 'L'} ${x} ${y} `,\n                        )\n                        .join('') + 'Z'\n                }\n                stroke=\"#333\"\n                strokeWidth=\"30\"\n                fill=\"transparent\"\n            />\n            {data.map(({ x, y }, i) => (\n                <Square x={x} y={y} key={i} />\n            ))}\n        </>\n    )\n}\n\nexport default Lap\n","import React from 'react'\nimport { Path, PathProps } from 'react-native-svg'\nimport { Point } from '../../../types'\n\ninterface LineProps extends PathProps {\n    data: Point[]\n    closed?: boolean\n}\n\nconst Road = ({ data, closed, ...rest }: LineProps) => {\n    return (\n        <Path\n            d={\n                data\n                    .map(({ x, y }, i) => `${i === 0 ? 'M' : 'L'} ${x} ${y} `)\n                    .join('') + (closed ? 'Z' : '')\n            }\n            fill=\"transparent\"\n            stroke=\"#333\"\n            strokeWidth={30}\n            {...rest}\n        />\n    )\n}\n\nexport default Road\n","import React from 'react'\n\nimport { Point } from '../../../types'\nimport Road from './Road'\nimport Square from './Square'\n\ninterface Props {\n    data: Point[]\n}\n\nconst End = ({ data }: Props) => {\n    return (\n        <>\n            <Road data={data} stroke=\"#333\" strokeWidth={30} />\n            {data.map(({ x, y }, i) => (\n                <Square key={i} x={x} y={y} />\n            ))}\n        </>\n    )\n}\n\nexport default End\n","import React, { useEffect, useRef } from 'react'\nimport { Animated } from 'react-native'\nimport { Circle, G, Path } from 'react-native-svg'\n\ninterface TokenProps {\n    x: number\n    y: number\n    size: number\n    color: string\n    disabled: boolean\n    onPress: () => void\n}\n\nconst AG = Animated.createAnimatedComponent(G)\nconst ACircle = Animated.createAnimatedComponent(Circle)\n\nexport const Token: React.FC<TokenProps> = ({\n    x,\n    y,\n    size,\n    color,\n    disabled,\n    onPress,\n}) => {\n    const xy = useRef(new Animated.ValueXY({ x, y })).current\n    const animation = useRef(new Animated.Value(0)).current\n    const glow = animation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 30],\n    })\n    const wiggle = animation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, -10],\n    })\n    useEffect(() => {\n        Animated.timing(xy, {\n            toValue: { x, y },\n            duration: 400,\n            useNativeDriver: false,\n        }).start()\n    }, [x, y])\n    useEffect(() => {\n        if (disabled) {\n            animation.setValue(0)\n            animation.stopAnimation()\n        } else {\n            Animated.loop(\n                Animated.sequence([\n                    Animated.timing(animation, {\n                        toValue: 1,\n                        duration: 500,\n                        useNativeDriver: false,\n                    }),\n                    Animated.timing(animation, {\n                        toValue: 0,\n                        duration: 500,\n                        useNativeDriver: false,\n                    }),\n                ]),\n            ).start()\n        }\n    }, [disabled])\n    return (\n        <AG x={xy.x} y={xy.y} onClick={onPress} onPress={onPress}>\n            <ACircle\n                r={glow}\n                fill={color}\n                fillOpacity={0.2}\n                strokeWidth={disabled ? 2 : 4}\n                opacity={disabled ? 0.7 : 1}\n            />\n            <AG y={wiggle}>\n                <Path\n                    d=\"M10,-20 -10,-20 -15,0 a15,15 0 0,0 30,0 Z\"\n                    stroke=\"black\"\n                    strokeWidth={disabled ? 2 : 4}\n                    opacity={disabled ? 0.7 : 1}\n                    fill={color}\n                />\n                <Circle cy={-size} r={14} fill=\"white\" />\n                <Circle\n                    cy={-size}\n                    r={14}\n                    fill={color}\n                    stroke=\"black\"\n                    strokeWidth={disabled ? 2 : 4}\n                    opacity={disabled ? 0.7 : 1}\n                />\n            </AG>\n        </AG>\n    )\n}\n","import { Color } from '../../types'\n\nexport function getColor(playerColor: Color, light = false) {\n    switch (playerColor) {\n        case Color.Red:\n            return light ? '#ff8080' : '#bf202f'\n\n        case Color.Green:\n            return light ? '#29b376' : '#006f3c'\n\n        case Color.Blue:\n            return light ? '#8080ff' : '#274b96'\n\n        case Color.Yellow:\n            return light ? '#ffff80' : '#faa73e'\n    }\n}\n","import React from 'react'\n\nimport { Point } from '../../../types'\nimport Square from './Square'\n\ninterface Props {\n    data: Point[]\n}\n\nconst Start = ({ data }: Props) => {\n    return (\n        <>\n            {data.map(({ x, y }, i) => (\n                <Square x={x} y={y} key={i} />\n            ))}\n        </>\n    )\n}\n\nexport default Start\n","import React from 'react'\nimport { G, Path, Text } from 'react-native-svg'\n\ninterface Props {\n    x: number\n    y: number\n    place: number\n}\n\nconst Badge = ({ x, y, place = 1 }: Props) => (\n    <G x={x} y={y} scale=\"0.2\">\n        <Path\n            fill=\"#e61c24\"\n            d=\"M513 233c11-10 16-25 12-40s-15-27-28-31c5-14 3-29-6-42a41 41 0 0 0-40-15 42 42 0 0 0-65-31c-8-12-21-21-37-21-17 0-31 10-38 24a42 42 0 0 0-45-4c-14 8-22 21-23 36-15-2-29 4-39 16a41 41 0 0 0-5 41c-14 5-24 17-28 32-3 15 3 30 14 39a42 42 0 0 0 17 71c-5 13-3 30 7 41 9 12 25 17 39 15 1 15 10 28 24 34 14 7 30 5 42-4 7 13 21 21 37 21 15 0 29-9 35-21 13 8 28 9 42 2s23-20 23-35c15 2 29-3 40-15 9-13 11-28 5-42 14-4 25-16 29-31 3-15-1-30-12-40zM349 374a139 139 0 0 1 0-279 139 139 0 1 1 0 279z\"\n        />\n        <Path\n            fill=\"#fbcc03\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n            d=\"M474 234a125 125 0 1 1-250 0 125 125 0 0 1 250 0m-39 173c-8 3-16 5-24 5-7 0-13-1-20-4l-7 7-3 2 36 91 41-58 69 19-40-104c-7 5-16 8-24 9-5 14-15 26-28 33zm-123 2c-7 3-14 5-21 5-8 0-15-2-23-5-14-6-24-19-28-33-6 0-12-1-17-4l-37 96 69-18 41 57 34-85c-7-3-13-7-18-13z\"\n        />\n        <Text x=\"300\" y=\"300\" fontSize=\"200\" fill=\"#e61c24\">\n            {place}\n        </Text>\n    </G>\n)\n\nexport default Badge\n","import React, { useRef, useEffect } from 'react'\nimport { Animated } from 'react-native'\nimport { Circle } from 'react-native-svg'\n\ninterface Props {\n    visible: boolean\n}\n\nconst ACircle = Animated.createAnimatedComponent(Circle)\n\nconst Select = ({ visible }: Props) => {\n    const rx = useRef(new Animated.Value(130)).current\n    useEffect(() => {\n        if (visible) {\n            Animated.loop(\n                Animated.sequence([\n                    Animated.timing(rx, {\n                        toValue: 160,\n                        duration: 300,\n                        useNativeDriver: false,\n                    }),\n                    Animated.timing(rx, {\n                        toValue: 130,\n                        duration: 300,\n                        useNativeDriver: false,\n                    }),\n                ]),\n            ).start()\n        }\n    }, [visible])\n\n    return (\n        <>\n            {visible && (\n                <ACircle\n                    fill=\"yellow\"\n                    stroke=\"#333\"\n                    strokeWidth={visible ? 4 : 0}\n                    r={rx}\n                />\n            )}\n        </>\n    )\n}\n\nexport default Select\n","import React from 'react'\nimport { useWindowDimensions } from 'react-native'\nimport { Box, useToast, VStack } from 'native-base'\nimport Svg, { Rect, G } from 'react-native-svg'\n\nimport { FieldSector, GenericPlayingBoardProps, Point } from '../../types'\nimport { stepper } from '../../utils'\nimport Die from '../components/Die'\nimport Lap from './components/Lap'\nimport End from './components/End'\nimport { Token } from './components/Token'\nimport { getColor } from './colors'\nimport Start from './components/Start'\nimport Road from './components/Road'\nimport Badge from '../components/Badge'\nimport Select from './components/Select'\n\nconst WIDTH = 1000\nconst HEIGHT = 1000\nconst START = 350\nconst STEP = 90\nconst DIE_SIZE = 100\nconst TOKEN_SIZE = 30\nconst SQUARE_ZERO = {\n    x: -40,\n    y: 500 - STEP,\n}\n\nconst playerBox = stepper(\n    { x: START / 2, y: START / 2 },\n    '↘L↗D',\n    WIDTH - START,\n    false,\n)\n\ninterface Squares {\n    [FieldSector.START]: Point[][]\n    [FieldSector.LAP]: Point[]\n    [FieldSector.END]: Point[][]\n}\n\nconst lap = stepper(\n    SQUARE_ZERO,\n    'RRRRRUUUURRDDDDRRRRDDLLLLDDDDLLUUUULLLLU',\n    STEP,\n)\n\nconst start = [\n    stepper(\n        { x: START / 2 - STEP / 2, y: START / 2 - STEP / 2 },\n        'RDLU',\n        STEP,\n        false,\n    ),\n    stepper(\n        { x: WIDTH - START / 2 - STEP / 2, y: HEIGHT - START / 2 - STEP / 2 },\n        'RDLU',\n        STEP,\n        false,\n    ),\n    stepper(\n        { x: WIDTH - START / 2 - STEP / 2, y: START / 2 - STEP / 2 },\n        'RDLU',\n        STEP,\n        false,\n    ),\n    stepper(\n        { x: START / 2 - STEP / 2, y: HEIGHT - START / 2 - STEP / 2 },\n        'RDLU',\n        STEP,\n        false,\n    ),\n]\n\nconst exits = [39, 19, 9, 29]\n\nconst end = [\n    stepper(lap[39], 'RRRR', STEP),\n    stepper(lap[19], 'LLLL', STEP),\n    stepper(lap[9], 'DDDD', STEP),\n    stepper(lap[29], 'UUUU', STEP),\n]\n\nconst squares: Squares = {\n    [FieldSector.LAP]: lap,\n    [FieldSector.START]: start,\n    [FieldSector.END]: end,\n}\n\nconst Classic = ({\n    die,\n    dieError,\n    onDiePress,\n    tokens,\n    onTokenPress,\n    players,\n    currentPlayer,\n    onPlayerSelect,\n}: GenericPlayingBoardProps) => {\n    const { width, height } = useWindowDimensions()\n    const maxSize = Math.min(width, height)\n    const toast = useToast()\n    return (\n        <VStack alignItems=\"center\">\n            <Box w={maxSize - 10} h={maxSize - 10}>\n                <Svg\n                    height=\"100%\"\n                    width=\"100%\"\n                    viewBox={`0 0 ${WIDTH} ${HEIGHT}`}\n                    preserveAspectRatio=\"xMinYMin slice\">\n                    <Rect width=\"1000\" height=\"1000\" fill=\"#f5d9a1\" />\n                    <Rect\n                        x=\"10\"\n                        y=\"10\"\n                        width=\"980\"\n                        height=\"980\"\n                        strokeWidth=\"3\"\n                        stroke=\"black\"\n                        fill=\"transparent\"\n                    />\n                    <Rect\n                        width=\"1000\"\n                        height=\"1000\"\n                        strokeWidth=\"10\"\n                        stroke=\"#bb3630\"\n                        fill=\"transparent\"\n                    />\n                    {players.map((p, i) => (\n                        <React.Fragment key={i}>\n                            <G {...playerBox[i]}>\n                                <Rect\n                                    width={START / 2}\n                                    height={START / 2}\n                                    x={-START / 4}\n                                    y={-START / 4}\n                                    fill={\n                                        p.id === currentPlayer\n                                            ? 'yellow'\n                                            : 'transparent'\n                                    }\n                                    stroke=\"#333\"\n                                    strokeWidth={p.id === currentPlayer ? 4 : 0}\n                                    rx=\"30\"\n                                />\n                            </G>\n                        </React.Fragment>\n                    ))}\n                    {players.map((p, i) => (\n                        <G\n                            {...playerBox[i]}\n                            key={i}\n                            onPress={() => onPlayerSelect(p.id)}\n                            onClick={() => onPlayerSelect(p.id)}>\n                            <Select visible={p.selectable} />\n                        </G>\n                    ))}\n                    {players.map((p, i) => (\n                        <React.Fragment key={i}>\n                            <Road\n                                data={[\n                                    squares.lap[exits[i]],\n                                    squares.end[i][0],\n                                ]}\n                            />\n                            <Start data={squares.start[i]} />\n                            <End data={squares.end[i]} />\n                            {p.place && (\n                                <G {...playerBox[i]}>\n                                    <Badge x={50} y={0} place={p.place} />\n                                </G>\n                            )}\n                        </React.Fragment>\n                    ))}\n                    <Lap data={squares.lap} />\n                    <Die\n                        x={WIDTH / 2}\n                        y={HEIGHT / 2}\n                        size={DIE_SIZE}\n                        value={die}\n                        disabled={!!dieError}\n                        onPress={() => {\n                            if (dieError) {\n                                toast.show({ title: dieError })\n                            } else {\n                                onDiePress()\n                            }\n                        }}\n                    />\n                    {tokens.map(\n                        ({ id, sector, fieldId, playerId, color, error }) => {\n                            const field =\n                                sector === FieldSector.LAP\n                                    ? squares[sector][fieldId]\n                                    : squares[sector][+playerId][fieldId]\n                            return (\n                                <Token\n                                    key={id}\n                                    x={field.x}\n                                    y={field.y}\n                                    color={getColor(color)}\n                                    size={TOKEN_SIZE}\n                                    disabled={!!error}\n                                    onPress={() => {\n                                        if (error) {\n                                            toast.show({\n                                                title: error,\n                                            })\n                                        } else {\n                                            onTokenPress(id)\n                                        }\n                                    }}\n                                />\n                            )\n                        },\n                    )}\n                </Svg>\n            </Box>\n        </VStack>\n    )\n}\n\nexport default Classic\n","import { PlayingBoardDefinition } from '../../types'\n\nexport const definition: PlayingBoardDefinition = {\n    maxPlayers: 2,\n    tokensPerPlayer: 4,\n    allFields: 12,\n    startField: [\n        0, // player 0\n        6, // player 1\n    ],\n    fieldsToHome: 9,\n}\n","import { Color } from '../../types'\n\nexport function getColor(playerColor: Color, light = false) {\n    switch (playerColor) {\n        case Color.Red:\n            return light ? '#ff8080' : '#bf202f'\n\n        case Color.Green:\n            return light ? '#29b376' : '#006f3c'\n\n        case Color.Blue:\n            return light ? '#8080ff' : '#274b96'\n\n        case Color.Yellow:\n            return light ? '#ffff80' : '#faa73e'\n    }\n}\n","import React from 'react'\nimport { G, Rect, Text } from 'react-native-svg'\n\ninterface StackProps {\n    x: number\n    y: number\n    width: number\n    height: number\n    title: string\n    color: string\n}\n\nexport const Stack: React.FC<StackProps> = (props) => {\n    return (\n        <G>\n            <Rect\n                x={props.x - props.width / 2}\n                y={props.y}\n                width={props.width}\n                height={props.height}\n                stroke=\"black\"\n                strokeWidth=\"2\"\n                fill={props.color}\n            />\n            <Text\n                x={props.x}\n                y={props.y + 40}\n                textAnchor=\"middle\"\n                stroke=\"black\"\n                fill=\"black\"\n                fontSize=\"40\"\n            >\n                {props.title}\n            </Text>\n        </G>\n    )\n}\n","export enum BoardType {\n    SMALL_BOARD_FOR_TWO,\n    CLASSIC,\n}\n","import React from 'react'\nimport Svg, { Line, Rect, G } from 'react-native-svg'\nimport { Field, definition, Token } from '.'\nimport { FieldSector, GenericPlayingBoardProps } from '../../types'\nimport Die from '../components/Die'\nimport { getColor } from './colors'\nimport { Stack } from './Stack'\n\nconst WHOLE_BOARD_WIDTH = 1000\nconst WHOLE_BOARD_HEIGHT = 1000\nconst WHOLE_BOARD_MARGIN = 20\n\nconst STACK_WIDTH = (WHOLE_BOARD_WIDTH - 2 * WHOLE_BOARD_MARGIN) / 2 - 40\nconst FIELD_SIZE = 80\nconst TOKEN_SIZE = 40\n\ninterface PositionAndColor {\n    x: number\n    y: number\n    color: string\n}\n\ninterface Fields {\n    [FieldSector.START]: PositionAndColor[][]\n    [FieldSector.LAP]: PositionAndColor[]\n    [FieldSector.END]: PositionAndColor[][]\n}\n\nexport const Board: React.FC<GenericPlayingBoardProps> = (props) => {\n    const fieldSpace = 0.5 * FIELD_SIZE\n    const boardWidth = 3 * (FIELD_SIZE + fieldSpace)\n    const boardHeight = boardWidth\n    const boardX = WHOLE_BOARD_WIDTH / 2 - boardWidth / 2\n    const boardY = 400\n\n    // helper array with all player ids\n    const FOR_ALL_PLAYERS = [...Array(definition.maxPlayers).keys()]\n    const [P0, P1] = FOR_ALL_PLAYERS\n\n    const stackData = [\n        { posX: 260, color: getColor(props.players[P0].color) },\n        { posX: 740, color: getColor(props.players[P1].color) },\n    ]\n\n    const fields: Fields = {\n        start: [\n            // player 0\n            [\n                { x: 40 + 1 * 55, y: 150, color: 'white' },\n                { x: 40 + 3 * 55, y: 150, color: 'white' },\n                { x: 40 + 5 * 55, y: 150, color: 'white' },\n                { x: 40 + 7 * 55, y: 150, color: 'white' },\n            ],\n            // player 1\n            [\n                { x: 520 + 1 * 55, y: 150, color: 'white' },\n                { x: 520 + 3 * 55, y: 150, color: 'white' },\n                { x: 520 + 5 * 55, y: 150, color: 'white' },\n                { x: 520 + 7 * 55, y: 150, color: 'white' },\n            ],\n        ],\n        end: FOR_ALL_PLAYERS.map((playerId) => {\n            return new Array(definition.tokensPerPlayer).fill(null).map(() => {\n                return {\n                    x: boardX,\n                    y: boardY,\n                    color: getColor(props.players[playerId].color),\n                }\n            })\n        }),\n        board: new Array(definition.allFields).fill(null).map(() => {\n            return { x: boardX, y: boardY, color: 'white' }\n        }),\n    }\n\n    // calculate home field positions\n    for (let i = 0; i < definition.tokensPerPlayer; i++) {\n        // player 0\n        fields.end[P0][i].x -= 1 * (fieldSpace + FIELD_SIZE)\n        fields.end[P0][i].y += (3 - i) * (fieldSpace + FIELD_SIZE)\n        // player 1\n        fields.end[P1][i].x += 4 * (fieldSpace + FIELD_SIZE)\n        fields.end[P1][i].y += i * (fieldSpace + FIELD_SIZE)\n    }\n\n    // update start field colors\n    FOR_ALL_PLAYERS.map((playerId) => {\n        fields.board[definition.startField[playerId]].color = getColor(\n            props.players[playerId].color,\n            true,\n        )\n    })\n\n    // calculate board field positions\n    for (let i = 1; i < 4; i++) {\n        // top row\n        fields.board[i].x += i * (fieldSpace + FIELD_SIZE)\n        // right row\n        fields.board[i + 3].x += 3 * (fieldSpace + FIELD_SIZE)\n        fields.board[i + 3].y += i * (fieldSpace + FIELD_SIZE)\n        // bottom row\n        fields.board[i + 6].x += (3 - i) * (fieldSpace + FIELD_SIZE)\n        fields.board[i + 6].y += 3 * (fieldSpace + FIELD_SIZE)\n        // left row\n        fields.board[(i + 9) % definition.allFields].y +=\n            (3 - i) * (fieldSpace + FIELD_SIZE)\n    }\n\n    const renderStacks = () => {\n        return FOR_ALL_PLAYERS.map((playerId) => {\n            return (\n                <Stack\n                    key={playerId}\n                    x={stackData[playerId].posX}\n                    y={50}\n                    color={stackData[playerId].color}\n                    width={STACK_WIDTH}\n                    height={2 * FIELD_SIZE}\n                    title={props.players[playerId].name}\n                />\n            )\n        })\n    }\n\n    const renderFields = (list: PositionAndColor[], idPrefix: string) => {\n        return list.map((field, idx) => {\n            return (\n                <Field\n                    key={idx}\n                    id={`${idPrefix}-${idx}`}\n                    x={field.x}\n                    y={field.y}\n                    color={field.color}\n                    size={FIELD_SIZE}\n                />\n            )\n        })\n    }\n\n    const renderAllFields = () => {\n        return [\n            FOR_ALL_PLAYERS.flatMap((playerId) => {\n                return [\n                    renderFields(\n                        fields[FieldSector.START][playerId],\n                        `start-${playerId}`,\n                    ),\n                    renderFields(\n                        fields[FieldSector.END][playerId],\n                        `end-${playerId}`,\n                    ),\n                ]\n            }),\n            renderFields(fields[FieldSector.LAP], 'fields'),\n        ]\n    }\n\n    const renderTokens = () => {\n        return props.tokens.map(\n            ({ id, sector, fieldId, playerId, color, disabled }) => {\n                const field =\n                    sector === FieldSector.LAP\n                        ? fields[sector][fieldId]\n                        : fields[sector][+playerId][fieldId]\n                return (\n                    <Token\n                        key={id}\n                        id={`token-${id}`}\n                        x={field.x}\n                        y={field.y}\n                        color={getColor(color)}\n                        size={TOKEN_SIZE}\n                        disabled={disabled}\n                        onPress={() => props.onTokenPress(id)}\n                    />\n                )\n            },\n        )\n    }\n\n    return (\n        <Svg\n            height=\"100%\"\n            width=\"100%\"\n            viewBox={`0 0 ${WHOLE_BOARD_WIDTH} ${WHOLE_BOARD_HEIGHT}`}>\n            <Rect\n                x={WHOLE_BOARD_MARGIN / 2}\n                y={WHOLE_BOARD_MARGIN / 2}\n                width={WHOLE_BOARD_WIDTH - WHOLE_BOARD_MARGIN}\n                height={WHOLE_BOARD_HEIGHT - WHOLE_BOARD_MARGIN}\n                stroke=\"gray\"\n                strokeWidth={WHOLE_BOARD_MARGIN}\n                fill=\"white\"\n            />\n            {renderStacks()}\n\n            {/* lines under board fields */}\n            <Rect\n                x={boardX}\n                y={boardY}\n                width={boardWidth}\n                height={boardHeight}\n                stroke=\"black\"\n                strokeWidth=\"2\"\n                fill=\"transparent\"\n            />\n            {FOR_ALL_PLAYERS.map((playerId) => {\n                const lastField =\n                    (definition.startField[playerId] +\n                        definition.fieldsToHome) %\n                    definition.allFields\n                return (\n                    <Line\n                        key={playerId}\n                        x1={fields.board[lastField].x}\n                        y1={fields.board[lastField].y}\n                        x2={fields.end[playerId][0].x}\n                        y2={fields.end[playerId][0].y}\n                        stroke=\"black\"\n                        strokeWidth=\"2\"\n                    />\n                )\n            })}\n            {renderAllFields()}\n            {renderTokens()}\n            <G x={WHOLE_BOARD_WIDTH / 2 - 100} y={WHOLE_BOARD_HEIGHT / 2 - 30}>\n                <Die\n                    value={props.die}\n                    disabled={props.dieDisabled}\n                    onPress={props.onDiePress}\n                />\n            </G>\n        </Svg>\n    )\n}\n","import React from 'react'\nimport { Circle } from 'react-native-svg'\n\ninterface FieldProps {\n    id?: string\n    x: number\n    y: number\n    size: number\n    color: string\n}\n\nexport const Field: React.FC<FieldProps> = (props) => {\n    return (\n        <Circle\n            id={props.id}\n            cx={props.x}\n            cy={props.y}\n            r={props.size / 2}\n            stroke=\"black\"\n            strokeWidth=\"2\"\n            fill={props.color}\n        />\n    )\n}\n","import React from 'react'\nimport { Rect } from 'react-native-svg'\n\ninterface TokenProps {\n    id?: string\n    x: number\n    y: number\n    size: number\n    color: string\n    disabled: boolean\n    onPress?: () => void\n}\n\nexport const Token: React.FC<TokenProps> = ({\n    id,\n    x,\n    y,\n    size,\n    color,\n    disabled,\n    onPress,\n}) => {\n    return (\n        <Rect\n            id={id}\n            x={x - size / 2}\n            y={y - size / 2}\n            width={size}\n            height={size}\n            stroke=\"black\"\n            strokeWidth=\"2\"\n            opacity={disabled ? 0.5 : 1}\n            fill={color}\n            // TODO: onPress vs onClick\n            // https://github.com/react-native-svg/react-native-svg/issues/1483\n            onClick={onPress}\n            onPress={onPress}\n        />\n    )\n}\n","import React from 'react'\nimport { GenericPlayingBoardProps } from '../types'\nimport Classic from './Classic/Classis'\nimport { Board as SmallBoardForTwo } from './SmallBoardForTwo'\nimport { BoardType } from './types'\n\ninterface PlayingBoardOwnProps {\n    boardType: BoardType\n}\n\ntype PlayingBoardProps = PlayingBoardOwnProps & GenericPlayingBoardProps\n\n/**\n * Playing board unification and selection layer\n */\nexport const PlayingBoard: React.FC<PlayingBoardProps> = (props) => {\n    const { boardType, ...boardProps } = props\n\n    switch (boardType) {\n        case BoardType.SMALL_BOARD_FOR_TWO:\n            return <SmallBoardForTwo {...boardProps} />\n\n        case BoardType.CLASSIC:\n            return <Classic {...boardProps} />\n\n        default:\n            console.warn('No such board!')\n            return null\n    }\n}\n","import React from 'react'\nimport type { BoardProps } from 'boardgame.io/react'\n\nimport { State } from './types'\nimport { PlayingBoard } from './boards/PlayingBoard'\nimport { BoardType } from './boards/types'\nimport { rollError } from './moves/roll'\nimport { moveError } from './moves/move'\nimport { selectError } from './moves/select'\n\nconst Board: React.FC<BoardProps<State>> = ({ G, ctx, moves }) => {\n    const players = ctx.playOrder.map((id) => ({\n        id,\n        name: id,\n        place: G.players[id].place,\n        selectable: !selectError(G, ctx, id),\n    }))\n\n    const { move, roll, select } = moves\n    const selectedBoard = BoardType.CLASSIC\n    const tokens = G.tokens.map((t) => ({\n        ...t,\n        error: moveError(G, ctx, t.id),\n    }))\n\n    return (\n        <PlayingBoard\n            boardType={selectedBoard}\n            players={players}\n            currentPlayer={ctx.currentPlayer}\n            die={G.die ?? 6}\n            onTokenPress={move}\n            onDiePress={roll}\n            dieError={rollError(G, ctx)}\n            tokens={tokens}\n            onPlayerSelect={select}\n        />\n    )\n}\n\nexport default Board\n","import { Client as ClientReact } from 'boardgame.io/react'\nimport { Client as ClientReactNative } from 'boardgame.io/react-native'\nimport { Platform } from 'react-native'\n\nexport default Platform.OS === 'web' ? ClientReact : ClientReactNative\n","import { MCTSBot } from 'boardgame.io/ai'\nimport { Ctx } from 'boardgame.io'\n\nimport { State } from '../types'\n\nclass SimpleBot extends MCTSBot {\n    constructor(config, ...args) {\n        super(\n            {\n                ...config,\n                objectives: (_G: State, _ctx: Ctx, playerId: string) => ({\n                    finished1: {\n                        checker: (G: State, _ctx: Ctx) => {\n                            return G.players[playerId].finished === 1\n                        },\n                        weight: 10,\n                    },\n                    finished2: {\n                        checker: (G: State, _ctx: Ctx) => {\n                            return G.players[playerId].finished === 2\n                        },\n                        weight: 20,\n                    },\n                    finished3: {\n                        checker: (G: State, _ctx: Ctx) => {\n                            return G.players[playerId].finished === 3\n                        },\n                        weight: 30,\n                    },\n                    kickPlayer: {\n                        checker: (G: State, _ctx: Ctx) => {\n                            return G.kicked !== null\n                        },\n                        weight: 1,\n                    },\n                }),\n                iterations: 1,\n                playoutDepth: 1,\n            },\n            ...args,\n        )\n    }\n}\n\nexport default SimpleBot\n","import React, { useMemo } from 'react'\nimport { Local } from 'boardgame.io/multiplayer'\n\nimport Game from './Game'\nimport Board from './Board'\nimport client from './helpers/client'\nimport SimpleBot from './bots/simple'\n\ninterface Props {\n    players: number\n    bot1: boolean\n    bot2: boolean\n    bot3: boolean\n    bot4: boolean\n}\n\nconst Client = ({ players, bot1, bot2, bot3, bot4 }: Props) => {\n    const hasBots = bot1 || bot2 || bot3 || bot4\n    const C = useMemo(() => {\n        const bots = {\n            ...(bot1 && { '0': SimpleBot }),\n            ...(bot2 && { '1': SimpleBot }),\n            ...(bot3 && { '2': SimpleBot }),\n            ...(bot4 && { '3': SimpleBot }),\n        }\n        const multiplayer = hasBots\n            ? Local({\n                  bots,\n              })\n            : undefined\n        return client({\n            game: Game,\n            board: Board,\n            debug: {\n                collapseOnLoad: true,\n                hideToggleButton: true,\n            },\n            numPlayers: players,\n            multiplayer,\n        })\n    }, [players, bot1, bot2, bot3, bot4])\n    return <C playerID={hasBots ? '0' : undefined} />\n}\n\nexport default Client\n","import React, { useState } from 'react'\nimport { Box, Button, IconButton, Modal } from 'native-base'\n\nimport { RootStackScreenProps } from '../navigation/types'\nimport Client from '../Client'\n\nconst Play = ({ navigation, route }: RootStackScreenProps<'Play'>) => {\n    const { players, bot1, bot2, bot3, bot4 } = route.params\n    const [showModal, setShowModal] = useState(false)\n    return (\n        <>\n            <Modal isOpen={showModal} onClose={() => setShowModal(false)}>\n                <Modal.Content maxWidth=\"400px\">\n                    <Modal.CloseButton />\n                    <Modal.Header>Do you want to quit the game?</Modal.Header>\n                    <Modal.Footer borderWidth=\"0\">\n                        <Button.Group space={2}>\n                            <Button\n                                variant=\"ghost\"\n                                colorScheme=\"blueGray\"\n                                onPress={() => setShowModal(false)}>\n                                No\n                            </Button>\n                            <Button\n                                colorScheme=\"error\"\n                                onPress={() => navigation.navigate('Settings')}>\n                                Yes\n                            </Button>\n                        </Button.Group>\n                    </Modal.Footer>\n                </Modal.Content>\n            </Modal>\n            <Box\n                safeArea\n                bg=\"lightBlue.200\"\n                flex={1}\n                justifyContent=\"center\"\n                p=\"3\">\n                <Client\n                    players={players}\n                    bot1={bot1}\n                    bot2={bot2}\n                    bot3={bot3}\n                    bot4={bot4}\n                />\n                <Box\n                    safeAreaTop\n                    safeAreaRight\n                    position=\"absolute\"\n                    top=\"0\"\n                    right=\"0\">\n                    <IconButton\n                        color=\"black\"\n                        size=\"lg\"\n                        _icon={{\n                            name: 'close',\n                        }}\n                        onPress={() => setShowModal(true)}\n                    />\n                </Box>\n            </Box>\n        </>\n    )\n}\n\nexport default Play\n","import * as React from 'react'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\n\nimport Settings from './screens/Settings'\nimport Play from './screens/Play'\nimport { RootStackParamList } from './navigation/types'\n\nconst RootStack = createStackNavigator<RootStackParamList>()\n\nconst Navigation = () => (\n    <NavigationContainer>\n        <RootStack.Navigator\n            screenOptions={{\n                headerShown: false,\n            }}>\n            <RootStack.Screen name=\"Settings\" component={Settings} />\n            <RootStack.Screen name=\"Play\" component={Play} />\n        </RootStack.Navigator>\n    </NavigationContainer>\n)\n\nexport default Navigation\n","import React from 'react'\n\nimport Theme from './src/Theme'\nimport Storage from './src/Storage'\nimport Navigation from './src/Navigation'\n\nconst App = () => {\n    return (\n        <Theme>\n            <Storage>\n                <Navigation />\n            </Storage>\n        </Theme>\n    )\n}\n\nexport default App\n"],"sourceRoot":""}