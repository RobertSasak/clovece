{"version":3,"sources":["src/types.ts","src/Theme.tsx","src/Storage.tsx","src/screens/Settings.tsx","src/utils.ts","src/boards/components/Die.tsx","src/boards/Classic/components/Square.tsx","src/boards/Classic/components/Lap.tsx","src/boards/Classic/components/Road.tsx","src/boards/Classic/components/End.tsx","src/boards/Classic/components/Token.tsx","src/boards/Classic/colors.ts","src/boards/Classic/components/Start.tsx","src/boards/components/Badge.tsx","src/boards/Classic/components/Select.tsx","src/boards/Classic/components/PlayerrBox.tsx","src/boards/Classic/Classis.tsx","src/screens/Tutorial.tsx","src/moves/move.ts","src/moves/roll.ts","src/moves/select.ts","src/helpers/enumerate.ts","src/helpers/setup.ts","src/Game.ts","src/helpers/endIf.ts","src/boards/SmallBoardForTwo/definition.ts","src/boards/SmallBoardForTwo/colors.ts","src/boards/SmallBoardForTwo/Stack.tsx","src/boards/types.ts","src/boards/SmallBoardForTwo/Board.tsx","src/boards/SmallBoardForTwo/Field.tsx","src/boards/SmallBoardForTwo/Token.tsx","src/boards/PlayingBoard.tsx","src/Board.tsx","src/helpers/client.ts","src/bots/simple.ts","src/Client.tsx","src/screens/Play.tsx","src/Navigation.tsx","App.tsx"],"names":["Color","FieldSector","config","strictMode","theme","extendTheme","colors","primary","50","100","200","300","400","500","600","700","800","900","components","Icon","defaultProps","as","MaterialCommunityIcons","useSystemColorMode","Theme","children","NativeBaseProvider","Storage","useState","loading","setLoading","useEffect","syncStorage","init","then","Settings","navigation","useStatePersist","type","setType","players","setPlayers","bots","setBots","VStack","flex","alignItems","justifyContent","alignContent","safeArea","bg","borderRadius","sm","maxW","w","minH","base","undefined","m","ScrollView","p","Heading","size","textAlign","my","Button","Group","isAttached","onPress","variant","isDisabled","Text","color","mx","mb","navigate","bot1","bot2","bot3","bot4","stepper","start","walk","stepSize","skipFirst","x","y","split","map","d","oldX","oldY","Error","AnimatedG","Animated","createAnimatedComponent","G","AnimatedCircle","Circle","inputRange","Die","value","disabled","v","useRef","Value","current","v60","interpolate","outputRange","scale","d1","d2","d3","d4","d5","d6","d7","setValue","loop","sequence","timing","toValue","duration","useNativeDriver","roll","useCallback","parallel","onClick","width","height","stroke","strokeWidth","rx","SIZE","ry","fill","cx","cy","r","opacity","Square","Lap","data","i","join","Road","closed","rest","End","AG","ACircle","Token","xy","ValueXY","animation","glow","wiggle","stopAnimation","fillOpacity","getColor","playerColor","light","Red","Green","Blue","Yellow","Start","Badge","place","fontSize","Select","visible","PlayerBox","SQUARE_ZERO","playerBox","START","WIDTH","lap","HEIGHT","exits","end","squares","LAP","END","Classic","die","dieError","currentPlayer","tokens","onDiePress","onTokenPress","onPlayerSelect","useWindowDimensions","maxSize","Math","min","toast","useToast","Box","h","viewBox","preserveAspectRatio","id","key","selectable","Fragment","show","title","sector","fieldId","playerId","error","field","steps","state","text","name","textDecorationLine","Tutorial","route","step","setStep","onNextPressed","length","params","onPreviousPressed","ZStack","shadow","position","bottom","left","HStack","IconButton","icon","flexDir","rightIcon","leftIcon","START_SQUARES","EXIT_SQUARES","moveError","ctx","token","gameover","kicked","moves","finish","exitSquare","rollError","color2FieldId","selectError","_ctx","push","move","args","playOrder","forEach","game","minPlayers","maxPlayers","setup","reduce","prev","red","green","blue","yellow","finished","Array","INVALID_MOVE","random","D6","enumerate","events","endTurn","s","playOrderPos","newFieldId","select","endIf","winner","ai","definition","BoardType","Stack","props","textAnchor","Board","FOR_ALL_PLAYERS","keys","P0","P1","stackData","posX","fields","WHOLE_BOARD_WIDTH","board","renderFields","list","idPrefix","idx","WHOLE_BOARD_MARGIN","WHOLE_BOARD_HEIGHT","lastField","x1","y1","x2","y2","flatMap","dieDisabled","Field","PlayingBoard","boardType","boardProps","SMALL_BOARD_FOR_TWO","CLASSIC","console","warn","selectedBoard","t","Platform","OS","ClientReact","ClientReactNative","SimpleBot","objectives","_G","finished1","checker","weight","finished2","finished3","kickPlayer","iterations","playoutDepth","MCTSBot","Client","hasBots","C","useMemo","multiplayer","Local","client","Game","debug","collapseOnLoad","hideToggleButton","numPlayers","playerID","Play","showModal","setShowModal","Modal","isOpen","onClose","Content","maxWidth","CloseButton","Header","Footer","borderWidth","space","colorScheme","safeAreaTop","safeAreaRight","top","right","_icon","RootStack","createStackNavigator","DefaultTheme","background","Navigation","NavigationContainer","Navigator","screenOptions","headerShown","Screen","component","App"],"mappings":"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","file":"static/js/app.2a933314.chunk.js","sourcesContent":["import type { PlayerID } from 'boardgame.io'\n\nexport enum Color {\n    Red = 'red',\n    Green = 'green',\n    Blue = 'blue',\n    Yellow = 'yellow',\n}\n\nexport interface Token {\n    id: number\n    color: Color\n    playerId: string\n    sector: FieldSector\n    fieldId: number\n}\n\nexport interface TokenUI extends Token {\n    error: string | false\n}\n\nexport type Players = {\n    [key: PlayerID]: {\n        name: string\n        start: {\n            [color in Color]: boolean\n        }\n        end: {\n            [color in Color]: boolean\n        }\n        finish: [boolean, boolean, boolean, boolean]\n        finished: number\n        place: null | number\n    }\n}\n\nexport interface State {\n    size: number\n    tokens: Token[]\n    squares: (number | null)[]\n    die: number\n    moves: number\n    kicked: number | null\n    players: Players\n    finished: number\n}\n\nexport enum FieldSector {\n    START = 'start',\n    LAP = 'lap',\n    END = 'end',\n}\n\nexport interface PlayingBoardDefinition {\n    maxPlayers: number\n    tokensPerPlayer: number\n    allFields: number\n    /** Start field id for each player. */\n    startField: number[]\n    /**\n     * How many fields the player needs to go to reach home.\n     * If first field is 0, the last field is this number.\n     */\n    fieldsToHome: number\n}\n\nexport interface GenericPlayingBoardProps {\n    players: {\n        id: string\n        name: string\n        place: null | number\n        selectable: boolean\n    }[]\n    currentPlayer: string\n    die: number\n    dieError: string | false\n    tokens: TokenUI[]\n    onTokenPress?: (tokenId: number) => void\n    onDiePress?: () => void\n    onPlayerSelect?: (playerId: string) => void\n}\n\nexport interface Point {\n    x: number\n    y: number\n}\n","import React from 'react'\nimport { extendTheme, INativebaseConfig, NativeBaseProvider } from 'native-base'\nimport { MaterialCommunityIcons } from '@native-base/icons'\n\nconst config: INativebaseConfig = {\n    strictMode: 'warn',\n}\n\nconst theme = extendTheme({\n    colors: {\n        primary: {\n            50: '#e6f7fd',\n            100: '#c5e5ec',\n            200: '#a3d3dd',\n            300: '#80c2d1',\n            400: '#5eb1c3',\n            500: '#4797aa',\n            600: '#367584',\n            700: '#26545f',\n            800: '#13333a',\n            900: '#001216',\n        },\n    },\n    components: {\n        Icon: {\n            defaultProps: {\n                as: MaterialCommunityIcons,\n            },\n        },\n    },\n    config: {\n        useSystemColorMode: false,\n    },\n})\n\nconst Theme: React.FC = ({ children }) => (\n    <NativeBaseProvider theme={theme} config={config}>\n        {children}\n    </NativeBaseProvider>\n)\n\nexport default Theme\n","import React, { useEffect, useState } from 'react'\nimport { syncStorage } from 'use-state-persist'\n\nconst Storage: React.FC = ({ children }) => {\n    const [loading, setLoading] = useState(true)\n    useEffect(() => {\n        syncStorage.init().then(() => {\n            setLoading(false)\n        })\n    }, [])\n    return <>{loading ? null : children}</>\n}\n\nexport default Storage\n","import React from 'react'\nimport { Heading, Button, ScrollView, VStack, Text } from 'native-base'\nimport { useStatePersist } from 'use-state-persist'\n\nimport { RootStackScreenProps } from '../navigation/types'\n\nconst Settings = ({ navigation }: RootStackScreenProps<'Settings'>) => {\n    const [type, setType] = useStatePersist('TYPE', 'local')\n    const [players, setPlayers] = useStatePersist('PLAYERS', '2')\n    // const [theme, setTheme] = useStatePersist('THEME', 'classic')\n    // const [player1, setPlayer1] = useStatePersist('PLAYER1', '')\n    // const [player2, setPlayer2] = useStatePersist('PLAYER2', '')\n    // const [player3, setPlayer3] = useStatePersist('PLAYER3', '')\n    // const [player4, setPlayer4] = useStatePersist('PLAYER4', '')\n    // const [bot1, setBot1] = useStatePersist('BOT1', false)\n    // const [bot2, setBot2] = useStatePersist('BOT2', true)\n    // const [bot3, setBot3] = useStatePersist('BOT3', true)\n    // const [bot4, setBot4] = useStatePersist('BOT4', true)\n    const [bots, setBots] = useStatePersist('BOTS', false)\n    return (\n        <VStack\n            flex={1}\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            alignContent={'stretch'}>\n            <VStack\n                safeArea\n                bg=\"white\"\n                borderRadius={{ sm: 20 }}\n                maxW={480}\n                w=\"100%\"\n                minH={{\n                    base: '100%',\n                    sm: undefined,\n                }}\n                m={{ sm: 5 }}>\n                <ScrollView p={5}>\n                    <Heading size=\"4xl\" textAlign=\"center\">\n                        Clovece\n                    </Heading>\n                    <Heading size=\"lg\" my=\"3\">\n                        Game type\n                    </Heading>\n                    <Button.Group isAttached>\n                        <Button\n                            onPress={() => setType('local')}\n                            variant={type === 'local' ? 'solid' : 'outline'}>\n                            Local\n                        </Button>\n                        <Button\n                            onPress={() => setType('online')}\n                            variant={type === 'online' ? 'solid' : 'outline'}\n                            isDisabled>\n                            Online*\n                        </Button>\n                    </Button.Group>\n                    <Heading size=\"lg\" my=\"3\">\n                        Number of players\n                    </Heading>\n                    <Button.Group isAttached>\n                        <Button\n                            onPress={() => setPlayers('2')}\n                            variant={players === '2' ? 'solid' : 'outline'}>\n                            2\n                        </Button>\n                        <Button\n                            onPress={() => setPlayers('3')}\n                            variant={players === '3' ? 'solid' : 'outline'}\n                            isDisabled>\n                            3*\n                        </Button>\n                        <Button\n                            onPress={() => setPlayers('4')}\n                            variant={players === '4' ? 'solid' : 'outline'}>\n                            4\n                        </Button>\n                    </Button.Group>\n                    <Heading size=\"lg\" my=\"3\">\n                        Play with bots\n                    </Heading>\n                    <Button.Group isAttached>\n                        <Button\n                            onPress={() => setBots(true)}\n                            variant={bots ? 'solid' : 'outline'}>\n                            Yes\n                        </Button>\n                        <Button\n                            onPress={() => setBots(false)}\n                            variant={!bots ? 'solid' : 'outline'}>\n                            No\n                        </Button>\n                    </Button.Group>\n                    {/* <Heading size=\"lg\" my=\"3\">\n                        Theme\n                    </Heading>\n                    <Button.Group isAttached>\n                        <Button\n                            onPress={() => setTheme('classic')}\n                            variant={theme === 'classic' ? 'solid' : 'outline'}>\n                            Classic\n                        </Button>\n                        <Button\n                            onPress={() => setTheme('modern')}\n                            variant={theme === 'modern' ? 'solid' : 'outline'}\n                            isDisabled>\n                            Modern*\n                        </Button>\n                    </Button.Group> */}\n                    {/* <Heading size=\"lg\" my=\"3\">\n                        Players\n                    </Heading>\n                    <PlayerInput\n                        value={player1}\n                        placeholder=\"Player 1\"\n                        onChange={setPlayer1}\n                        bot={bot1}\n                        setBot={setBot1}\n                    />\n                    <PlayerInput\n                        visible={+players >= 2}\n                        value={player2}\n                        placeholder=\"Player 2\"\n                        onChange={setPlayer2}\n                        bot={bot2}\n                        setBot={setBot2}\n                    />\n                    <PlayerInput\n                        visible={+players >= 3}\n                        value={player3}\n                        placeholder=\"Player 3\"\n                        onChange={setPlayer3}\n                        bot={bot3}\n                        setBot={setBot3}\n                    />\n                    <PlayerInput\n                        visible={+players >= 4}\n                        value={player4}\n                        placeholder=\"Player 4\"\n                        onChange={setPlayer4}\n                        bot={bot4}\n                        setBot={setBot4}\n                    /> */}\n                    <Text color={'gray.400'}>\n                        *Stay tuned for future version\n                    </Text>\n                </ScrollView>\n                <Button\n                    size=\"lg\"\n                    mx={5}\n                    mb={5}\n                    onPress={() =>\n                        navigation.navigate('Tutorial', {\n                            players: +players,\n                            bot1: false,\n                            bot2: +players > 1 && bots,\n                            bot3: +players > 2 && bots,\n                            bot4: +players > 3 && bots,\n                        })\n                    }>\n                    Start game\n                </Button>\n            </VStack>\n        </VStack>\n    )\n}\n\nexport default Settings\n","import { Point } from './types'\n\nexport const stepper = (\n    start: Point,\n    walk: string,\n    stepSize: number,\n    skipFirst = true,\n) => {\n    let { x, y } = start\n    return walk.split('').map((d) => {\n        const oldX = x\n        const oldY = y\n        if (d === 'U') {\n            y -= stepSize\n        } else if (d === 'D') {\n            y += stepSize\n        } else if (d === 'L') {\n            x -= stepSize\n        } else if (d === 'R') {\n            x += stepSize\n        } else if (d === '↘') {\n            x += stepSize\n            y += stepSize\n        } else if (d === '↖') {\n            x -= stepSize\n            y -= stepSize\n        } else if (d === '↙') {\n            x -= stepSize\n            y += stepSize\n        } else if (d === '↗') {\n            x += stepSize\n            y -= stepSize\n        } else {\n            throw new Error(`Unknown direction \"${d}\"`)\n        }\n        if (skipFirst) {\n            return { x, y }\n        }\n        return { x: oldX, y: oldY }\n    })\n}\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport { Animated } from 'react-native'\nimport { Rect, G, Circle } from 'react-native-svg'\n\ninterface Props {\n    x: number\n    y: number\n    value: number\n    disabled: boolean\n    onPress: () => void\n}\n\nconst SIZE = 100\n\nconst AnimatedG = Animated.createAnimatedComponent(G)\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle)\n\nconst inputRange = [0, 59, 60, 119, 120, 179, 180, 239, 240, 299, 300, 360]\n\nconst Die: React.FC<Props> = ({ x, y, value, disabled, onPress }) => {\n    const v = useRef(new Animated.Value(value)).current\n    const v60 = v.interpolate({ inputRange: [1, 6], outputRange: [0, 360] })\n    const scale = useRef(new Animated.Value(1)).current\n\n    const d1 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],\n    })\n    const d2 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\n    })\n    const d3 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    })\n    const d4 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    })\n    const d5 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\n    })\n    const d6 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],\n    })\n    const d7 = v60.interpolate({\n        inputRange,\n        outputRange: [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],\n    })\n    useEffect(() => {\n        v.setValue(value)\n    }, [value])\n\n    useEffect(() => {\n        if (disabled) {\n            scale.setValue(1)\n        } else {\n            Animated.loop(\n                Animated.sequence([\n                    Animated.timing(scale, {\n                        toValue: 1.1,\n                        duration: 500,\n                        useNativeDriver: false,\n                    }),\n                    Animated.timing(scale, {\n                        toValue: 1,\n                        duration: 500,\n                        useNativeDriver: false,\n                    }),\n                ]),\n            ).start()\n        }\n    }, [disabled, value])\n\n    const roll = useCallback(() => {\n        if (!disabled) {\n            Animated.parallel([\n                Animated.sequence([\n                    Animated.timing(scale, {\n                        toValue: 1.2,\n                        duration: 500,\n                        useNativeDriver: false,\n                    }),\n                    Animated.timing(scale, {\n                        toValue: 1,\n                        duration: 500,\n                        useNativeDriver: false,\n                    }),\n                ]),\n                Animated.sequence([\n                    Animated.timing(v, {\n                        toValue: 6,\n                        duration: 500,\n                        useNativeDriver: true,\n                    }),\n                    Animated.timing(v, {\n                        toValue: 1,\n                        duration: 500,\n                        useNativeDriver: true,\n                    }),\n                ]),\n            ]).start(() => {\n                onPress()\n            })\n        } else {\n            onPress()\n        }\n    }, [disabled])\n\n    return (\n        <G x={x} y={y}>\n            <AnimatedG scale={scale} onPress={roll} onClick={roll}>\n                <Rect\n                    x={-SIZE / 2}\n                    y={-SIZE / 2}\n                    width={SIZE}\n                    height={SIZE}\n                    stroke=\"gray\"\n                    strokeWidth={disabled ? 1 : 2}\n                    rx={SIZE / 10}\n                    ry={SIZE / 10}\n                    fill=\"white\"\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={-30}\n                    cy={-30}\n                    r={12}\n                    opacity={d1}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={0}\n                    cy={-30}\n                    r={12}\n                    opacity={d2}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={30}\n                    cy={-30}\n                    r={12}\n                    opacity={d3}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={-30}\n                    cy={30}\n                    r={12}\n                    opacity={d4}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={0}\n                    cy={30}\n                    r={12}\n                    opacity={d5}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={30}\n                    cy={30}\n                    r={12}\n                    opacity={d6}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={0}\n                    cy={0}\n                    r={12}\n                    opacity={d7}\n                />\n            </AnimatedG>\n        </G>\n    )\n}\n\nexport default Die\n","import React from 'react'\nimport { Circle } from 'react-native-svg'\n\ninterface Props {\n    x: number\n    y: number\n}\nconst Square = ({ x, y }: Props) => {\n    return (\n        <Circle\n            cx={x}\n            cy={y}\n            r={30}\n            fill=\"white\"\n            stroke=\"#333\"\n            strokeWidth={3}\n        />\n    )\n}\n\nexport default Square\n","import React from 'react'\nimport { Path } from 'react-native-svg'\n\nimport { Point } from '../../../types'\nimport Square from './Square'\n\ninterface Props {\n    data: Point[]\n}\n\nconst Lap = ({ data }: Props) => {\n    return (\n        <>\n            <Path\n                d={\n                    data\n                        .map(\n                            ({ x, y }, i) =>\n                                `${i === 0 ? 'M' : 'L'} ${x} ${y} `,\n                        )\n                        .join('') + 'Z'\n                }\n                stroke=\"#333\"\n                strokeWidth=\"30\"\n                fill=\"transparent\"\n            />\n            {data.map(({ x, y }, i) => (\n                <Square x={x} y={y} key={i} />\n            ))}\n        </>\n    )\n}\n\nexport default Lap\n","import React from 'react'\nimport { Path, PathProps } from 'react-native-svg'\nimport { Point } from '../../../types'\n\ninterface LineProps extends PathProps {\n    data: Point[]\n    closed?: boolean\n}\n\nconst Road = ({ data, closed, ...rest }: LineProps) => {\n    return (\n        <Path\n            d={\n                data\n                    .map(({ x, y }, i) => `${i === 0 ? 'M' : 'L'} ${x} ${y} `)\n                    .join('') + (closed ? 'Z' : '')\n            }\n            fill=\"transparent\"\n            stroke=\"#333\"\n            strokeWidth={30}\n            {...rest}\n        />\n    )\n}\n\nexport default Road\n","import React from 'react'\n\nimport { Point } from '../../../types'\nimport Road from './Road'\nimport Square from './Square'\n\ninterface Props {\n    data: Point[]\n}\n\nconst End = ({ data }: Props) => {\n    return (\n        <>\n            <Road data={data} stroke=\"#333\" strokeWidth={30} />\n            {data.map(({ x, y }, i) => (\n                <Square key={i} x={x} y={y} />\n            ))}\n        </>\n    )\n}\n\nexport default End\n","import React, { useEffect, useRef } from 'react'\nimport { Animated } from 'react-native'\nimport { Circle, G, Path } from 'react-native-svg'\n\ninterface TokenProps {\n    x: number\n    y: number\n    size: number\n    color: string\n    disabled: boolean\n    onPress: () => void\n}\n\nconst AG = Animated.createAnimatedComponent(G)\nconst ACircle = Animated.createAnimatedComponent(Circle)\n\nexport const Token: React.FC<TokenProps> = ({\n    x,\n    y,\n    size,\n    color,\n    disabled,\n    onPress,\n}) => {\n    const xy = useRef(new Animated.ValueXY({ x, y })).current\n    const animation = useRef(new Animated.Value(0)).current\n    const glow = animation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 30],\n    })\n    const wiggle = animation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, -10],\n    })\n    useEffect(() => {\n        Animated.timing(xy, {\n            toValue: { x, y },\n            duration: 400,\n            useNativeDriver: false,\n        }).start()\n    }, [x, y])\n    useEffect(() => {\n        if (disabled) {\n            animation.setValue(0)\n            animation.stopAnimation()\n        } else {\n            Animated.loop(\n                Animated.sequence([\n                    Animated.timing(animation, {\n                        toValue: 1,\n                        duration: 500,\n                        useNativeDriver: false,\n                    }),\n                    Animated.timing(animation, {\n                        toValue: 0,\n                        duration: 500,\n                        useNativeDriver: false,\n                    }),\n                ]),\n            ).start()\n        }\n    }, [disabled])\n    return (\n        <AG x={xy.x} y={xy.y} onClick={onPress} onPress={onPress}>\n            <ACircle\n                r={glow}\n                fill={color}\n                fillOpacity={0.2}\n                strokeWidth={disabled ? 2 : 4}\n                opacity={disabled ? 0.7 : 1}\n            />\n            <AG y={wiggle}>\n                <Path\n                    d=\"M10,-20 -10,-20 -15,0 a15,15 0 0,0 30,0 Z\"\n                    stroke=\"black\"\n                    strokeWidth={disabled ? 2 : 4}\n                    opacity={disabled ? 0.7 : 1}\n                    fill={color}\n                />\n                <Circle cy={-size} r={14} fill=\"white\" />\n                <Circle\n                    cy={-size}\n                    r={14}\n                    fill={color}\n                    stroke=\"black\"\n                    strokeWidth={disabled ? 2 : 4}\n                    opacity={disabled ? 0.7 : 1}\n                />\n            </AG>\n        </AG>\n    )\n}\n","import { Color } from '../../types'\n\nexport function getColor(playerColor: Color, light = false) {\n    switch (playerColor) {\n        case Color.Red:\n            return light ? '#ff8080' : '#bf202f'\n\n        case Color.Green:\n            return light ? '#29b376' : '#006f3c'\n\n        case Color.Blue:\n            return light ? '#8080ff' : '#274b96'\n\n        case Color.Yellow:\n            return light ? '#ffff80' : '#faa73e'\n    }\n}\n","import React from 'react'\n\nimport { Point } from '../../../types'\nimport Square from './Square'\n\ninterface Props {\n    data: Point[]\n}\n\nconst Start = ({ data }: Props) => {\n    return (\n        <>\n            {data.map(({ x, y }, i) => (\n                <Square x={x} y={y} key={i} />\n            ))}\n        </>\n    )\n}\n\nexport default Start\n","import React from 'react'\nimport { G, Path, Text } from 'react-native-svg'\n\ninterface Props {\n    x: number\n    y: number\n    place: number\n}\n\nconst Badge = ({ x, y, place = 1 }: Props) => (\n    <G x={x} y={y} scale=\"0.2\">\n        <Path\n            fill=\"#e61c24\"\n            d=\"M513 233c11-10 16-25 12-40s-15-27-28-31c5-14 3-29-6-42a41 41 0 0 0-40-15 42 42 0 0 0-65-31c-8-12-21-21-37-21-17 0-31 10-38 24a42 42 0 0 0-45-4c-14 8-22 21-23 36-15-2-29 4-39 16a41 41 0 0 0-5 41c-14 5-24 17-28 32-3 15 3 30 14 39a42 42 0 0 0 17 71c-5 13-3 30 7 41 9 12 25 17 39 15 1 15 10 28 24 34 14 7 30 5 42-4 7 13 21 21 37 21 15 0 29-9 35-21 13 8 28 9 42 2s23-20 23-35c15 2 29-3 40-15 9-13 11-28 5-42 14-4 25-16 29-31 3-15-1-30-12-40zM349 374a139 139 0 0 1 0-279 139 139 0 1 1 0 279z\"\n        />\n        <Path\n            fill=\"#fbcc03\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n            d=\"M474 234a125 125 0 1 1-250 0 125 125 0 0 1 250 0m-39 173c-8 3-16 5-24 5-7 0-13-1-20-4l-7 7-3 2 36 91 41-58 69 19-40-104c-7 5-16 8-24 9-5 14-15 26-28 33zm-123 2c-7 3-14 5-21 5-8 0-15-2-23-5-14-6-24-19-28-33-6 0-12-1-17-4l-37 96 69-18 41 57 34-85c-7-3-13-7-18-13z\"\n        />\n        <Text x=\"300\" y=\"300\" fontSize=\"200\" fill=\"#e61c24\">\n            {place}\n        </Text>\n    </G>\n)\n\nexport default Badge\n","import React, { useRef, useEffect } from 'react'\nimport { Animated } from 'react-native'\nimport { Circle } from 'react-native-svg'\n\ninterface Props {\n    visible: boolean\n}\n\nconst ACircle = Animated.createAnimatedComponent(Circle)\n\nconst Select = ({ visible }: Props) => {\n    const rx = useRef(new Animated.Value(130)).current\n    useEffect(() => {\n        if (visible) {\n            Animated.loop(\n                Animated.sequence([\n                    Animated.timing(rx, {\n                        toValue: 160,\n                        duration: 300,\n                        useNativeDriver: false,\n                    }),\n                    Animated.timing(rx, {\n                        toValue: 130,\n                        duration: 300,\n                        useNativeDriver: false,\n                    }),\n                ]),\n            ).start()\n        }\n    }, [visible])\n\n    return (\n        <>\n            {visible && (\n                <ACircle\n                    fill=\"yellow\"\n                    stroke=\"#333\"\n                    strokeWidth={visible ? 4 : 0}\n                    r={rx}\n                />\n            )}\n        </>\n    )\n}\n\nexport default Select\n","import React from 'react'\nimport { Rect } from 'react-native-svg'\n\nconst SIZE = 350\n\nconst PlayerBox = () => (\n    <Rect\n        width={SIZE / 2}\n        height={SIZE / 2}\n        x={-SIZE / 4}\n        y={-SIZE / 4}\n        fill=\"#fff242\"\n        stroke=\"#333\"\n        strokeWidth=\"4\"\n        rx=\"30\"\n    />\n)\n\nexport default PlayerBox\n","import React from 'react'\nimport { useWindowDimensions } from 'react-native'\nimport { Box, useToast, VStack } from 'native-base'\nimport Svg, { Rect, G } from 'react-native-svg'\n\nimport { FieldSector, GenericPlayingBoardProps, Point } from '../../types'\nimport { stepper } from '../../utils'\nimport Die from '../components/Die'\nimport Lap from './components/Lap'\nimport End from './components/End'\nimport { Token } from './components/Token'\nimport { getColor } from './colors'\nimport Start from './components/Start'\nimport Road from './components/Road'\nimport Badge from '../components/Badge'\nimport Select from './components/Select'\nimport PlayerBox from './components/PlayerrBox'\n\nconst START = 350\nconst WIDTH = 1000\nconst HEIGHT = 1000\nconst STEP = 90\nconst TOKEN_SIZE = 30\nconst SQUARE_ZERO = {\n    x: -40,\n    y: 500 - STEP,\n}\n\nconst playerBox = stepper(\n    { x: START / 2, y: START / 2 },\n    '↘L↗D',\n    WIDTH - START,\n    false,\n)\n\ninterface Squares {\n    [FieldSector.START]: Point[][]\n    [FieldSector.LAP]: Point[]\n    [FieldSector.END]: Point[][]\n}\n\nconst lap = stepper(\n    SQUARE_ZERO,\n    'RRRRRUUUURRDDDDRRRRDDLLLLDDDDLLUUUULLLLU',\n    STEP,\n)\n\nconst start = [\n    stepper(\n        { x: START / 2 - STEP / 2, y: START / 2 - STEP / 2 },\n        'RDLU',\n        STEP,\n        false,\n    ),\n    stepper(\n        { x: WIDTH - START / 2 - STEP / 2, y: HEIGHT - START / 2 - STEP / 2 },\n        'RDLU',\n        STEP,\n        false,\n    ),\n    stepper(\n        { x: WIDTH - START / 2 - STEP / 2, y: START / 2 - STEP / 2 },\n        'RDLU',\n        STEP,\n        false,\n    ),\n    stepper(\n        { x: START / 2 - STEP / 2, y: HEIGHT - START / 2 - STEP / 2 },\n        'RDLU',\n        STEP,\n        false,\n    ),\n]\n\nconst exits = [39, 19, 9, 29]\n\nconst end = [\n    stepper(lap[39], 'RRRR', STEP),\n    stepper(lap[19], 'LLLL', STEP),\n    stepper(lap[9], 'DDDD', STEP),\n    stepper(lap[29], 'UUUU', STEP),\n]\n\nconst squares: Squares = {\n    [FieldSector.LAP]: lap,\n    [FieldSector.START]: start,\n    [FieldSector.END]: end,\n}\n\nconst Classic = ({\n    die,\n    dieError,\n    players,\n    currentPlayer,\n    tokens,\n    onDiePress = () => undefined,\n    onTokenPress = () => undefined,\n    onPlayerSelect = () => undefined,\n}: GenericPlayingBoardProps) => {\n    const { width, height } = useWindowDimensions()\n    const maxSize = Math.min(width, height)\n    const toast = useToast()\n    return (\n        <VStack alignItems=\"center\">\n            <Box w={maxSize - 10} h={maxSize - 10}>\n                <Svg\n                    height=\"100%\"\n                    width=\"100%\"\n                    viewBox={`0 0 ${WIDTH} ${HEIGHT}`}\n                    preserveAspectRatio=\"xMinYMin slice\">\n                    <Rect width=\"1000\" height=\"1000\" fill=\"#f5d9a1\" />\n                    <Rect\n                        x=\"10\"\n                        y=\"10\"\n                        width=\"980\"\n                        height=\"980\"\n                        strokeWidth=\"3\"\n                        stroke=\"black\"\n                        fill=\"transparent\"\n                    />\n                    <Rect\n                        width=\"1000\"\n                        height=\"1000\"\n                        strokeWidth=\"10\"\n                        stroke=\"#bb3630\"\n                        fill=\"transparent\"\n                    />\n                    {players.map(\n                        (p, i) =>\n                            p.id === currentPlayer && (\n                                <G {...playerBox[i]} key={i}>\n                                    <PlayerBox />\n                                </G>\n                            ),\n                    )}\n                    {players.map((p, i) => (\n                        <G\n                            {...playerBox[i]}\n                            key={i}\n                            onPress={() => onPlayerSelect(p.id)}\n                            onClick={() => onPlayerSelect(p.id)}>\n                            <Select visible={p.selectable} />\n                        </G>\n                    ))}\n                    {players.map((p, i) => (\n                        <React.Fragment key={i}>\n                            <Road\n                                data={[\n                                    squares.lap[exits[i]],\n                                    squares.end[i][0],\n                                ]}\n                            />\n                            <Start data={squares.start[i]} />\n                            <End data={squares.end[i]} />\n                            {p.place && (\n                                <G {...playerBox[i]}>\n                                    <Badge x={50} y={0} place={p.place} />\n                                </G>\n                            )}\n                        </React.Fragment>\n                    ))}\n                    <Lap data={squares.lap} />\n                    <Die\n                        x={WIDTH / 2}\n                        y={HEIGHT / 2}\n                        value={die}\n                        disabled={!!dieError}\n                        onPress={() => {\n                            if (dieError) {\n                                toast.show({ title: dieError })\n                            } else {\n                                onDiePress()\n                            }\n                        }}\n                    />\n                    {tokens.map(\n                        ({ id, sector, fieldId, playerId, color, error }) => {\n                            const field =\n                                sector === FieldSector.LAP\n                                    ? squares[sector][fieldId]\n                                    : squares[sector][+playerId][fieldId]\n                            return (\n                                <Token\n                                    key={id}\n                                    x={field.x}\n                                    y={field.y}\n                                    color={getColor(color)}\n                                    size={TOKEN_SIZE}\n                                    disabled={!!error}\n                                    onPress={() => {\n                                        if (error) {\n                                            toast.show({\n                                                title: error,\n                                            })\n                                        } else {\n                                            onTokenPress(id)\n                                        }\n                                    }}\n                                />\n                            )\n                        },\n                    )}\n                </Svg>\n            </Box>\n        </VStack>\n    )\n}\n\nexport default Classic\n","import { BoardProps } from 'boardgame.io/dist/types/packages/react'\nimport {\n    Box,\n    Button,\n    Heading,\n    HStack,\n    Icon,\n    IconButton,\n    Text,\n    ZStack,\n} from 'native-base'\nimport React, { ReactElement, useCallback, useState } from 'react'\n\nimport { RootStackScreenProps } from '../navigation/types'\nimport Classic from '../boards/Classic/Classis'\nimport { Color, FieldSector, GenericPlayingBoardProps } from '../types'\n\ninterface Step {\n    state: GenericPlayingBoardProps\n    text: ReactElement\n}\n\nconst steps: Step[] = [\n    {\n        state: {\n            die: 3,\n            dieError: 'This is just a tutorial',\n            currentPlayer: '0',\n            tokens: [],\n            players: [],\n        },\n        text: (\n            <>\n                You have may play this game before under various names. This is\n                a slightly improved version. Once you play it you will never\n                wanted to play the original version again.\n            </>\n        ),\n    },\n    {\n        state: {\n            die: 3,\n            dieError: 'This is just a tutorial',\n            currentPlayer: '0',\n            tokens: [\n                {\n                    id: 0,\n                    color: Color.Red,\n                    sector: FieldSector.START,\n                    fieldId: 0,\n                    playerId: '0',\n                    error: false,\n                },\n                {\n                    id: 1,\n                    color: Color.Green,\n                    sector: FieldSector.START,\n                    fieldId: 1,\n                    playerId: '0',\n                    error: false,\n                },\n                {\n                    id: 2,\n                    color: Color.Blue,\n                    sector: FieldSector.START,\n                    fieldId: 2,\n                    playerId: '0',\n                    error: false,\n                },\n                {\n                    id: 3,\n                    color: Color.Yellow,\n                    sector: FieldSector.START,\n                    fieldId: 3,\n                    playerId: '0',\n                    error: false,\n                },\n            ],\n            players: [{ id: '0', name: '', place: null, selectable: false }],\n        },\n        text: (\n            <>\n                You start with 4 tokens of a{' '}\n                <Text textDecorationLine=\"underline\">DIFFERENT</Text> color.\n            </>\n        ),\n    },\n    {\n        state: {\n            die: 6,\n            dieError: 'This is just a tutorial',\n            currentPlayer: '0',\n            tokens: [\n                {\n                    id: 0,\n                    color: Color.Red,\n                    sector: FieldSector.LAP,\n                    fieldId: 0,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 1,\n                    color: Color.Green,\n                    sector: FieldSector.START,\n                    fieldId: 1,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 2,\n                    color: Color.Blue,\n                    sector: FieldSector.START,\n                    fieldId: 2,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 3,\n                    color: Color.Yellow,\n                    sector: FieldSector.START,\n                    fieldId: 3,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n            ],\n            players: [{ id: '0', name: '', place: null, selectable: false }],\n        },\n        text: <>Roll 6 to get your first token on track.</>,\n    },\n    {\n        state: {\n            die: 4,\n            dieError: 'This is just a tutorial',\n            currentPlayer: '0',\n            tokens: [\n                {\n                    id: 0,\n                    color: Color.Red,\n                    sector: FieldSector.LAP,\n                    fieldId: 4,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 1,\n                    color: Color.Green,\n                    sector: FieldSector.START,\n                    fieldId: 1,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 2,\n                    color: Color.Blue,\n                    sector: FieldSector.START,\n                    fieldId: 2,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 3,\n                    color: Color.Yellow,\n                    sector: FieldSector.START,\n                    fieldId: 3,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n            ],\n            players: [{ id: '0', name: '', place: null, selectable: false }],\n        },\n        text: (\n            <>\n                Keeping rolling die and move your token along the track\n                accordingly. So far nothing special.\n            </>\n        ),\n    },\n    {\n        state: {\n            die: 6,\n            dieError: 'This is just a tutorial',\n            currentPlayer: '1',\n            tokens: [\n                {\n                    id: 0,\n                    color: Color.Red,\n                    sector: FieldSector.LAP,\n                    fieldId: 4,\n                    playerId: '0',\n                    error: false,\n                },\n                {\n                    id: 1,\n                    color: Color.Green,\n                    sector: FieldSector.START,\n                    fieldId: 1,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 2,\n                    color: Color.Blue,\n                    sector: FieldSector.START,\n                    fieldId: 2,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 3,\n                    color: Color.Yellow,\n                    sector: FieldSector.START,\n                    fieldId: 3,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 4,\n                    color: Color.Red,\n                    sector: FieldSector.LAP,\n                    fieldId: 20,\n                    playerId: '1',\n                    error: false,\n                },\n                {\n                    id: 5,\n                    color: Color.Green,\n                    sector: FieldSector.START,\n                    fieldId: 1,\n                    playerId: '1',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 6,\n                    color: Color.Blue,\n                    sector: FieldSector.START,\n                    fieldId: 2,\n                    playerId: '1',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 7,\n                    color: Color.Yellow,\n                    sector: FieldSector.START,\n                    fieldId: 3,\n                    playerId: '1',\n                    error: 'You cannot move this token',\n                },\n            ],\n            players: [\n                { id: '0', name: '', place: null, selectable: false },\n                { id: '1', name: '', place: null, selectable: false },\n            ],\n        },\n        text: (\n            <>\n                The fun starts once your opponent also rolls 6 and brings a\n                token of the same red color on track.\n            </>\n        ),\n    },\n    {\n        state: {\n            die: 5,\n            dieError: 'This is just a tutorial',\n            currentPlayer: '1',\n            tokens: [\n                {\n                    id: 0,\n                    color: Color.Red,\n                    sector: FieldSector.LAP,\n                    fieldId: 9,\n                    playerId: '0',\n                    error: false,\n                },\n                {\n                    id: 1,\n                    color: Color.Green,\n                    sector: FieldSector.START,\n                    fieldId: 1,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 2,\n                    color: Color.Blue,\n                    sector: FieldSector.START,\n                    fieldId: 2,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 3,\n                    color: Color.Yellow,\n                    sector: FieldSector.START,\n                    fieldId: 3,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 4,\n                    color: Color.Red,\n                    sector: FieldSector.LAP,\n                    fieldId: 20,\n                    playerId: '1',\n                    error: false,\n                },\n                {\n                    id: 5,\n                    color: Color.Green,\n                    sector: FieldSector.START,\n                    fieldId: 1,\n                    playerId: '1',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 6,\n                    color: Color.Blue,\n                    sector: FieldSector.START,\n                    fieldId: 2,\n                    playerId: '1',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 7,\n                    color: Color.Yellow,\n                    sector: FieldSector.START,\n                    fieldId: 3,\n                    playerId: '1',\n                    error: 'You cannot move this token',\n                },\n            ],\n            players: [\n                { id: '0', name: '', place: null, selectable: false },\n                { id: '1', name: '', place: null, selectable: false },\n            ],\n        },\n        text: (\n            <>\n                Your opponent now may choose to move any red token on track. It\n                is wise to move a token that is closest to the finish.\n            </>\n        ),\n    },\n    {\n        state: {\n            die: 5,\n            dieError: 'This is just a tutorial',\n            currentPlayer: '0',\n            tokens: [\n                {\n                    id: 0,\n                    color: Color.Red,\n                    sector: FieldSector.LAP,\n                    fieldId: 9,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 1,\n                    color: Color.Green,\n                    sector: FieldSector.END,\n                    fieldId: 1,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 2,\n                    color: Color.Blue,\n                    sector: FieldSector.END,\n                    fieldId: 2,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 3,\n                    color: Color.Yellow,\n                    sector: FieldSector.END,\n                    fieldId: 3,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 4,\n                    color: Color.Red,\n                    sector: FieldSector.END,\n                    fieldId: 0,\n                    playerId: '0',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 5,\n                    color: Color.Green,\n                    sector: FieldSector.START,\n                    fieldId: 1,\n                    playerId: '1',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 6,\n                    color: Color.Blue,\n                    sector: FieldSector.START,\n                    fieldId: 2,\n                    playerId: '1',\n                    error: 'You cannot move this token',\n                },\n                {\n                    id: 7,\n                    color: Color.Yellow,\n                    sector: FieldSector.START,\n                    fieldId: 3,\n                    playerId: '1',\n                    error: 'You cannot move this token',\n                },\n            ],\n            players: [\n                { id: '0', name: '', place: 1, selectable: false },\n                { id: '1', name: '', place: null, selectable: false },\n            ],\n        },\n        text: (\n            <>\n                Wins the player who managed to bring 4 tokens of{' '}\n                <Text textDecorationLine=\"underline\">different</Text> color to\n                finish.\n            </>\n        ),\n    },\n]\n\nconst Tutorial = ({ navigation, route }: RootStackScreenProps<'Tutorial'>) => {\n    const [step, setStep] = useState(0)\n    const onNextPressed = useCallback(() => {\n        if (step < steps.length - 1) {\n            setStep(step + 1)\n        } else {\n            navigation.navigate('Play', { ...route.params })\n        }\n    }, [step])\n    const onPreviousPressed = useCallback(() => {\n        setStep(step - 1)\n    }, [step])\n    return (\n        <ZStack justifyContent=\"center\" alignItems=\"center\">\n            <Classic {...steps[step].state} />\n            <Box\n                bg=\"white\"\n                borderRadius={5}\n                shadow={5}\n                w=\"60%\"\n                position=\"absolute\"\n                bottom=\"20px\"\n                left=\"20px\">\n                <HStack\n                    justifyContent=\"space-between\"\n                    alignItems={'flex-start'}>\n                    <Heading p=\"5\" size=\"md\">\n                        How to play?\n                    </Heading>\n                    <IconButton\n                        icon={<Icon name=\"close\" />}\n                        onPress={() =>\n                            navigation.navigate('Play', { ...route.params })\n                        }\n                    />\n                </HStack>\n                <Text mx=\"5\">{steps[step].text}</Text>\n                <HStack\n                    flexDir=\"row-reverse\"\n                    justifyContent={'space-between'}\n                    m=\"5\">\n                    <Button\n                        rightIcon={<Icon name=\"arrow-right\" />}\n                        onPress={onNextPressed}>\n                        {step === steps.length - 1 ? \"Let's play\" : 'Next'}\n                    </Button>\n                    {step > 0 && (\n                        <Button\n                            variant=\"outline\"\n                            leftIcon={<Icon name=\"arrow-left\" />}\n                            onPress={onPreviousPressed}>\n                            Previous\n                        </Button>\n                    )}\n                </HStack>\n            </Box>\n        </ZStack>\n    )\n}\n\nexport default Tutorial\n","import { Ctx, Move } from 'boardgame.io'\nimport { INVALID_MOVE } from 'boardgame.io/core'\n\nimport { SEGMENT_SIZE } from '../constants'\nimport { FieldSector, State } from '../types'\n\nconst START_SQUARES = [0, 2 * SEGMENT_SIZE, 1 * SEGMENT_SIZE, 3 * SEGMENT_SIZE]\nconst EXIT_SQUARES = [\n    4 * SEGMENT_SIZE - 1,\n    2 * SEGMENT_SIZE - 1,\n    1 * SEGMENT_SIZE - 1,\n    3 * SEGMENT_SIZE - 1,\n]\n\nexport const moveError = (G: State, ctx: Ctx, id: number): false | string => {\n    const token = G.tokens[id]\n    if (ctx.gameover) {\n        return 'The game is over.'\n    }\n    if (G.kicked !== null) {\n        return 'Select which player gets kicked out token before continue.'\n    }\n    if (!token) {\n        throw new Error('id is undefined')\n    }\n    if (G.moves !== 6 && token.sector === FieldSector.START) {\n        return 'Throw 6 on dice in order to take token from staring zone.'\n    }\n    if (\n        token.sector === FieldSector.START &&\n        token.playerId !== ctx.currentPlayer\n    ) {\n        return 'You can only select token from your own starting zone.'\n    }\n    if (\n        token.sector === FieldSector.END &&\n        token.playerId !== ctx.currentPlayer\n    ) {\n        return 'You can only move tokens in own endzone.'\n    }\n    if (G.moves === 0) {\n        return 'Throw the die first to determine how many steps you can move.'\n    }\n    if (\n        token.sector !== FieldSector.START &&\n        G.players[ctx.currentPlayer].start[token.color]\n    ) {\n        return 'You need to bring ${token.color} token from staring zone to game so that you can move with any ${token.color} tokens.'\n    }\n    if (\n        token.sector === FieldSector.LAP &&\n        G.players[ctx.currentPlayer].end[token.color]\n    ) {\n        return 'You cannot move this token. Token of this color is already in your endzone.'\n    }\n    if (token.sector === FieldSector.END && token.fieldId + G.moves > 3) {\n        return 'You cannot move this token. There is not enough squares to move.'\n    }\n    if (\n        token.sector === FieldSector.END &&\n        G.players[ctx.currentPlayer].finish[token.fieldId + G.moves]\n    ) {\n        return 'You cannot move this token. You would land on your own token in the finish.'\n    }\n\n    if (token.sector === FieldSector.LAP) {\n        let moves = G.moves\n        let fieldId = token.fieldId\n        const exitSquare = EXIT_SQUARES[+ctx.currentPlayer]\n        while (moves > 0 && fieldId !== exitSquare) {\n            fieldId++\n            moves--\n            if (fieldId === exitSquare) {\n                break\n            }\n        }\n        if (moves > 0) {\n            if (moves > 4) {\n                return 'You cannot move this token. You would land behind finish.'\n            }\n            if (G.players[ctx.currentPlayer].finish[moves - 1]) {\n                return 'You cannot move this token. You would land on your own token in the finish.'\n            }\n        }\n    }\n    return false\n}\n\nexport const move: Move<State> = (G, ctx, id: number) => {\n    if (moveError(G, ctx, id)) {\n        return INVALID_MOVE\n    }\n    const token = G.tokens[id]\n    if (token.sector === FieldSector.START) {\n        token.sector = FieldSector.LAP\n        const s = START_SQUARES[ctx.playOrderPos]\n        if (G.squares[s] !== null) {\n            G.kicked = G.squares[s]\n        }\n        G.moves = 0\n        G.squares[s] = id\n        G.players[ctx.currentPlayer].start[token.color] = false\n        token.fieldId = s\n    } else if (token.sector === FieldSector.END) {\n        G.players[ctx.currentPlayer].finish[token.fieldId] = false\n        token.fieldId += G.moves\n        G.players[ctx.currentPlayer].finish[token.fieldId] = true\n    } else {\n        const exitSquare = EXIT_SQUARES[+ctx.currentPlayer]\n        G.squares[token.fieldId] = null\n        let newFieldId = token.fieldId\n        while (G.moves > 0 && newFieldId !== exitSquare) {\n            G.moves--\n            newFieldId = (newFieldId + 1) % G.size\n            if (newFieldId === exitSquare) {\n                break\n            }\n        }\n        if (G.moves > 0) {\n            token.sector = FieldSector.END\n            token.fieldId = G.moves - 1\n            token.playerId = ctx.currentPlayer\n            G.players[ctx.currentPlayer].finish[token.fieldId] = true\n            G.players[ctx.currentPlayer].end[token.color] = true\n            G.players[ctx.currentPlayer].finished++\n            if (G.players[ctx.currentPlayer].finished === 4) {\n                G.finished++\n                G.players[ctx.currentPlayer].place = G.finished\n            }\n        } else {\n            token.fieldId = newFieldId\n            if (G.squares[newFieldId] !== null) {\n                G.kicked = G.squares[newFieldId]\n            }\n            G.squares[newFieldId] = token.id\n        }\n    }\n    G.moves = 0\n    if (G.die !== 6 && G.kicked === null) {\n        ctx.events?.endTurn()\n    }\n}\n","import { Ctx, Move } from 'boardgame.io'\nimport { INVALID_MOVE } from 'boardgame.io/core'\n\nimport enumerate from '../helpers/enumerate'\nimport { State } from '../types'\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const rollError = (G: State, ctx: Ctx): false | string => {\n    if (G.moves !== 0) {\n        return 'Finish your move before before rolling die.'\n    }\n    if (G.kicked !== null) {\n        return 'Select which player gets kicked out token before rolling die again.'\n    }\n    if (ctx.gameover) {\n        return 'The game is over.'\n    }\n    return false\n}\n\nexport const roll: Move<State> = (G, ctx) => {\n    if (rollError(G, ctx)) {\n        return INVALID_MOVE\n    }\n    if (!ctx.random) {\n        throw new Error('Random is undefined')\n    }\n    G.die = ctx.random.D6()\n    G.moves = G.die\n    if (enumerate(G, ctx).length == 0) {\n        G.moves = 0\n        ctx.events?.endTurn()\n    }\n}\n","import { Ctx, Move } from 'boardgame.io'\nimport { INVALID_MOVE } from 'boardgame.io/core'\n\nimport { Color, FieldSector, State } from '../types'\n\nconst color2FieldId = {\n    [Color.Red]: 0,\n    [Color.Green]: 1,\n    [Color.Blue]: 2,\n    [Color.Yellow]: 3,\n}\n\nexport const selectError = (\n    G: State,\n    _ctx: Ctx,\n    playerId: string,\n): false | string => {\n    if (playerId === undefined) {\n        throw new Error('PlayerId is undefined')\n    }\n    if (G.kicked === null) {\n        return 'Nothing to select. Token need to be kicked out first.'\n    }\n    const token = G.tokens[G.kicked]\n    if (G.players[playerId].start[token.color]) {\n        return `Player ${playerId} already has token of ${token.color} color in their start.`\n    }\n    if (G.players[playerId].end[token.color]) {\n        return `Player ${playerId} already has token of ${token.color} color in their finish.`\n    }\n    return false\n}\n\nexport const select: Move<State> = (G, ctx, playerId: string) => {\n    if (selectError(G, ctx, playerId)) {\n        return INVALID_MOVE\n    }\n    if (G.kicked === null) {\n        return INVALID_MOVE\n    }\n    const token = G.tokens[G.kicked]\n    token.sector = FieldSector.START\n    token.playerId = playerId\n    token.fieldId = color2FieldId[token.color]\n    G.players[playerId].start[token.color] = true\n    G.kicked = null\n    if (G.die !== 6) {\n        ctx.events?.endTurn()\n    }\n}\n","import { Ctx } from 'boardgame.io'\n\nimport { moveError } from '../moves/move'\nimport { rollError } from '../moves/roll'\nimport { selectError } from '../moves/select'\nimport { State } from '../types'\n\nexport default (G: State, ctx: Ctx) => {\n    const moves = []\n    if (!rollError(G, ctx)) {\n        moves.push({ move: 'roll', args: [] })\n    }\n    for (let i = 0; i < G.tokens.length; i++) {\n        if (!moveError(G, ctx, i)) {\n            moves.push({ move: 'move', args: [i] })\n        }\n    }\n    ctx.playOrder.forEach((p) => {\n        if (!selectError(G, ctx, p)) {\n            moves.push({ move: 'select', args: [p] })\n        }\n    })\n    return moves\n}\n","import { Ctx } from 'boardgame.io'\n\nimport { SEGMENT_SIZE } from '../constants'\nimport { Token, Color, FieldSector, Players } from '../types'\n\nexport default (ctx: Ctx) => {\n    const tokens: Token[] = ctx.playOrder.reduce<Token[]>(\n        (prev, p, i) => [\n            ...prev,\n            {\n                id: i * 4,\n                color: Color.Red,\n                playerId: p,\n                sector: FieldSector.START,\n                fieldId: 0,\n            },\n            {\n                id: i * 4 + 1,\n                color: Color.Green,\n                playerId: p,\n                sector: FieldSector.START,\n                fieldId: 1,\n            },\n            {\n                id: i * 4 + 2,\n                color: Color.Blue,\n                playerId: p,\n                sector: FieldSector.START,\n                fieldId: 2,\n            },\n            {\n                id: i * 4 + 3,\n                color: Color.Yellow,\n                playerId: p,\n                sector: FieldSector.START,\n                fieldId: 3,\n            },\n        ],\n        [],\n    )\n    const size = 4 * SEGMENT_SIZE\n    const players: Players = ctx.playOrder.reduce(\n        (p, v) => ({\n            ...p,\n            [v]: {\n                name: '',\n                start: {\n                    red: true,\n                    green: true,\n                    blue: true,\n                    yellow: true,\n                },\n                end: {\n                    red: false,\n                    green: false,\n                    blue: false,\n                    yellow: false,\n                },\n                finish: [false, false, false, false],\n                finished: 0,\n                place: null,\n            },\n        }),\n        {},\n    )\n\n    return {\n        size,\n        tokens,\n        squares: new Array(size).fill(null),\n        kicked: null,\n        die: 6,\n        moves: 0,\n        players,\n        finished: 0,\n    }\n}\n","import type { Game } from 'boardgame.io'\n\nimport enumerate from './helpers/enumerate'\nimport endIf from './helpers/endIf'\nimport setup from './helpers/setup'\nimport { move } from './moves/move'\nimport { roll } from './moves/roll'\nimport { select } from './moves/select'\nimport { State } from './types'\n\nconst game: Game<State> = {\n    name: 'Clovece',\n    // seed: 0,\n    minPlayers: 2,\n    maxPlayers: 4,\n    setup,\n    moves: {\n        roll,\n        move,\n        select,\n    },\n    endIf,\n    ai: {\n        enumerate,\n    },\n}\n\nexport default game\n","import { Ctx } from 'boardgame.io'\n\nimport { State } from '../types'\n\nexport default (G: State, ctx: Ctx) => {\n    for (let i = 0; i < ctx.playOrder.length; i++) {\n        if (G.players[ctx.playOrder[i]].finished === 4) {\n            return { winner: ctx.playOrder[i] }\n        }\n    }\n}\n","import { PlayingBoardDefinition } from '../../types'\n\nexport const definition: PlayingBoardDefinition = {\n    maxPlayers: 2,\n    tokensPerPlayer: 4,\n    allFields: 12,\n    startField: [\n        0, // player 0\n        6, // player 1\n    ],\n    fieldsToHome: 9,\n}\n","import { Color } from '../../types'\n\nexport function getColor(playerColor: Color, light = false) {\n    switch (playerColor) {\n        case Color.Red:\n            return light ? '#ff8080' : '#bf202f'\n\n        case Color.Green:\n            return light ? '#29b376' : '#006f3c'\n\n        case Color.Blue:\n            return light ? '#8080ff' : '#274b96'\n\n        case Color.Yellow:\n            return light ? '#ffff80' : '#faa73e'\n    }\n}\n","import React from 'react'\nimport { G, Rect, Text } from 'react-native-svg'\n\ninterface StackProps {\n    x: number\n    y: number\n    width: number\n    height: number\n    title: string\n    color: string\n}\n\nexport const Stack: React.FC<StackProps> = (props) => {\n    return (\n        <G>\n            <Rect\n                x={props.x - props.width / 2}\n                y={props.y}\n                width={props.width}\n                height={props.height}\n                stroke=\"black\"\n                strokeWidth=\"2\"\n                fill={props.color}\n            />\n            <Text\n                x={props.x}\n                y={props.y + 40}\n                textAnchor=\"middle\"\n                stroke=\"black\"\n                fill=\"black\"\n                fontSize=\"40\"\n            >\n                {props.title}\n            </Text>\n        </G>\n    )\n}\n","export enum BoardType {\n    SMALL_BOARD_FOR_TWO,\n    CLASSIC,\n}\n","import React from 'react'\nimport Svg, { Line, Rect, G } from 'react-native-svg'\nimport { Field, definition, Token } from '.'\nimport { FieldSector, GenericPlayingBoardProps } from '../../types'\nimport Die from '../components/Die'\nimport { getColor } from './colors'\nimport { Stack } from './Stack'\n\nconst WHOLE_BOARD_WIDTH = 1000\nconst WHOLE_BOARD_HEIGHT = 1000\nconst WHOLE_BOARD_MARGIN = 20\n\nconst STACK_WIDTH = (WHOLE_BOARD_WIDTH - 2 * WHOLE_BOARD_MARGIN) / 2 - 40\nconst FIELD_SIZE = 80\nconst TOKEN_SIZE = 40\n\ninterface PositionAndColor {\n    x: number\n    y: number\n    color: string\n}\n\ninterface Fields {\n    [FieldSector.START]: PositionAndColor[][]\n    [FieldSector.LAP]: PositionAndColor[]\n    [FieldSector.END]: PositionAndColor[][]\n}\n\nexport const Board: React.FC<GenericPlayingBoardProps> = (props) => {\n    const fieldSpace = 0.5 * FIELD_SIZE\n    const boardWidth = 3 * (FIELD_SIZE + fieldSpace)\n    const boardHeight = boardWidth\n    const boardX = WHOLE_BOARD_WIDTH / 2 - boardWidth / 2\n    const boardY = 400\n\n    // helper array with all player ids\n    const FOR_ALL_PLAYERS = [...Array(definition.maxPlayers).keys()]\n    const [P0, P1] = FOR_ALL_PLAYERS\n\n    const stackData = [\n        { posX: 260, color: getColor(props.players[P0].color) },\n        { posX: 740, color: getColor(props.players[P1].color) },\n    ]\n\n    const fields: Fields = {\n        start: [\n            // player 0\n            [\n                { x: 40 + 1 * 55, y: 150, color: 'white' },\n                { x: 40 + 3 * 55, y: 150, color: 'white' },\n                { x: 40 + 5 * 55, y: 150, color: 'white' },\n                { x: 40 + 7 * 55, y: 150, color: 'white' },\n            ],\n            // player 1\n            [\n                { x: 520 + 1 * 55, y: 150, color: 'white' },\n                { x: 520 + 3 * 55, y: 150, color: 'white' },\n                { x: 520 + 5 * 55, y: 150, color: 'white' },\n                { x: 520 + 7 * 55, y: 150, color: 'white' },\n            ],\n        ],\n        end: FOR_ALL_PLAYERS.map((playerId) => {\n            return new Array(definition.tokensPerPlayer).fill(null).map(() => {\n                return {\n                    x: boardX,\n                    y: boardY,\n                    color: getColor(props.players[playerId].color),\n                }\n            })\n        }),\n        board: new Array(definition.allFields).fill(null).map(() => {\n            return { x: boardX, y: boardY, color: 'white' }\n        }),\n    }\n\n    // calculate home field positions\n    for (let i = 0; i < definition.tokensPerPlayer; i++) {\n        // player 0\n        fields.end[P0][i].x -= 1 * (fieldSpace + FIELD_SIZE)\n        fields.end[P0][i].y += (3 - i) * (fieldSpace + FIELD_SIZE)\n        // player 1\n        fields.end[P1][i].x += 4 * (fieldSpace + FIELD_SIZE)\n        fields.end[P1][i].y += i * (fieldSpace + FIELD_SIZE)\n    }\n\n    // update start field colors\n    FOR_ALL_PLAYERS.map((playerId) => {\n        fields.board[definition.startField[playerId]].color = getColor(\n            props.players[playerId].color,\n            true,\n        )\n    })\n\n    // calculate board field positions\n    for (let i = 1; i < 4; i++) {\n        // top row\n        fields.board[i].x += i * (fieldSpace + FIELD_SIZE)\n        // right row\n        fields.board[i + 3].x += 3 * (fieldSpace + FIELD_SIZE)\n        fields.board[i + 3].y += i * (fieldSpace + FIELD_SIZE)\n        // bottom row\n        fields.board[i + 6].x += (3 - i) * (fieldSpace + FIELD_SIZE)\n        fields.board[i + 6].y += 3 * (fieldSpace + FIELD_SIZE)\n        // left row\n        fields.board[(i + 9) % definition.allFields].y +=\n            (3 - i) * (fieldSpace + FIELD_SIZE)\n    }\n\n    const renderStacks = () => {\n        return FOR_ALL_PLAYERS.map((playerId) => {\n            return (\n                <Stack\n                    key={playerId}\n                    x={stackData[playerId].posX}\n                    y={50}\n                    color={stackData[playerId].color}\n                    width={STACK_WIDTH}\n                    height={2 * FIELD_SIZE}\n                    title={props.players[playerId].name}\n                />\n            )\n        })\n    }\n\n    const renderFields = (list: PositionAndColor[], idPrefix: string) => {\n        return list.map((field, idx) => {\n            return (\n                <Field\n                    key={idx}\n                    id={`${idPrefix}-${idx}`}\n                    x={field.x}\n                    y={field.y}\n                    color={field.color}\n                    size={FIELD_SIZE}\n                />\n            )\n        })\n    }\n\n    const renderAllFields = () => {\n        return [\n            FOR_ALL_PLAYERS.flatMap((playerId) => {\n                return [\n                    renderFields(\n                        fields[FieldSector.START][playerId],\n                        `start-${playerId}`,\n                    ),\n                    renderFields(\n                        fields[FieldSector.END][playerId],\n                        `end-${playerId}`,\n                    ),\n                ]\n            }),\n            renderFields(fields[FieldSector.LAP], 'fields'),\n        ]\n    }\n\n    const renderTokens = () => {\n        return props.tokens.map(\n            ({ id, sector, fieldId, playerId, color, disabled }) => {\n                const field =\n                    sector === FieldSector.LAP\n                        ? fields[sector][fieldId]\n                        : fields[sector][+playerId][fieldId]\n                return (\n                    <Token\n                        key={id}\n                        id={`token-${id}`}\n                        x={field.x}\n                        y={field.y}\n                        color={getColor(color)}\n                        size={TOKEN_SIZE}\n                        disabled={disabled}\n                        onPress={() => props.onTokenPress(id)}\n                    />\n                )\n            },\n        )\n    }\n\n    return (\n        <Svg\n            height=\"100%\"\n            width=\"100%\"\n            viewBox={`0 0 ${WHOLE_BOARD_WIDTH} ${WHOLE_BOARD_HEIGHT}`}>\n            <Rect\n                x={WHOLE_BOARD_MARGIN / 2}\n                y={WHOLE_BOARD_MARGIN / 2}\n                width={WHOLE_BOARD_WIDTH - WHOLE_BOARD_MARGIN}\n                height={WHOLE_BOARD_HEIGHT - WHOLE_BOARD_MARGIN}\n                stroke=\"gray\"\n                strokeWidth={WHOLE_BOARD_MARGIN}\n                fill=\"white\"\n            />\n            {renderStacks()}\n\n            {/* lines under board fields */}\n            <Rect\n                x={boardX}\n                y={boardY}\n                width={boardWidth}\n                height={boardHeight}\n                stroke=\"black\"\n                strokeWidth=\"2\"\n                fill=\"transparent\"\n            />\n            {FOR_ALL_PLAYERS.map((playerId) => {\n                const lastField =\n                    (definition.startField[playerId] +\n                        definition.fieldsToHome) %\n                    definition.allFields\n                return (\n                    <Line\n                        key={playerId}\n                        x1={fields.board[lastField].x}\n                        y1={fields.board[lastField].y}\n                        x2={fields.end[playerId][0].x}\n                        y2={fields.end[playerId][0].y}\n                        stroke=\"black\"\n                        strokeWidth=\"2\"\n                    />\n                )\n            })}\n            {renderAllFields()}\n            {renderTokens()}\n            <G x={WHOLE_BOARD_WIDTH / 2 - 100} y={WHOLE_BOARD_HEIGHT / 2 - 30}>\n                <Die\n                    value={props.die}\n                    disabled={props.dieDisabled}\n                    onPress={props.onDiePress}\n                />\n            </G>\n        </Svg>\n    )\n}\n","import React from 'react'\nimport { Circle } from 'react-native-svg'\n\ninterface FieldProps {\n    id?: string\n    x: number\n    y: number\n    size: number\n    color: string\n}\n\nexport const Field: React.FC<FieldProps> = (props) => {\n    return (\n        <Circle\n            id={props.id}\n            cx={props.x}\n            cy={props.y}\n            r={props.size / 2}\n            stroke=\"black\"\n            strokeWidth=\"2\"\n            fill={props.color}\n        />\n    )\n}\n","import React from 'react'\nimport { Rect } from 'react-native-svg'\n\ninterface TokenProps {\n    id?: string\n    x: number\n    y: number\n    size: number\n    color: string\n    disabled: boolean\n    onPress?: () => void\n}\n\nexport const Token: React.FC<TokenProps> = ({\n    id,\n    x,\n    y,\n    size,\n    color,\n    disabled,\n    onPress,\n}) => {\n    return (\n        <Rect\n            id={id}\n            x={x - size / 2}\n            y={y - size / 2}\n            width={size}\n            height={size}\n            stroke=\"black\"\n            strokeWidth=\"2\"\n            opacity={disabled ? 0.5 : 1}\n            fill={color}\n            // TODO: onPress vs onClick\n            // https://github.com/react-native-svg/react-native-svg/issues/1483\n            onClick={onPress}\n            onPress={onPress}\n        />\n    )\n}\n","import React from 'react'\nimport { GenericPlayingBoardProps } from '../types'\nimport Classic from './Classic/Classis'\nimport { Board as SmallBoardForTwo } from './SmallBoardForTwo'\nimport { BoardType } from './types'\n\ninterface PlayingBoardOwnProps {\n    boardType: BoardType\n}\n\ntype PlayingBoardProps = PlayingBoardOwnProps & GenericPlayingBoardProps\n\n/**\n * Playing board unification and selection layer\n */\nexport const PlayingBoard: React.FC<PlayingBoardProps> = (props) => {\n    const { boardType, ...boardProps } = props\n\n    switch (boardType) {\n        case BoardType.SMALL_BOARD_FOR_TWO:\n            return <SmallBoardForTwo {...boardProps} />\n\n        case BoardType.CLASSIC:\n            return <Classic {...boardProps} />\n\n        default:\n            console.warn('No such board!')\n            return null\n    }\n}\n","import React from 'react'\nimport type { BoardProps } from 'boardgame.io/react'\n\nimport { State } from './types'\nimport { PlayingBoard } from './boards/PlayingBoard'\nimport { BoardType } from './boards/types'\nimport { rollError } from './moves/roll'\nimport { moveError } from './moves/move'\nimport { selectError } from './moves/select'\n\nconst Board: React.FC<BoardProps<State>> = ({ G, ctx, moves }) => {\n    const players = ctx.playOrder.map((id) => ({\n        id,\n        name: id,\n        place: G.players[id].place,\n        selectable: !selectError(G, ctx, id),\n    }))\n\n    const { move, roll, select } = moves\n    const selectedBoard = BoardType.CLASSIC\n    const tokens = G.tokens.map((t) => ({\n        ...t,\n        error: moveError(G, ctx, t.id),\n    }))\n\n    return (\n        <PlayingBoard\n            boardType={selectedBoard}\n            players={players}\n            currentPlayer={ctx.currentPlayer}\n            die={G.die}\n            onTokenPress={move}\n            onDiePress={roll}\n            dieError={rollError(G, ctx)}\n            tokens={tokens}\n            onPlayerSelect={select}\n        />\n    )\n}\n\nexport default Board\n","import { Client as ClientReact } from 'boardgame.io/react'\nimport { Client as ClientReactNative } from 'boardgame.io/react-native'\nimport { Platform } from 'react-native'\n\nexport default Platform.OS === 'web' ? ClientReact : ClientReactNative\n","import { MCTSBot } from 'boardgame.io/ai'\nimport { Ctx } from 'boardgame.io'\n\nimport { State } from '../types'\n\nclass SimpleBot extends MCTSBot {\n    constructor(config, ...args) {\n        super(\n            {\n                ...config,\n                objectives: (_G: State, _ctx: Ctx, playerId: string) => ({\n                    finished1: {\n                        checker: (G: State, _ctx: Ctx) => {\n                            return G.players[playerId].finished === 1\n                        },\n                        weight: 10,\n                    },\n                    finished2: {\n                        checker: (G: State, _ctx: Ctx) => {\n                            return G.players[playerId].finished === 2\n                        },\n                        weight: 20,\n                    },\n                    finished3: {\n                        checker: (G: State, _ctx: Ctx) => {\n                            return G.players[playerId].finished === 3\n                        },\n                        weight: 30,\n                    },\n                    kickPlayer: {\n                        checker: (G: State, _ctx: Ctx) => {\n                            return G.kicked !== null\n                        },\n                        weight: 1,\n                    },\n                }),\n                iterations: 1,\n                playoutDepth: 1,\n            },\n            ...args,\n        )\n    }\n}\n\nexport default SimpleBot\n","import React, { useMemo } from 'react'\nimport { Local } from 'boardgame.io/multiplayer'\n\nimport Game from './Game'\nimport Board from './Board'\nimport client from './helpers/client'\nimport SimpleBot from './bots/simple'\n\ninterface Props {\n    players: number\n    bot1: boolean\n    bot2: boolean\n    bot3: boolean\n    bot4: boolean\n}\n\nconst Client = ({ players, bot1, bot2, bot3, bot4 }: Props) => {\n    const hasBots = bot1 || bot2 || bot3 || bot4\n    const C = useMemo(() => {\n        const bots = {\n            ...(bot1 && { '0': SimpleBot }),\n            ...(bot2 && { '1': SimpleBot }),\n            ...(bot3 && { '2': SimpleBot }),\n            ...(bot4 && { '3': SimpleBot }),\n        }\n        const multiplayer = hasBots\n            ? Local({\n                  bots,\n              })\n            : undefined\n        return client({\n            game: Game,\n            board: Board,\n            debug: {\n                collapseOnLoad: true,\n                hideToggleButton: true,\n            },\n            numPlayers: players,\n            multiplayer,\n        })\n    }, [players, bot1, bot2, bot3, bot4])\n    return <C playerID={hasBots ? '0' : undefined} />\n}\n\nexport default Client\n","import React, { useState } from 'react'\nimport { Box, Button, IconButton, Modal } from 'native-base'\n\nimport { RootStackScreenProps } from '../navigation/types'\nimport Client from '../Client'\n\nconst Play = ({ navigation, route }: RootStackScreenProps<'Play'>) => {\n    const { players, bot1, bot2, bot3, bot4 } = route.params\n    const [showModal, setShowModal] = useState(false)\n    return (\n        <>\n            <Modal isOpen={showModal} onClose={() => setShowModal(false)}>\n                <Modal.Content maxWidth=\"400px\">\n                    <Modal.CloseButton />\n                    <Modal.Header>Do you want to quit the game?</Modal.Header>\n                    <Modal.Footer borderWidth=\"0\">\n                        <Button.Group space={2}>\n                            <Button\n                                variant=\"ghost\"\n                                colorScheme=\"blueGray\"\n                                onPress={() => setShowModal(false)}>\n                                No\n                            </Button>\n                            <Button\n                                colorScheme=\"error\"\n                                onPress={() => navigation.navigate('Settings')}>\n                                Yes\n                            </Button>\n                        </Button.Group>\n                    </Modal.Footer>\n                </Modal.Content>\n            </Modal>\n            <Box safeArea flex={1} justifyContent=\"center\" p=\"3\">\n                <Client\n                    players={players}\n                    bot1={bot1}\n                    bot2={bot2}\n                    bot3={bot3}\n                    bot4={bot4}\n                />\n                <Box\n                    safeAreaTop\n                    safeAreaRight\n                    position=\"absolute\"\n                    top=\"0\"\n                    right=\"0\">\n                    <IconButton\n                        color=\"black\"\n                        size=\"lg\"\n                        _icon={{\n                            name: 'close',\n                        }}\n                        onPress={() => setShowModal(true)}\n                    />\n                </Box>\n            </Box>\n        </>\n    )\n}\n\nexport default Play\n","import * as React from 'react'\nimport { DefaultTheme, NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\n\nimport Settings from './screens/Settings'\nimport Tutorial from './screens/Tutorial'\nimport Play from './screens/Play'\nimport { RootStackParamList } from './navigation/types'\n\nconst RootStack = createStackNavigator<RootStackParamList>()\n\nconst theme = {\n    ...DefaultTheme,\n    colors: {\n        ...DefaultTheme.colors,\n        background: '#bae6fd',\n    },\n}\n\nconst Navigation = () => (\n    <NavigationContainer theme={theme}>\n        <RootStack.Navigator\n            screenOptions={{\n                headerShown: false,\n            }}>\n            <RootStack.Screen name=\"Settings\" component={Settings} />\n            <RootStack.Screen name=\"Tutorial\" component={Tutorial} />\n            <RootStack.Screen name=\"Play\" component={Play} />\n        </RootStack.Navigator>\n    </NavigationContainer>\n)\n\nexport default Navigation\n","import React from 'react'\n\nimport Theme from './src/Theme'\nimport Storage from './src/Storage'\nimport Navigation from './src/Navigation'\n\nconst App = () => {\n    return (\n        <Theme>\n            <Storage>\n                <Navigation />\n            </Storage>\n        </Theme>\n    )\n}\n\nexport default App\n"],"sourceRoot":""}