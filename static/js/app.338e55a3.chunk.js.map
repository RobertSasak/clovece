{"version":3,"sources":["src/types.ts","src/Theme.tsx","src/Storage.tsx","src/components/PlayerInput.tsx","src/screens/Settings.tsx","src/moves/move.ts","src/moves/roll.ts","src/moves/select.ts","src/helpers/enumerate.ts","src/helpers/setup.ts","src/Game.ts","src/helpers/endIf.ts","src/utils.ts","src/boards/components/Die.tsx","src/boards/Classic/components/Square.tsx","src/boards/Classic/components/Lap.tsx","src/boards/Classic/components/Road.tsx","src/boards/Classic/components/End.tsx","src/boards/Classic/components/Token.tsx","src/boards/Classic/colors.ts","src/boards/Classic/components/Start.tsx","src/boards/Classic/Classis.tsx","src/boards/SmallBoardForTwo/definition.ts","src/boards/SmallBoardForTwo/colors.ts","src/boards/SmallBoardForTwo/Stack.tsx","src/boards/types.ts","src/boards/SmallBoardForTwo/Board.tsx","src/boards/SmallBoardForTwo/Field.tsx","src/boards/SmallBoardForTwo/Token.tsx","src/boards/PlayingBoard.tsx","src/Board.tsx","src/helpers/client.ts","src/bots/simple.ts","src/Client.tsx","src/screens/Play.tsx","src/Navigation.tsx","App.tsx"],"names":["Color","FieldSector","config","strictMode","theme","extendTheme","colors","primary","50","100","200","300","400","500","600","700","800","900","components","Icon","defaultProps","as","MaterialCommunityIcons","useSystemColorMode","Theme","children","NativeBaseProvider","Storage","useState","loading","setLoading","useEffect","syncStorage","init","then","PlayerInput","visible","value","placeholder","onChange","bot","setBot","PresenceTransition","initial","opacity","animate","transition","duration","HStack","alignItems","Input","flex","onChangeText","Checkbox","isChecked","m","Settings","navigation","useStatePersist","type","setType","players","setPlayers","setTheme","player1","setPlayer1","player2","setPlayer2","player3","setPlayer3","player4","setPlayer4","bot1","setBot1","bot2","setBot2","bot3","setBot3","bot4","setBot4","VStack","bg","justifyContent","alignContent","safeArea","borderRadius","sm","maxW","w","ScrollView","h","p","Heading","size","textAlign","my","Button","Group","isAttached","onPress","variant","isDisabled","Text","color","mx","mb","navigate","START_SQUARES","EXIT_SQUARES","moveError","G","ctx","id","token","tokens","kicked","Error","moves","sector","START","playerId","currentPlayer","END","start","LAP","end","fieldId","finish","exitSquare","rollError","_ctx","color2FieldId","Red","Green","Blue","Yellow","selectError","undefined","push","move","args","i","length","playOrder","forEach","game","name","seed","minPlayers","maxPlayers","setup","reduce","prev","v","red","green","blue","yellow","finished","squares","Array","fill","die","roll","INVALID_MOVE","random","D6","enumerate","events","endTurn","s","playOrderPos","newFieldId","select","endIf","winner","ai","stepper","walk","stepSize","skipFirst","x","y","split","map","d","oldX","oldY","AnimatedG","Animated","createAnimatedComponent","AnimatedCircle","Circle","inputRange","Die","disabled","useRef","Value","current","v60","interpolate","outputRange","scale","d1","d2","d3","d4","d5","d6","d7","setValue","useCallback","parallel","sequence","timing","toValue","useNativeDriver","onClick","width","height","stroke","strokeWidth","rx","ry","cx","cy","r","Square","Lap","data","join","Road","closed","rest","End","AG","ACircle","Token","xy","ValueXY","animation","glow","wiggle","stopAnimation","loop","fillOpacity","getColor","playerColor","light","Start","SQUARE_ZERO","playerBox","WIDTH","lap","HEIGHT","exits","Classic","dieError","onDiePress","onTokenPress","useWindowDimensions","maxSize","Math","min","toast","useToast","Box","viewBox","preserveAspectRatio","Fragment","show","title","error","field","definition","BoardType","Stack","props","textAnchor","fontSize","Board","FOR_ALL_PLAYERS","keys","P0","P1","stackData","posX","fields","WHOLE_BOARD_WIDTH","board","renderFields","list","idPrefix","idx","WHOLE_BOARD_MARGIN","WHOLE_BOARD_HEIGHT","lastField","x1","y1","x2","y2","flatMap","dieDisabled","Field","PlayingBoard","boardType","boardProps","SMALL_BOARD_FOR_TWO","CLASSIC","console","warn","selectedBoard","t","Platform","OS","ClientReact","ClientReactNative","SimpleBot","objectives","_G","finished1","checker","weight","finished2","finished3","kickPlayer","iterations","playoutDepth","MCTSBot","Client","hasBots","C","useMemo","bots","multiplayer","Local","client","Game","debug","collapseOnLoad","numPlayers","playerID","Play","route","params","safeAreaTop","safeAreaRight","position","top","IconButton","_icon","RootStack","createStackNavigator","Navigation","NavigationContainer","Navigator","screenOptions","headerShown","Screen","component","App"],"mappings":"0FAEYA,EA2CAC,E,kDCzCNC,EAA4B,CAC9BC,WAAY,QAGVC,EAAQC,YAAY,CACtBC,OAAQ,CACJC,QAAS,CACLC,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,YAGbC,WAAY,CACRC,KAAM,CACFC,aAAc,CACVC,GAAIC,OAIhBpB,OAAQ,CACJqB,oBAAoB,KAUbC,EANS,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACpB,cAACC,EAAA,EAAD,CAAoBtB,MAAOA,EAAOF,OAAQA,EAA1C,SACKuB,K,wBCxBME,EAVW,SAAC,GAAkB,IAAhBF,EAAe,EAAfA,SACzB,EAA8BG,oBAAS,GAAvC,WAAOC,EAAP,KAAgBC,EAAhB,KAMA,OALAC,qBAAU,WACNC,IAAYC,OAAOC,MAAK,WACpBJ,GAAW,QAEhB,IACI,mCAAGD,EAAU,KAAOJ,K,mGCmChBU,EAjCsB,SAAC,GAAD,QACjCC,eADiC,SAEjCC,EAFiC,EAEjCA,MACAC,EAHiC,EAGjCA,YACAC,EAJiC,EAIjCA,SACAC,EALiC,EAKjCA,IACAC,EANiC,EAMjCA,OANiC,OAQjC,cAACC,EAAA,EAAD,CACIN,QAASA,EACTO,QAAS,CACLC,QAAS,GAEbC,QAAS,CACLD,QAAS,EACTE,WAAY,CACRC,SAAU,MARtB,SAWI,eAACC,EAAA,EAAD,CAAQC,WAAW,SAAnB,UACI,cAACC,EAAA,EAAD,CACIZ,YAAaA,EACba,KAAM,EACNd,MAAOA,EACPe,aAAcb,IAElB,eAACc,EAAA,EAAD,CAAUhB,MAAM,MAAMiB,UAAWd,EAAKD,SAAUE,EAAQc,EAAE,IAA1D,gBACQf,WC8GLgB,EA9IE,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,WAChB,EAAwBC,YAAgB,OAAQ,SAAhD,WAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,YAAgB,UAAW,KAAzD,WAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,YAAgB,QAAS,WAAnD,WAAOtD,EAAP,KAAc2D,EAAd,KACA,EAA8BL,YAAgB,UAAW,IAAzD,WAAOM,EAAP,KAAgBC,EAAhB,KACA,EAA8BP,YAAgB,UAAW,IAAzD,WAAOQ,EAAP,KAAgBC,EAAhB,KACA,EAA8BT,YAAgB,UAAW,IAAzD,WAAOU,EAAP,KAAgBC,EAAhB,KACA,EAA8BX,YAAgB,UAAW,IAAzD,WAAOY,EAAP,KAAgBC,EAAhB,KACA,EAAwBb,YAAgB,QAAQ,GAAhD,WAAOc,EAAP,KAAaC,EAAb,KACA,EAAwBf,YAAgB,QAAQ,GAAhD,WAAOgB,EAAP,KAAaC,EAAb,KACA,EAAwBjB,YAAgB,QAAQ,GAAhD,WAAOkB,EAAP,KAAaC,EAAb,KACA,EAAwBnB,YAAgB,QAAQ,GAAhD,WAAOoB,EAAP,KAAaC,GAAb,KACA,OACI,cAACC,EAAA,EAAD,CACI7B,KAAM,EACN8B,GAAG,gBACHhC,WAAW,SACXiC,eAAe,SACfC,aAAc,UALlB,SAMI,eAACH,EAAA,EAAD,CACII,UAAQ,EACRH,GAAG,QACH9B,KAAM,EACNkC,aAAc,CAAEC,GAAI,IACpBC,KAAM,IACNC,EAAE,OACFjC,EAAG,CAAE+B,GAAI,GAPb,UAQI,eAACG,EAAA,EAAD,CAAYC,EAAE,QAAQC,EAAG,EAAzB,UACI,cAACC,EAAA,EAAD,CAASC,KAAK,MAAMC,UAAU,SAA9B,qBAGA,cAACF,EAAA,EAAD,CAASC,KAAK,KAAKE,GAAG,IAAtB,uBAGA,eAACC,EAAA,EAAOC,MAAR,CAAcC,YAAU,EAAxB,UACI,cAACF,EAAA,EAAD,CACIG,QAAS,kBAAMvC,EAAQ,UACvBwC,QAAkB,UAATzC,EAAmB,QAAU,UAF1C,mBAKA,cAACqC,EAAA,EAAD,CACIG,QAAS,kBAAMvC,EAAQ,WACvBwC,QAAkB,WAATzC,EAAoB,QAAU,UACvC0C,YAAU,EAHd,wBAOJ,cAACT,EAAA,EAAD,CAASC,KAAK,KAAKE,GAAG,IAAtB,+BAGA,eAACC,EAAA,EAAOC,MAAR,CAAcC,YAAU,EAAxB,UACI,cAACF,EAAA,EAAD,CACIG,QAAS,kBAAMrC,EAAW,MAC1BsC,QAAqB,MAAZvC,EAAkB,QAAU,UAFzC,eAKA,cAACmC,EAAA,EAAD,CACIG,QAAS,kBAAMrC,EAAW,MAC1BsC,QAAqB,MAAZvC,EAAkB,QAAU,UACrCwC,YAAU,EAHd,gBAMA,cAACL,EAAA,EAAD,CACIG,QAAS,kBAAMrC,EAAW,MAC1BsC,QAAqB,MAAZvC,EAAkB,QAAU,UAFzC,kBAMJ,cAAC+B,EAAA,EAAD,CAASC,KAAK,KAAKE,GAAG,IAAtB,mBAGA,eAACC,EAAA,EAAOC,MAAR,CAAcC,YAAU,EAAxB,UACI,cAACF,EAAA,EAAD,CACIG,QAAS,kBAAMpC,EAAS,YACxBqC,QAAmB,YAAVhG,EAAsB,QAAU,UAF7C,qBAKA,cAAC4F,EAAA,EAAD,CACIG,QAAS,kBAAMpC,EAAS,WACxBqC,QAAmB,WAAVhG,EAAqB,QAAU,UACxCiG,YAAU,EAHd,wBAOJ,cAACT,EAAA,EAAD,CAASC,KAAK,KAAKE,GAAG,IAAtB,qBAGA,cAAC,EAAD,CACI1D,MAAO2B,EACP1B,YAAY,WACZC,SAAU0B,EACVzB,IAAKgC,EACL/B,OAAQgC,IAEZ,cAAC,EAAD,CACIrC,SAAUyB,GAAW,EACrBxB,MAAO6B,EACP5B,YAAY,WACZC,SAAU4B,EACV3B,IAAKkC,EACLjC,OAAQkC,IAEZ,cAAC,EAAD,CACIvC,SAAUyB,GAAW,EACrBxB,MAAO+B,EACP9B,YAAY,WACZC,SAAU8B,EACV7B,IAAKoC,EACLnC,OAAQoC,IAEZ,cAAC,EAAD,CACIzC,SAAUyB,GAAW,EACrBxB,MAAOiC,EACPhC,YAAY,WACZC,SAAUgC,EACV/B,IAAKsC,EACLrC,OAAQsC,KAEZ,cAACuB,EAAA,EAAD,CAAMC,MAAO,WAAb,+CAIJ,cAACP,EAAA,EAAD,CACIH,KAAK,KACLW,GAAI,EACJC,GAAI,EACJN,QAAS,kBACL1C,EAAWiD,SAAS,OAAQ,CACxB7C,SAAUA,EACVW,OACAE,MAAOb,EAAU,GAAKa,EACtBE,MAAOf,EAAU,GAAKe,EACtBE,MAAOjB,EAAU,GAAKiB,KAVlC,8B,2DJ/HJ9E,K,UAAAA,E,cAAAA,E,YAAAA,E,iBAAAA,M,cA2CAC,K,cAAAA,E,UAAAA,E,WAAAA,M,KKvCZ,I,EAAM0G,EAAgB,CAAC,EAAG,GAAkB,GAAkB,IACxDC,EAAe,CACjB,GACA,GACA,EACA,IAGSC,EAAY,SAACC,EAAUC,EAAUC,GAC1C,IAAMC,EAAQH,EAAEI,OAAOF,GACvB,GAAiB,OAAbF,EAAEK,OACF,MAAO,6DAEX,IAAKF,EACD,MAAM,IAAIG,MAAM,mBAEpB,GAAgB,IAAZN,EAAEO,OAAeJ,EAAMK,SAAWrH,EAAYsH,MAC9C,MAAO,4DAEX,GACIN,EAAMK,SAAWrH,EAAYsH,OAC7BN,EAAMO,WAAaT,EAAIU,cAEvB,MAAO,yDAEX,GACIR,EAAMK,SAAWrH,EAAYyH,KAC7BT,EAAMO,WAAaT,EAAIU,cAEvB,MAAO,2CAEX,GAAgB,IAAZX,EAAEO,MACF,MAAO,gEAEX,GACIJ,EAAMK,SAAWrH,EAAYsH,OAC7BT,EAAEjD,QAAQkD,EAAIU,eAAeE,MAAMV,EAAMV,OAEzC,MAAO,wHAEX,GACIU,EAAMK,SAAWrH,EAAY2H,KAC7Bd,EAAEjD,QAAQkD,EAAIU,eAAeI,IAAIZ,EAAMV,OAEvC,MAAO,8EAEX,GAAIU,EAAMK,SAAWrH,EAAYyH,KAAOT,EAAMa,QAAUhB,EAAEO,MAAQ,EAC9D,MAAO,mEAEX,GACIJ,EAAMK,SAAWrH,EAAYyH,KAC7BZ,EAAEjD,QAAQkD,EAAIU,eAAeM,OAAOd,EAAMa,QAAUhB,EAAEO,OAEtD,MAAO,8EAGX,GAAIJ,EAAMK,SAAWrH,EAAY2H,IAAK,CAIlC,IAHA,IAAIP,EAAQP,EAAEO,MACVS,EAAUb,EAAMa,QACdE,EAAapB,GAAcG,EAAIU,eAC9BJ,EAAQ,IAEXA,MADAS,IAEgBE,KAIpB,GAAIX,EAAQ,EAAG,CACX,GAAIA,EAAQ,EACR,MAAO,4DAEX,GAAIP,EAAEjD,QAAQkD,EAAIU,eAAeM,OAAOV,EAAQ,GAC5C,MAAO,+EAInB,OAAO,GC3EEY,EAAY,SAACnB,EAAUoB,GAChC,OAAgB,IAAZpB,EAAEO,MACK,8CAEM,OAAbP,EAAEK,QACK,uECPTgB,GAAa,WACdnI,EAAMoI,IAAM,GADE,MAEdpI,EAAMqI,MAAQ,GAFA,MAGdrI,EAAMsI,KAAO,GAHC,MAIdtI,EAAMuI,OAAS,GAJD,GAONC,EAAc,SACvB1B,EACAoB,EACAV,GAEA,QAAiBiB,IAAbjB,EACA,MAAM,IAAIJ,MAAM,yBAEpB,GAAiB,OAAbN,EAAEK,OACF,MAAO,wDAEX,IAAMF,EAAQH,EAAEI,OAAOJ,EAAEK,QACzB,OAAIL,EAAEjD,QAAQ2D,GAAUG,MAAMV,EAAMV,OAC1B,UAAWiB,EAAjB,yBAAkDP,EAAMV,MAAxD,2BAEAO,EAAEjD,QAAQ2D,GAAUK,IAAIZ,EAAMV,QACxB,UAAWiB,EAAjB,yBAAkDP,EAAMV,MAAxD,2BCrBO,WAACO,EAAUC,GACtB,IAAMM,EAAQ,GACTY,EAAUnB,IACXO,EAAMqB,KAAK,CAAEC,KAAM,OAAQC,KAAM,KAErC,IAAK,IAAIC,EAAI,EAAGA,EAAI/B,EAAEI,OAAO4B,OAAQD,IAC5BhC,EAAUC,EAAGC,EAAK8B,IACnBxB,EAAMqB,KAAK,CAAEC,KAAM,OAAQC,KAAM,CAACC,KAQ1C,OALA9B,EAAIgC,UAAUC,SAAQ,SAACrD,GACd6C,EAAY1B,EAAGC,EAAKpB,IACrB0B,EAAMqB,KAAK,CAAEC,KAAM,SAAUC,KAAM,CAACjD,QAGrC0B,G,klBCjBI,ICsBA4B,EAjBW,CACtBC,KAAM,UACNC,KAAM,EACNC,WAAY,EACZC,WAAY,EACZC,MDVW,SAACvC,GACZ,IAAMG,EAAkBH,EAAIgC,UAAUQ,QAClC,SAACC,EAAM7D,EAAGkD,GAAV,oBACOW,GADP,CAEI,CACIxC,GAAQ,EAAJ6B,EACJtC,MAAOvG,EAAMoI,IACbZ,SAAU7B,EACV2B,OAAQrH,EAAYsH,MACpBO,QAAS,GAEb,CACId,GAAQ,EAAJ6B,EAAQ,EACZtC,MAAOvG,EAAMqI,MACbb,SAAU7B,EACV2B,OAAQrH,EAAYsH,MACpBO,QAAS,GAEb,CACId,GAAQ,EAAJ6B,EAAQ,EACZtC,MAAOvG,EAAMsI,KACbd,SAAU7B,EACV2B,OAAQrH,EAAYsH,MACpBO,QAAS,GAEb,CACId,GAAQ,EAAJ6B,EAAQ,EACZtC,MAAOvG,EAAMuI,OACbf,SAAU7B,EACV2B,OAAQrH,EAAYsH,MACpBO,QAAS,OAGjB,IAGEjE,EAAmBkD,EAAIgC,UAAUQ,QACnC,SAAC5D,EAAG8D,GAAJ,cACO9D,GADP,UAEK8D,EAAI,CACDP,KAAM,GACNvB,MAAO,CACH+B,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,QAAQ,GAEZhC,IAAK,CACD6B,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,QAAQ,GAEZ9B,OAAQ,EAAC,GAAO,GAAO,GAAO,GAC9B+B,SAAU,OAGlB,IAGJ,MAAO,CACHjE,KA1BS,GA2BTqB,SACA6C,QAAS,IAAIC,MA5BJ,IA4BgBC,KAAK,MAC9B9C,OAAQ,KACR+C,IAAK,KACL7C,MAAO,EACPxD,YCxDJwD,MAAO,CACH8C,KJAyB,SAACrD,EAAGC,GACjC,GAAIkB,EAAUnB,GACV,OAAOsD,IAEX,IAAKrD,EAAIsD,OACL,MAAM,IAAIjD,MAAM,uBAIgB,IAAD,GAFnCN,EAAEoD,IAAMnD,EAAIsD,OAAOC,KACnBxD,EAAEO,MAAQP,EAAEoD,IACoB,GAA5BK,EAAUzD,EAAGC,GAAK+B,UAClBhC,EAAEO,MAAQ,EACV,SAAAN,EAAIyD,SAAJ,EAAYC,YIVZ9B,KLmEyB,SAAC7B,EAAGC,EAAKC,GACtC,GAAIH,EAAUC,EAAGC,EAAKC,GAClB,OAAOoD,IAEX,IA0CiB,EA1CXnD,EAAQH,EAAEI,OAAOF,GACvB,GAAIC,EAAMK,SAAWrH,EAAYsH,MAAO,CACpCN,EAAMK,OAASrH,EAAY2H,IAC3B,IAAM8C,EAAI/D,EAAcI,EAAI4D,cACP,OAAjB7D,EAAEiD,QAAQW,KACV5D,EAAEK,OAASL,EAAEiD,QAAQW,IAEzB5D,EAAEO,MAAQ,EACVP,EAAEiD,QAAQW,GAAK1D,EACfF,EAAEjD,QAAQkD,EAAIU,eAAeE,MAAMV,EAAMV,QAAS,EAClDU,EAAMa,QAAU4C,OACb,GAAIzD,EAAMK,SAAWrH,EAAYyH,IACpCZ,EAAEjD,QAAQkD,EAAIU,eAAeM,OAAOd,EAAMa,UAAW,EACrDb,EAAMa,SAAWhB,EAAEO,MACnBP,EAAEjD,QAAQkD,EAAIU,eAAeM,OAAOd,EAAMa,UAAW,MAClD,CACH,IAAME,EAAapB,GAAcG,EAAIU,eACrCX,EAAEiD,QAAQ9C,EAAMa,SAAW,KAE3B,IADA,IAAI8C,EAAa3D,EAAMa,QAChBhB,EAAEO,MAAQ,IACbP,EAAEO,SACFuD,GAAcA,EAAa,GAAK9D,EAAEjB,QACfmC,KAInBlB,EAAEO,MAAQ,GACVJ,EAAMK,OAASrH,EAAYyH,IAC3BT,EAAMa,QAAUhB,EAAEO,MAAQ,EAC1BJ,EAAMO,SAAWT,EAAIU,cACrBX,EAAEjD,QAAQkD,EAAIU,eAAeM,OAAOd,EAAMa,UAAW,EACrDhB,EAAEjD,QAAQkD,EAAIU,eAAeI,IAAIZ,EAAMV,QAAS,EAChDO,EAAEjD,QAAQkD,EAAIU,eAAeqC,aAE7B7C,EAAMa,QAAU8C,EACc,OAA1B9D,EAAEiD,QAAQa,KACV9D,EAAEK,OAASL,EAAEiD,QAAQa,IAEzB9D,EAAEiD,QAAQa,GAAc3D,EAAMD,KAGtCF,EAAEO,MAAQ,EACI,IAAVP,EAAEoD,OACF,SAAAnD,EAAIyD,SAAJ,EAAYC,YKjHZI,OHc2B,SAAC/D,EAAGC,EAAKS,GACxC,GAAIgB,EAAY1B,EAAGC,EAAKS,GACpB,OAAO4C,IAEX,GAAiB,OAAbtD,EAAEK,OACF,OAAOiD,IAEX,IAMiB,EANXnD,EAAQH,EAAEI,OAAOJ,EAAEK,SACzBF,EAAMK,OAASrH,EAAYsH,MAC3BN,EAAMO,SAAWA,EACjBP,EAAMa,QAAUK,EAAclB,EAAMV,OACpCO,EAAEjD,QAAQ2D,GAAUG,MAAMV,EAAMV,QAAS,EACzCO,EAAEK,OAAS,KACG,IAAVL,EAAEoD,OACF,SAAAnD,EAAIyD,SAAJ,EAAYC,aG1BhBK,MCjBW,SAAChE,EAAUC,GACtB,IAAK,IAAI8B,EAAI,EAAGA,EAAI9B,EAAIgC,UAAUD,OAAQD,IACtC,GAA6C,IAAzC/B,EAAEjD,QAAQkD,EAAIgC,UAAUF,IAAIiB,SAC5B,MAAO,CAAEiB,OAAQhE,EAAIgC,UAAUF,KDevCmC,GAAI,CACAT,c,sDErBKU,GAAU,SACnBtD,EACAuD,EACAC,GAEE,IADFC,IACC,yDACKC,EAAS1D,EAAT0D,EAAGC,EAAM3D,EAAN2D,EACT,OAAOJ,EAAKK,MAAM,IAAIC,KAAI,SAACC,GACvB,IAAMC,EAAOL,EACPM,EAAOL,EACb,GAAU,MAANG,EACAH,GAAKH,OACF,GAAU,MAANM,EACPH,GAAKH,OACF,GAAU,MAANM,EACPJ,GAAKF,OACF,GAAU,MAANM,EACPJ,GAAKF,OACF,GAAU,WAANM,EACPJ,GAAKF,EACLG,GAAKH,OACF,GAAU,WAANM,EACPJ,GAAKF,EACLG,GAAKH,OACF,GAAU,WAANM,EACPJ,GAAKF,EACLG,GAAKH,MACF,IAAU,WAANM,EAIP,MAAM,IAAIrE,MAAJ,sBAAgCqE,EAAhC,KAHNJ,GAAKF,EACLG,GAAKH,EAIT,OAAIC,EACO,CAAEC,IAAGC,KAET,CAAED,EAAGK,EAAMJ,EAAGK,O,SCvBvBC,GAAYC,KAASC,wBAAwBhF,MAC7CiF,GAAiBF,KAASC,wBAAwBE,WAElDC,GAAa,CAAC,EAAG,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KA8IxDC,GA5Ic,SAAC,GAA8C,IAA5Cb,EAA2C,EAA3CA,EAAGC,EAAwC,EAAxCA,EAAGzF,EAAqC,EAArCA,KAAMxD,EAA+B,EAA/BA,MAAO8J,EAAwB,EAAxBA,SAAUhG,EAAc,EAAdA,QACnDsD,EAAI2C,iBAAO,IAAIP,KAASQ,MAAMhK,IAAQiK,QACtCC,EAAM9C,EAAE+C,YAAY,CAAEP,WAAY,CAAC,EAAG,GAAIQ,YAAa,CAAC,EAAG,OAC3DC,EAAQN,iBAAO,IAAIP,KAASQ,MAAMxG,EAAO,MAAMyG,QAE/CK,EAAKJ,EAAIC,YAAY,CACvBP,cACAQ,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAE7CG,EAAKL,EAAIC,YAAY,CACvBP,cACAQ,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAE7CI,EAAKN,EAAIC,YAAY,CACvBP,cACAQ,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAE7CK,EAAKP,EAAIC,YAAY,CACvBP,cACAQ,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAE7CM,EAAKR,EAAIC,YAAY,CACvBP,cACAQ,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAE7CO,EAAKT,EAAIC,YAAY,CACvBP,cACAQ,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAE7CQ,EAAKV,EAAIC,YAAY,CACvBP,cACAQ,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAEnD1K,qBAAU,WACN0H,EAAEyD,SAAS7K,KACZ,CAAC8J,EAAU9J,IAEd,IAAM8H,EAAOgD,uBAAY,WAChBhB,EA8BDhG,IA7BA0F,KAASuB,SAAS,CACdvB,KAASwB,SAAS,CACdxB,KAASyB,OAAOZ,EAAO,CACnBa,QAAU1H,EAjDrB,IAiDoC,IACzB9C,SAAU,IACVyK,iBAAiB,IAErB3B,KAASyB,OAAOZ,EAAO,CACnBa,QAAS1H,EAtDpB,IAuDW9C,SAAU,IACVyK,iBAAiB,MAGzB3B,KAASwB,SAAS,CACdxB,KAASyB,OAAO7D,EAAG,CACf8D,QAAS,EACTxK,SAAU,IACVyK,iBAAiB,IAErB3B,KAASyB,OAAO7D,EAAG,CACf8D,QAAS,EACTxK,SAAU,IACVyK,iBAAiB,QAG1B7F,OAAM,WACLxB,SAKT,CAACgG,IAEJ,OACI,cAAC,KAAD,CAAGd,EAAGA,EAAGC,EAAGA,EAAZ,SACI,eAACM,GAAD,CAAWc,MAAOA,EAAOvG,QAASgE,EAAMsD,QAAStD,EAAjD,UACI,cAAC,QAAD,CACIkB,GAAI,IACJC,GAAI,IACJoC,MAAO,IACPC,OAAQ,IACRC,OAAO,OACPC,YAAa,EACbC,GAAI,GACJC,GAAI,GACJ9D,KAAK,UAET,cAAC8B,GAAD,CACI9B,KAAK,QACL+D,IAAK,GACLC,IAAK,GACLC,EAAG,GACHtL,QAAS+J,IAEb,cAACZ,GAAD,CACI9B,KAAK,QACL+D,GAAI,EACJC,IAAK,GACLC,EAAG,GACHtL,QAASgK,IAEb,cAACb,GAAD,CACI9B,KAAK,QACL+D,GAAI,GACJC,IAAK,GACLC,EAAG,GACHtL,QAASiK,IAEb,cAACd,GAAD,CACI9B,KAAK,QACL+D,IAAK,GACLC,GAAI,GACJC,EAAG,GACHtL,QAASkK,IAEb,cAACf,GAAD,CACI9B,KAAK,QACL+D,GAAI,EACJC,GAAI,GACJC,EAAG,GACHtL,QAASmK,IAEb,cAAChB,GAAD,CACI9B,KAAK,QACL+D,GAAI,GACJC,GAAI,GACJC,EAAG,GACHtL,QAASoK,IAEb,cAACjB,GAAD,CACI9B,KAAK,QACL+D,GAAI,EACJC,GAAI,EACJC,EAAG,GACHtL,QAASqK,UCrIdkB,GAbA,SAAC,GAAqB,IAAnB9C,EAAkB,EAAlBA,EAAGC,EAAe,EAAfA,EACjB,OACI,cAAC,UAAD,CACI0C,GAAI3C,EACJ4C,GAAI3C,EACJ4C,EAAG,GACHjE,KAAK,QACL2D,OAAO,OACPC,YAAa,KCkBVO,GAvBH,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KACX,OACI,qCACI,cAAC,QAAD,CACI5C,EACI4C,EACK7C,KACG,WAAW3C,GAAX,OACa,IAANA,EAAU,IAAM,KADvB,MAAGwC,EAAH,MAAMC,EAAN,OAGHgD,KAAK,IAAM,IAEpBV,OAAO,OACPC,YAAY,KACZ5D,KAAK,gBAERoE,EAAK7C,KAAI,WAAW3C,GAAX,IAAGwC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAN,OACN,cAAC,GAAD,CAAQD,EAAGA,EAAGC,EAAGA,GAAQzC,U,oPClBzC,IAgBe0F,GAhBF,SAAC,GAA0C,IAAxCF,EAAuC,EAAvCA,KAAMG,EAAiC,EAAjCA,OAAWC,EAAsB,UACnD,OACI,cAAC,Q,mWAAD,EACIhD,EACI4C,EACK7C,KAAI,WAAW3C,GAAX,OAA0B,IAANA,EAAU,IAAM,KAApC,MAAGwC,EAAH,MAAMC,EAAN,OACJgD,KAAK,KAAOE,EAAS,IAAM,IAEpCvE,KAAK,cACL2D,OAAO,OACPC,YAAa,IACTY,KCCDC,GAXH,SAAC,GAAqB,IAAnBL,EAAkB,EAAlBA,KACX,OACI,qCACI,cAAC,GAAD,CAAMA,KAAMA,EAAMT,OAAO,OAAOC,YAAa,KAC5CQ,EAAK7C,KAAI,WAAW3C,GAAX,IAAGwC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAN,OACN,cAAC,GAAD,CAAgBD,EAAGA,EAAGC,EAAGA,GAAZzC,UCFvB8F,GAAK9C,KAASC,wBAAwBhF,MACtC8H,GAAU/C,KAASC,wBAAwBE,WAEpC6C,GAA8B,SAAC,GAOrC,IANHxD,EAME,EANFA,EACAC,EAKE,EALFA,EACAzF,EAIE,EAJFA,KACAU,EAGE,EAHFA,MACA4F,EAEE,EAFFA,SACAhG,EACE,EADFA,QAEM2I,EAAK1C,iBAAO,IAAIP,KAASkD,QAAQ,CAAE1D,IAAGC,OAAMgB,QAC5C0C,EAAY5C,iBAAO,IAAIP,KAASQ,MAAM,IAAIC,QAC1C2C,EAAOD,EAAUxC,YAAY,CAC/BP,WAAY,CAAC,EAAG,GAChBQ,YAAa,CAAC,EAAG,MAEfyC,EAASF,EAAUxC,YAAY,CACjCP,WAAY,CAAC,EAAG,GAChBQ,YAAa,CAAC,GAAI,MA8BtB,OA5BA1K,qBAAU,WACN8J,KAASyB,OAAOwB,EAAI,CAChBvB,QAAS,CAAElC,IAAGC,KACdvI,SAAU,IACVyK,iBAAiB,IAClB7F,UACJ,CAAC0D,EAAGC,IACPvJ,qBAAU,WACFoK,GACA6C,EAAU9B,SAAS,GACnB8B,EAAUG,iBAEVtD,KAASuD,KACLvD,KAASwB,SAAS,CACdxB,KAASyB,OAAO0B,EAAW,CACvBzB,QAAS,EACTxK,SAAU,IACVyK,iBAAiB,IAErB3B,KAASyB,OAAO0B,EAAW,CACvBzB,QAAS,EACTxK,SAAU,IACVyK,iBAAiB,OAG3B7F,UAEP,CAACwE,IAEA,eAACwC,GAAD,CAAItD,EAAGyD,EAAGzD,EAAGC,EAAGwD,EAAGxD,EAAGmC,QAAStH,EAASA,QAASA,EAAjD,UACI,cAACyI,GAAD,CACIV,EAAGe,EACHhF,KAAM1D,EACN8I,YAAa,GACbxB,YAAa1B,EAAW,EAAI,EAC5BvJ,QAASuJ,EAAW,GAAM,IAE9B,eAACwC,GAAD,CAAIrD,EAAG4D,EAAP,UACI,cAAC,QAAD,CACIzD,EAAE,4CACFmC,OAAO,QACPC,YAAa1B,EAAW,EAAI,EAC5BvJ,QAASuJ,EAAW,GAAM,EAC1BlC,KAAM1D,IAEV,cAAC,UAAD,CAAQ0H,IAAKpI,EAAMqI,EAAG,GAAIjE,KAAK,UAC/B,cAAC,UAAD,CACIgE,IAAKpI,EACLqI,EAAG,GACHjE,KAAM1D,EACNqH,OAAO,QACPC,YAAa1B,EAAW,EAAI,EAC5BvJ,QAASuJ,EAAW,GAAM,WCpFvC,SAASmD,GAASC,GAAoC,IAAhBC,EAAe,wDACxD,OAAQD,GACJ,KAAKvP,EAAMoI,IACP,OAAOoH,EAAQ,UAAY,UAE/B,KAAKxP,EAAMqI,MACP,OAAOmH,EAAQ,UAAY,UAE/B,KAAKxP,EAAMsI,KACP,OAAOkH,EAAQ,UAAY,UAE/B,KAAKxP,EAAMuI,OACP,OAAOiH,EAAQ,UAAY,WCLvC,I,GAUeC,GAVD,SAAC,GAAqB,IAAnBpB,EAAkB,EAAlBA,KACb,OACI,mCACKA,EAAK7C,KAAI,WAAW3C,GAAX,IAAGwC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAN,OACN,cAAC,GAAD,CAAQD,EAAGA,EAAGC,EAAGA,GAAQzC,S,qkBCEzC,IAMM6G,GAAc,CAChBrE,GAAI,GACJC,EAAG,KAGDqE,GAAY1E,GACd,CAAEI,EAAG9D,IAAW+D,EAAG/D,KACnB,iBACAqI,KACA,GASEC,GAAM5E,GACRyE,GACA,2CAvBS,IA2BP/H,GAAQ,CACVsD,GACI,CAAEI,EAAG9D,IAAsB+D,EAAG/D,KAC9B,OA9BK,IAgCL,GAEJ0D,GACI,CAAEI,EAAGuE,IAA8BtE,EAAGwE,KACtC,OApCK,IAsCL,GAEJ7E,GACI,CAAEI,EAAGuE,IAA8BtE,EAAG/D,KACtC,OA1CK,IA4CL,GAEJ0D,GACI,CAAEI,EAAG9D,IAAsB+D,EAAGwE,KAC9B,OAhDK,IAkDL,IAIFC,GAAQ,CAAC,GAAI,GAAI,EAAG,IAEpBlI,GAAM,CACRoD,GAAQ4E,GAAI,IAAK,OAzDR,IA0DT5E,GAAQ4E,GAAI,IAAK,OA1DR,IA2DT5E,GAAQ4E,GAAI,GAAI,OA3DP,IA4DT5E,GAAQ4E,GAAI,IAAK,OA5DR,KA+DP9F,IAAgB,aACjB9J,EAAY2H,IAAMiI,IADD,OAEjB5P,EAAYsH,MAAQI,IAFH,OAGjB1H,EAAYyH,IAAMG,IAHD,IAuHPmI,GAjHC,SAAC,GAQgB,IAP7B9F,EAO4B,EAP5BA,IACA+F,EAM4B,EAN5BA,SACAC,EAK4B,EAL5BA,WACAhJ,EAI4B,EAJ5BA,OACAiJ,EAG4B,EAH5BA,aACAtM,EAE4B,EAF5BA,QACA4D,EAC4B,EAD5BA,cAEA,EAA0B2I,cAAlB1C,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACT0C,EAAUC,KAAKC,IAAI7C,EAAOC,GAC1B6C,EAAQC,cACd,OACI,cAACzL,EAAA,EAAD,CAAQI,UAAQ,EAACnC,WAAW,SAA5B,SACI,cAACyN,EAAA,EAAD,CAAKlL,EAAG6K,EAAS3K,EAAG2K,EAApB,SACI,eAAC,KAAD,CACI1C,OAAO,OACPD,MAAM,OACNiD,QAAO,gBACPC,oBAAoB,iBAJxB,UAKI,cAAC,QAAD,CAAMlD,MAAM,OAAOC,OAAO,OAAO1D,KAAK,YACtC,cAAC,QAAD,CACIoB,EAAE,KACFC,EAAE,KACFoC,MAAM,MACNC,OAAO,MACPE,YAAY,IACZD,OAAO,QACP3D,KAAK,gBAET,cAAC,QAAD,CACIyD,MAAM,OACNC,OAAO,OACPE,YAAY,KACZD,OAAO,UACP3D,KAAK,gBAERpG,EAAQ2H,KAAI,SAAC7F,EAAGkD,GAAJ,OACT,eAAC,IAAMgI,SAAP,WACI,cAAC,KAAD,SAAOlB,GAAU9G,IAAjB,aACI,cAAC,QAAD,CACI6E,MAAOnG,IACPoG,OAAQpG,IACR8D,GAAG,KACHC,GAAG,KACHrB,KACItE,EAAEqB,KAAOS,EACH,SACA,cAEVmG,OAAO,OACPC,YAAalI,EAAEqB,KAAOS,EAAgB,EAAI,EAC1CqG,GAAG,UAGX,cAAC,GAAD,CACIO,KAAM,CACFtE,GAAQ8F,IAAIE,GAAMlH,IAClBkB,GAAQlC,IAAIgB,GAAG,MAGvB,cAAC,GAAD,CAAOwF,KAAMtE,GAAQpC,MAAMkB,KAC3B,cAAC,GAAD,CAAKwF,KAAMtE,GAAQlC,IAAIgB,OAxBNA,MA2BzB,cAAC,GAAD,CAAKwF,KAAMtE,GAAQ8F,MACnB,cAAC,GAAD,CACIxE,EAAGuE,IACHtE,EAAGwE,IACHjK,KAzIP,IA0IOxD,MAAO6H,EACPiC,WAAY8D,EACZ9J,QAAS,WACD8J,EACAO,EAAMM,KAAK,CAAEC,MAAOd,IAEpBC,OAIXhJ,EAAOsE,KACJ,YAAsD,IAAnDxE,EAAkD,EAAlDA,GAAIM,EAA8C,EAA9CA,OAAQQ,EAAsC,EAAtCA,QAASN,EAA6B,EAA7BA,SAAUjB,EAAmB,EAAnBA,MAAOyK,EAAY,EAAZA,MAC/BC,EACF3J,IAAWrH,EAAY2H,IACjBmC,GAAQzC,GAAQQ,GAChBiC,GAAQzC,IAASE,GAAUM,GACrC,OACI,cAAC,GAAD,CAEIuD,EAAG4F,EAAM5F,EACTC,EAAG2F,EAAM3F,EACT/E,MAAO+I,GAAS/I,GAChBV,KA/JjB,GAgKiBsG,WAAY6E,EACZ7K,QAAS,WACD6K,EACAR,EAAMM,KAAK,CACPC,MAAOC,IAGXb,EAAanJ,KAZhBA,cC7K5BkK,GACG,EADHA,GAEQ,EAFRA,GAGE,GAHFA,GAIG,CACR,EACA,GANKA,GAQK,ECRX,SAAS5B,GAASC,GAAoC,IAAhBC,EAAe,wDACxD,OAAQD,GACJ,KAAKvP,EAAMoI,IACP,OAAOoH,EAAQ,UAAY,UAE/B,KAAKxP,EAAMqI,MACP,OAAOmH,EAAQ,UAAY,UAE/B,KAAKxP,EAAMsI,KACP,OAAOkH,EAAQ,UAAY,UAE/B,KAAKxP,EAAMuI,OACP,OAAOiH,EAAQ,UAAY,WCFhC,ICZK2B,GDYCC,GAA8B,SAACC,GACxC,OACI,eAAC,KAAD,WACI,cAAC,QAAD,CACIhG,EAAGgG,EAAMhG,EAAIgG,EAAM3D,MAAQ,EAC3BpC,EAAG+F,EAAM/F,EACToC,MAAO2D,EAAM3D,MACbC,OAAQ0D,EAAM1D,OACdC,OAAO,QACPC,YAAY,IACZ5D,KAAMoH,EAAM9K,QAEhB,cAAC,QAAD,CACI8E,EAAGgG,EAAMhG,EACTC,EAAG+F,EAAM/F,EAAI,GACbgG,WAAW,SACX1D,OAAO,QACP3D,KAAK,QACLsH,SAAS,KANb,SAQKF,EAAMN,YEJVS,GAA4C,SAACH,GAgDtD,IA/CA,IAOMI,EAAe,IAAOzH,MAAMkH,IAAuBQ,QACzD,MAAiBD,EAAjB,GAAOE,EAAP,KAAWC,EAAX,KAEMC,EAAY,CACd,CAAEC,KAAM,IAAKvL,MAAO+I,GAAS+B,EAAMxN,QAAQ8N,GAAIpL,QAC/C,CAAEuL,KAAM,IAAKvL,MAAO+I,GAAS+B,EAAMxN,QAAQ+N,GAAIrL,SAG7CwL,EAAiB,CACnBpK,MAAO,CAEH,CACI,CAAE0D,EAAG,GAAaC,EAAG,IAAK/E,MAAO,SACjC,CAAE8E,EAAG,IAAaC,EAAG,IAAK/E,MAAO,SACjC,CAAE8E,EAAG,IAAaC,EAAG,IAAK/E,MAAO,SACjC,CAAE8E,EAAG,IAAaC,EAAG,IAAK/E,MAAO,UAGrC,CACI,CAAE8E,EAAG,IAAcC,EAAG,IAAK/E,MAAO,SAClC,CAAE8E,EAAG,IAAcC,EAAG,IAAK/E,MAAO,SAClC,CAAE8E,EAAG,IAAcC,EAAG,IAAK/E,MAAO,SAClC,CAAE8E,EAAG,IAAcC,EAAG,IAAK/E,MAAO,WAG1CsB,IAAK4J,EAAgBjG,KAAI,SAAChE,GACtB,OAAO,IAAIwC,MAAMkH,IAA4BjH,KAAK,MAAMuB,KAAI,WACxD,MAAO,CACHH,EAhCD2G,IAiCC1G,EAhCD,IAiCC/E,MAAO+I,GAAS+B,EAAMxN,QAAQ2D,GAAUjB,cAIpD0L,MAAO,IAAIjI,MAAMkH,IAAsBjH,KAAK,MAAMuB,KAAI,WAClD,MAAO,CAAEH,EAvCF2G,IAuCa1G,EAtCb,IAsCwB/E,MAAO,aAKrCsC,EAAI,EAAGA,EAAIqI,GAA4BrI,IAE5CkJ,EAAOlK,IAAI8J,GAAI9I,GAAGwC,GAAK,IACvB0G,EAAOlK,IAAI8J,GAAI9I,GAAGyC,GAAK,KAAC,EAAIzC,GAE5BkJ,EAAOlK,IAAI+J,GAAI/I,GAAGwC,GAAK,IACvB0G,EAAOlK,IAAI+J,GAAI/I,GAAGyC,GAAM,IAADzC,EAI3B4I,EAAgBjG,KAAI,SAAChE,GACjBuK,EAAOE,MAAMf,GAAsB1J,IAAWjB,MAAQ+I,GAClD+B,EAAMxN,QAAQ2D,GAAUjB,OACxB,MAKR,IAAK,IAAIsC,EAAI,EAAGA,EAAI,EAAGA,IAEnBkJ,EAAOE,MAAMpJ,GAAGwC,GAAM,IAADxC,EAErBkJ,EAAOE,MAAMpJ,EAAI,GAAGwC,GAAK,IACzB0G,EAAOE,MAAMpJ,EAAI,GAAGyC,GAAM,IAADzC,EAEzBkJ,EAAOE,MAAMpJ,EAAI,GAAGwC,GAAK,KAAC,EAAIxC,GAC9BkJ,EAAOE,MAAMpJ,EAAI,GAAGyC,GAAK,IAEzByG,EAAOE,OAAOpJ,EAAI,GAAKqI,IAAsB5F,GACzC,KAAC,EAAIzC,GAGb,IAgBMqJ,EAAe,SAACC,EAA0BC,GAC5C,OAAOD,EAAK3G,KAAI,SAACyF,EAAOoB,GACpB,OACI,cAAC,GAAD,CAEIrL,GAAOoL,EAAL,IAAiBC,EACnBhH,EAAG4F,EAAM5F,EACTC,EAAG2F,EAAM3F,EACT/E,MAAO0K,EAAM1K,MACbV,KAxHD,IAmHMwM,OAoDrB,OACI,eAAC,KAAD,CACI1E,OAAO,OACPD,MAAM,OACNiD,QAAO,gBAHX,UAII,cAAC,QAAD,CACItF,EAAGiH,GACHhH,EAAGgH,GACH5E,MAAOsE,IACPrE,OAAQ4E,IACR3E,OAAO,OACPC,YArLW,GAsLX5D,KAAK,UAnFNwH,EAAgBjG,KAAI,SAAChE,GACxB,OACI,cAAC,GAAD,CAEI6D,EAAGwG,EAAUrK,GAAUsK,KACvBxG,EAAG,GACH/E,MAAOsL,EAAUrK,GAAUjB,MAC3BmH,MAxGA,IAyGAC,OAAQ,IACRoD,MAAOM,EAAMxN,QAAQ2D,GAAU0B,MAN1B1B,MAqFb,cAAC,QAAD,CACI6D,EAtKG2G,IAuKH1G,EAtKG,IAuKHoC,MA1KO,IA2KPC,OA3KO,IA4KPC,OAAO,QACPC,YAAY,IACZ5D,KAAK,gBAERwH,EAAgBjG,KAAI,SAAChE,GAClB,IAAMgL,GACDtB,GAAsB1J,GACnB0J,IACJA,GACJ,OACI,cAAC,QAAD,CAEIuB,GAAIV,EAAOE,MAAMO,GAAWnH,EAC5BqH,GAAIX,EAAOE,MAAMO,GAAWlH,EAC5BqH,GAAIZ,EAAOlK,IAAIL,GAAU,GAAG6D,EAC5BuH,GAAIb,EAAOlK,IAAIL,GAAU,GAAG8D,EAC5BsC,OAAO,QACPC,YAAY,KANPrG,MAzEd,CACHiK,EAAgBoB,SAAQ,SAACrL,GACrB,MAAO,CACH0K,EACIH,EAAO9R,EAAYsH,OAAOC,GADlB,SAECA,GAEb0K,EACIH,EAAO9R,EAAYyH,KAAKF,GADhB,OAEDA,OAInB0K,EAAaH,EAAO9R,EAAY2H,KAAM,WAKnCyJ,EAAMnK,OAAOsE,KAChB,YAAyD,IAAtDxE,EAAqD,EAArDA,GAAIM,EAAiD,EAAjDA,OAAQQ,EAAyC,EAAzCA,QAASN,EAAgC,EAAhCA,SAAUjB,EAAsB,EAAtBA,MAAO4F,EAAe,EAAfA,SAC/B8E,EACF3J,IAAWrH,EAAY2H,IACjBmK,EAAOzK,GAAQQ,GACfiK,EAAOzK,IAASE,GAAUM,GACpC,OACI,cAAC,GAAD,CAEId,GAAE,SAAWA,EACbqE,EAAG4F,EAAM5F,EACTC,EAAG2F,EAAM3F,EACT/E,MAAO+I,GAAS/I,GAChBV,KA7JL,GA8JKsG,SAAUA,EACVhG,QAAS,kBAAMkL,EAAMlB,aAAanJ,KAP7BA,MA2DjB,cAAC,KAAD,CAAGqE,EAAG2G,IAA6B1G,EAAGiH,IAAtC,SACI,cAAC,GAAD,CACIlQ,MAAOgP,EAAMnH,IACbiC,SAAUkF,EAAMyB,YAChB3M,QAASkL,EAAMnB,mBC1NtB6C,GAA8B,SAAC1B,GACxC,OACI,cAAC,UAAD,CACIrK,GAAIqK,EAAMrK,GACVgH,GAAIqD,EAAMhG,EACV4C,GAAIoD,EAAM/F,EACV4C,EAAGmD,EAAMxL,KAAO,EAChB+H,OAAO,QACPC,YAAY,IACZ5D,KAAMoH,EAAM9K,SCPXsI,GAA8B,SAAC,GAQrC,IAPH7H,EAOE,EAPFA,GACAqE,EAME,EANFA,EACAC,EAKE,EALFA,EACAzF,EAIE,EAJFA,KACAU,EAGE,EAHFA,MACA4F,EAEE,EAFFA,SACAhG,EACE,EADFA,QAEA,OACI,cAAC,QAAD,CACIa,GAAIA,EACJqE,EAAGA,EAAIxF,EAAO,EACdyF,EAAGA,EAAIzF,EAAO,EACd6H,MAAO7H,EACP8H,OAAQ9H,EACR+H,OAAO,QACPC,YAAY,IACZjL,QAASuJ,EAAW,GAAM,EAC1BlC,KAAM1D,EAGNkH,QAAStH,EACTA,QAASA,M,SHpCTgL,O,6CAAAA,I,sBAAAA,Q,+lBIeL,IAAM6B,GAA4C,SAAC3B,GACtD,IAAQ4B,EAA6B5B,EAA7B4B,UAAcC,EAAtB,IAAqC7B,EAArC,IAEA,OAAQ4B,GACJ,KAAK9B,GAAUgC,oBACX,OAAO,cAAC,GAAD,MAAsBD,IAEjC,KAAK/B,GAAUiC,QACX,OAAO,cAAC,GAAD,MAAaF,IAExB,QAEI,OADAG,QAAQC,KAAK,kBACN,O,qkBClBnB,IA0Be9B,GA1B4B,SAAC,GAAuB,IAAD,EAApB1K,EAAoB,EAApBA,EAAGC,EAAiB,EAAjBA,IAAKM,EAAY,EAAZA,MAC5CxD,EAAUkD,EAAIgC,UAAUyC,KAAI,SAACxE,GAAD,MAAS,CACvCA,KACAkC,KAAMlC,MAEF2B,EAAetB,EAAfsB,KAAMwB,EAAS9C,EAAT8C,KACRoJ,EAAgBpC,GAAUiC,QAC1BlM,EAASJ,EAAEI,OAAOsE,KAAI,SAACgI,GAAD,UAAC,MACtBA,GADqB,IAExBxC,MAAOnK,EAAUC,EAAGC,EAAKyM,EAAExM,SAG/B,OACI,cAAC,GAAD,CACIiM,UAAWM,EACX1P,QAASA,EACT4D,cAAeV,EAAIU,cACnByC,IAAG,SAAEpD,EAAEoD,KAAJ,EAAW,EACdiG,aAAcxH,EACduH,WAAY/F,EACZ8F,SAAUhI,EAAUnB,GACpBI,OAAQA,K,oBC1BLuM,GAAgB,Q,KAAhBA,EAASC,GAAeC,KAAcC,K,gmCCwCtCC,G,kCAtCX,WAAY3T,GAAkB,wCAAP0I,EAAM,iCAANA,EAAM,uDAGd1I,GAHc,IAIjB4T,WAAY,SAACC,EAAW7L,EAAWV,GAAvB,MAA6C,CACrDwM,UAAW,CACPC,QAAS,SAACnN,EAAUoB,GAChB,OAAwC,IAAjCpB,EAAEjD,QAAQ2D,GAAUsC,UAE/BoK,OAAQ,IAEZC,UAAW,CACPF,QAAS,SAACnN,EAAUoB,GAChB,OAAwC,IAAjCpB,EAAEjD,QAAQ2D,GAAUsC,UAE/BoK,OAAQ,IAEZE,UAAW,CACPH,QAAS,SAACnN,EAAUoB,GAChB,OAAwC,IAAjCpB,EAAEjD,QAAQ2D,GAAUsC,UAE/BoK,OAAQ,IAEZG,WAAY,CACRJ,QAAS,SAACnN,EAAUoB,GAChB,OAAoB,OAAbpB,EAAEK,QAEb+M,OAAQ,KAGhBI,WAAY,EACZC,aAAc,KA/BG,OAiClB3L,I,sBAlCS4L,G,qkBCWxB,IA2BeC,GA3BA,SAAC,GAAgD,IAA9C5Q,EAA6C,EAA7CA,QAASW,EAAoC,EAApCA,KAAME,EAA8B,EAA9BA,KAAME,EAAwB,EAAxBA,KAAME,EAAkB,EAAlBA,KACnC4P,EAAUlQ,GAAQE,GAAQE,GAAQE,EAClC6P,EAAIC,mBAAQ,WACd,IAAMC,EAAI,eACFrQ,GAAQ,CAAE,EAAKqP,KACfnP,GAAQ,CAAE,EAAKmP,KACfjP,GAAQ,CAAE,EAAKiP,KACf/O,GAAQ,CAAE,EAAK+O,KAEjBiB,EAAcJ,EACdK,YAAM,CACFF,cAEJpM,EACN,OAAOuM,GAAO,CACV/L,KAAMgM,EACNhD,MAAOT,GACP0D,MAAO,CACHC,gBAAgB,GAEpBC,WAAYvR,EACZiR,kBAEL,CAACjR,EAASW,EAAME,EAAME,EAAME,IAC/B,OAAO,cAAC6P,EAAD,CAAGU,SAAUX,EAAU,SAAMjM,KCTzB6M,GAzBF,SAAC,GAAyD,IAAvD7R,EAAsD,EAAtDA,WACZ,EADkE,EAA1C8R,MAC0BC,OAA1C3R,EAAR,EAAQA,QAASW,EAAjB,EAAiBA,KAAME,EAAvB,EAAuBA,KAAME,EAA7B,EAA6BA,KAAME,EAAnC,EAAmCA,KACnC,OACI,eAAC4L,EAAA,EAAD,CAAKtL,UAAQ,EAACH,GAAG,gBAAgB9B,KAAM,EAAG+B,eAAe,SAAzD,UACI,cAAC,GAAD,CACIrB,QAASA,EACTW,KAAMA,EACNE,KAAMA,EACNE,KAAMA,EACNE,KAAMA,IAEV,cAAC4L,EAAA,EAAD,CAAK+E,aAAW,EAACC,eAAa,EAACC,SAAS,WAAWC,IAAI,IAAvD,SACI,cAACC,EAAA,EAAD,CACItP,MAAM,QACNV,KAAK,KACLiQ,MAAO,CACH5M,KAAM,QAEV/C,QAAS,kBAAM1C,EAAWiD,SAAS,qBChBjDqP,GAAYC,cAcHC,GAZI,kBACf,cAACC,EAAA,EAAD,UACI,eAACH,GAAUI,UAAX,CACIC,cAAe,CACXC,aAAa,GAFrB,UAII,cAACN,GAAUO,OAAX,CAAkBpN,KAAK,WAAWqN,UAAW/S,IAC7C,cAACuS,GAAUO,OAAX,CAAkBpN,KAAK,OAAOqN,UAAWjB,WCDtCkB,IAVH,WACR,OACI,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,GAAD,U","file":"static/js/app.338e55a3.chunk.js","sourcesContent":["import type { PlayerID } from 'boardgame.io'\n\nexport enum Color {\n    Red = 'red',\n    Green = 'green',\n    Blue = 'blue',\n    Yellow = 'yellow',\n}\n\nexport interface Token {\n    id: number\n    color: Color\n    playerId: string\n    sector: FieldSector\n    fieldId: number\n}\n\nexport interface TokenUI extends Token {\n    error: string | false\n}\n\nexport type Players = {\n    [key: PlayerID]: {\n        name: string\n        start: {\n            [color in Color]: boolean\n        }\n        end: {\n            [color in Color]: boolean\n        }\n        finish: [boolean, boolean, boolean, boolean]\n        finished: number\n    }\n}\n\nexport interface State {\n    size: number\n    tokens: Token[]\n    squares: (number | null)[]\n    die: number | null\n    moves: number\n    kicked: number | null\n    players: Players\n}\n\nexport enum FieldSector {\n    START = 'start',\n    LAP = 'lap',\n    END = 'end',\n}\n\nexport interface PlayingBoardDefinition {\n    maxPlayers: number\n    tokensPerPlayer: number\n    allFields: number\n    /** Start field id for each player. */\n    startField: number[]\n    /**\n     * How many fields the player needs to go to reach home.\n     * If first field is 0, the last field is this number.\n     */\n    fieldsToHome: number\n}\n\nexport interface GenericPlayingBoardProps {\n    players: {\n        id: string\n        name: string\n    }[]\n    currentPlayer: string\n    die: number\n    dieError: string | false\n    tokens: TokenUI[]\n    onTokenPress: (tokenId: number) => void\n    onDiePress: () => void\n}\n\nexport interface Point {\n    x: number\n    y: number\n}\n","import React from 'react'\nimport { extendTheme, INativebaseConfig, NativeBaseProvider } from 'native-base'\nimport { MaterialCommunityIcons } from '@native-base/icons'\n\nconst config: INativebaseConfig = {\n    strictMode: 'warn',\n}\n\nconst theme = extendTheme({\n    colors: {\n        primary: {\n            50: '#e6f7fd',\n            100: '#c5e5ec',\n            200: '#a3d3dd',\n            300: '#80c2d1',\n            400: '#5eb1c3',\n            500: '#4797aa',\n            600: '#367584',\n            700: '#26545f',\n            800: '#13333a',\n            900: '#001216',\n        },\n    },\n    components: {\n        Icon: {\n            defaultProps: {\n                as: MaterialCommunityIcons,\n            },\n        },\n    },\n    config: {\n        useSystemColorMode: false,\n    },\n})\n\nconst Theme: React.FC = ({ children }) => (\n    <NativeBaseProvider theme={theme} config={config}>\n        {children}\n    </NativeBaseProvider>\n)\n\nexport default Theme\n","import React, { useEffect, useState } from 'react'\nimport { syncStorage } from 'use-state-persist'\n\nconst Storage: React.FC = ({ children }) => {\n    const [loading, setLoading] = useState(true)\n    useEffect(() => {\n        syncStorage.init().then(() => {\n            setLoading(false)\n        })\n    }, [])\n    return <>{loading ? null : children}</>\n}\n\nexport default Storage\n","import React from 'react'\nimport { PresenceTransition, HStack, Input, Checkbox } from 'native-base'\n\ninterface Props {\n    visible?: boolean\n    value: string\n    placeholder: string\n    onChange: (value: string) => void\n    bot: boolean\n    setBot: (value: boolean) => void\n}\n\nconst PlayerInput: React.FC<Props> = ({\n    visible = true,\n    value,\n    placeholder,\n    onChange,\n    bot,\n    setBot,\n}) => (\n    <PresenceTransition\n        visible={visible}\n        initial={{\n            opacity: 0,\n        }}\n        animate={{\n            opacity: 1,\n            transition: {\n                duration: 250,\n            },\n        }}>\n        <HStack alignItems=\"center\">\n            <Input\n                placeholder={placeholder}\n                flex={1}\n                value={value}\n                onChangeText={onChange}\n            />\n            <Checkbox value=\"bot\" isChecked={bot} onChange={setBot} m=\"3\">\n                Bot{bot}\n            </Checkbox>\n        </HStack>\n    </PresenceTransition>\n)\n\nexport default PlayerInput\n","import React from 'react'\nimport { Heading, Button, ScrollView, VStack, Text } from 'native-base'\nimport { useStatePersist } from 'use-state-persist'\n\nimport PlayerInput from '../components/PlayerInput'\nimport { RootStackScreenProps } from '../navigation/types'\n\nconst Settings = ({ navigation }: RootStackScreenProps<'Settings'>) => {\n    const [type, setType] = useStatePersist('TYPE', 'local')\n    const [players, setPlayers] = useStatePersist('PLAYERS', '2')\n    const [theme, setTheme] = useStatePersist('THEME', 'classic')\n    const [player1, setPlayer1] = useStatePersist('PLAYER1', '')\n    const [player2, setPlayer2] = useStatePersist('PLAYER2', '')\n    const [player3, setPlayer3] = useStatePersist('PLAYER3', '')\n    const [player4, setPlayer4] = useStatePersist('PLAYER4', '')\n    const [bot1, setBot1] = useStatePersist('BOT1', false)\n    const [bot2, setBot2] = useStatePersist('BOT2', true)\n    const [bot3, setBot3] = useStatePersist('BOT3', true)\n    const [bot4, setBot4] = useStatePersist('BOT4', true)\n    return (\n        <VStack\n            flex={1}\n            bg=\"lightBlue.200\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            alignContent={'stretch'}>\n            <VStack\n                safeArea\n                bg=\"white\"\n                flex={1}\n                borderRadius={{ sm: 20 }}\n                maxW={480}\n                w=\"100%\"\n                m={{ sm: 5 }}>\n                <ScrollView h=\"100px\" p={5}>\n                    <Heading size=\"4xl\" textAlign=\"center\">\n                        Clovece\n                    </Heading>\n                    <Heading size=\"lg\" my=\"3\">\n                        Game type\n                    </Heading>\n                    <Button.Group isAttached>\n                        <Button\n                            onPress={() => setType('local')}\n                            variant={type === 'local' ? 'solid' : 'outline'}>\n                            Local\n                        </Button>\n                        <Button\n                            onPress={() => setType('online')}\n                            variant={type === 'online' ? 'solid' : 'outline'}\n                            isDisabled>\n                            Online*\n                        </Button>\n                    </Button.Group>\n                    <Heading size=\"lg\" my=\"3\">\n                        Number of players\n                    </Heading>\n                    <Button.Group isAttached>\n                        <Button\n                            onPress={() => setPlayers('2')}\n                            variant={players === '2' ? 'solid' : 'outline'}>\n                            2\n                        </Button>\n                        <Button\n                            onPress={() => setPlayers('3')}\n                            variant={players === '3' ? 'solid' : 'outline'}\n                            isDisabled>\n                            3*\n                        </Button>\n                        <Button\n                            onPress={() => setPlayers('4')}\n                            variant={players === '4' ? 'solid' : 'outline'}>\n                            4\n                        </Button>\n                    </Button.Group>\n                    <Heading size=\"lg\" my=\"3\">\n                        Theme\n                    </Heading>\n                    <Button.Group isAttached>\n                        <Button\n                            onPress={() => setTheme('classic')}\n                            variant={theme === 'classic' ? 'solid' : 'outline'}>\n                            Classic\n                        </Button>\n                        <Button\n                            onPress={() => setTheme('modern')}\n                            variant={theme === 'modern' ? 'solid' : 'outline'}\n                            isDisabled>\n                            Modern*\n                        </Button>\n                    </Button.Group>\n                    <Heading size=\"lg\" my=\"3\">\n                        Players\n                    </Heading>\n                    <PlayerInput\n                        value={player1}\n                        placeholder=\"Player 1\"\n                        onChange={setPlayer1}\n                        bot={bot1}\n                        setBot={setBot1}\n                    />\n                    <PlayerInput\n                        visible={+players >= 2}\n                        value={player2}\n                        placeholder=\"Player 2\"\n                        onChange={setPlayer2}\n                        bot={bot2}\n                        setBot={setBot2}\n                    />\n                    <PlayerInput\n                        visible={+players >= 3}\n                        value={player3}\n                        placeholder=\"Player 3\"\n                        onChange={setPlayer3}\n                        bot={bot3}\n                        setBot={setBot3}\n                    />\n                    <PlayerInput\n                        visible={+players >= 4}\n                        value={player4}\n                        placeholder=\"Player 4\"\n                        onChange={setPlayer4}\n                        bot={bot4}\n                        setBot={setBot4}\n                    />\n                    <Text color={'gray.400'}>\n                        *Stay tuned for future version\n                    </Text>\n                </ScrollView>\n                <Button\n                    size=\"lg\"\n                    mx={5}\n                    mb={5}\n                    onPress={() =>\n                        navigation.navigate('Play', {\n                            players: +players,\n                            bot1,\n                            bot2: +players > 1 && bot2,\n                            bot3: +players > 2 && bot3,\n                            bot4: +players > 3 && bot4,\n                        })\n                    }>\n                    Start game\n                </Button>\n            </VStack>\n        </VStack>\n    )\n}\n\nexport default Settings\n","import { Ctx, Move } from 'boardgame.io'\nimport { INVALID_MOVE } from 'boardgame.io/core'\n\nimport { SEGMENT_SIZE } from '../constants'\nimport { FieldSector, State } from '../types'\n\nconst START_SQUARES = [0, 2 * SEGMENT_SIZE, 1 * SEGMENT_SIZE, 3 * SEGMENT_SIZE]\nconst EXIT_SQUARES = [\n    4 * SEGMENT_SIZE - 1,\n    2 * SEGMENT_SIZE - 1,\n    1 * SEGMENT_SIZE - 1,\n    3 * SEGMENT_SIZE - 1,\n]\n\nexport const moveError = (G: State, ctx: Ctx, id: number): false | string => {\n    const token = G.tokens[id]\n    if (G.kicked !== null) {\n        return 'Select which player gets kicked out token before continue.'\n    }\n    if (!token) {\n        throw new Error('id is undefined')\n    }\n    if (G.moves !== 6 && token.sector === FieldSector.START) {\n        return 'Throw 6 on dice in order to take token from staring zone.'\n    }\n    if (\n        token.sector === FieldSector.START &&\n        token.playerId !== ctx.currentPlayer\n    ) {\n        return 'You can only select token from your own starting zone.'\n    }\n    if (\n        token.sector === FieldSector.END &&\n        token.playerId !== ctx.currentPlayer\n    ) {\n        return 'You can only move tokens in own endzone.'\n    }\n    if (G.moves === 0) {\n        return 'Throw the die first to determine how many steps you can move.'\n    }\n    if (\n        token.sector !== FieldSector.START &&\n        G.players[ctx.currentPlayer].start[token.color]\n    ) {\n        return 'You need to bring ${token.color} token from staring zone to game so that you can move with any ${token.color} tokens.'\n    }\n    if (\n        token.sector === FieldSector.LAP &&\n        G.players[ctx.currentPlayer].end[token.color]\n    ) {\n        return 'You cannot move this token. Token of this color is already in your endzone.'\n    }\n    if (token.sector === FieldSector.END && token.fieldId + G.moves > 3) {\n        return 'You cannot move this token. There is not enough squares to move.'\n    }\n    if (\n        token.sector === FieldSector.END &&\n        G.players[ctx.currentPlayer].finish[token.fieldId + G.moves]\n    ) {\n        return 'You cannot move this token. You would land on your own token in the finish.'\n    }\n\n    if (token.sector === FieldSector.LAP) {\n        let moves = G.moves\n        let fieldId = token.fieldId\n        const exitSquare = EXIT_SQUARES[+ctx.currentPlayer]\n        while (moves > 0) {\n            fieldId++\n            moves--\n            if (fieldId === exitSquare) {\n                break\n            }\n        }\n        if (moves > 0) {\n            if (moves > 4) {\n                return 'You cannot move this token. You would land behind finish.'\n            }\n            if (G.players[ctx.currentPlayer].finish[moves - 1]) {\n                return 'You cannot move this token. You would land on your own token in the finish.'\n            }\n        }\n    }\n    return false\n}\n\nexport const move: Move<State> = (G, ctx, id: number) => {\n    if (moveError(G, ctx, id)) {\n        return INVALID_MOVE\n    }\n    const token = G.tokens[id]\n    if (token.sector === FieldSector.START) {\n        token.sector = FieldSector.LAP\n        const s = START_SQUARES[ctx.playOrderPos]\n        if (G.squares[s] !== null) {\n            G.kicked = G.squares[s]\n        }\n        G.moves = 0\n        G.squares[s] = id\n        G.players[ctx.currentPlayer].start[token.color] = false\n        token.fieldId = s\n    } else if (token.sector === FieldSector.END) {\n        G.players[ctx.currentPlayer].finish[token.fieldId] = false\n        token.fieldId += G.moves\n        G.players[ctx.currentPlayer].finish[token.fieldId] = true\n    } else {\n        const exitSquare = EXIT_SQUARES[+ctx.currentPlayer]\n        G.squares[token.fieldId] = null\n        let newFieldId = token.fieldId\n        while (G.moves > 0) {\n            G.moves--\n            newFieldId = (newFieldId + 1) % G.size\n            if (newFieldId === exitSquare) {\n                break\n            }\n        }\n        if (G.moves > 0) {\n            token.sector = FieldSector.END\n            token.fieldId = G.moves - 1\n            token.playerId = ctx.currentPlayer\n            G.players[ctx.currentPlayer].finish[token.fieldId] = true\n            G.players[ctx.currentPlayer].end[token.color] = true\n            G.players[ctx.currentPlayer].finished++\n        } else {\n            token.fieldId = newFieldId\n            if (G.squares[newFieldId] !== null) {\n                G.kicked = G.squares[newFieldId]\n            }\n            G.squares[newFieldId] = token.id\n        }\n    }\n    G.moves = 0\n    if (G.die !== 6) {\n        ctx.events?.endTurn()\n    }\n}\n","import { Ctx, Move } from 'boardgame.io'\nimport { INVALID_MOVE } from 'boardgame.io/core'\n\nimport enumerate from '../helpers/enumerate'\nimport { State } from '../types'\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const rollError = (G: State, _ctx: Ctx): false | string => {\n    if (G.moves !== 0) {\n        return 'Finish your move before before rolling die.'\n    }\n    if (G.kicked !== null) {\n        return 'Select which player gets kicked out token before rolling die again.'\n    }\n    return false\n}\n\nexport const roll: Move<State> = (G, ctx) => {\n    if (rollError(G, ctx)) {\n        return INVALID_MOVE\n    }\n    if (!ctx.random) {\n        throw new Error('Random is undefined')\n    }\n    G.die = ctx.random.D6()\n    G.moves = G.die\n    if (enumerate(G, ctx).length == 0) {\n        G.moves = 0\n        ctx.events?.endTurn()\n    }\n}\n","import { Ctx, Move } from 'boardgame.io'\nimport { INVALID_MOVE } from 'boardgame.io/core'\n\nimport { Color, FieldSector, State } from '../types'\n\nconst color2FieldId = {\n    [Color.Red]: 0,\n    [Color.Green]: 1,\n    [Color.Blue]: 2,\n    [Color.Yellow]: 3,\n}\n\nexport const selectError = (\n    G: State,\n    _ctx: Ctx,\n    playerId: string,\n): false | string => {\n    if (playerId === undefined) {\n        throw new Error('PlayerId is undefined')\n    }\n    if (G.kicked === null) {\n        return 'Nothing to select. Token need to be kicked out first.'\n    }\n    const token = G.tokens[G.kicked]\n    if (G.players[playerId].start[token.color]) {\n        return `Player ${playerId} already has token of ${token.color} color in their start.`\n    }\n    if (G.players[playerId].end[token.color]) {\n        return `Player ${playerId} already has token of ${token.color} color in their finish.`\n    }\n    return false\n}\n\nexport const select: Move<State> = (G, ctx, playerId: string) => {\n    if (selectError(G, ctx, playerId)) {\n        return INVALID_MOVE\n    }\n    if (G.kicked === null) {\n        return INVALID_MOVE\n    }\n    const token = G.tokens[G.kicked]\n    token.sector = FieldSector.START\n    token.playerId = playerId\n    token.fieldId = color2FieldId[token.color]\n    G.players[playerId].start[token.color] = true\n    G.kicked = null\n    if (G.die !== 6) {\n        ctx.events?.endTurn()\n    }\n}\n","import { Ctx } from 'boardgame.io'\n\nimport { moveError } from '../moves/move'\nimport { rollError } from '../moves/roll'\nimport { selectError } from '../moves/select'\nimport { State } from '../types'\n\nexport default (G: State, ctx: Ctx) => {\n    const moves = []\n    if (!rollError(G, ctx)) {\n        moves.push({ move: 'roll', args: [] })\n    }\n    for (let i = 0; i < G.tokens.length; i++) {\n        if (!moveError(G, ctx, i)) {\n            moves.push({ move: 'move', args: [i] })\n        }\n    }\n    ctx.playOrder.forEach((p) => {\n        if (!selectError(G, ctx, p)) {\n            moves.push({ move: 'select', args: [p] })\n        }\n    })\n    return moves\n}\n","import { Ctx } from 'boardgame.io'\n\nimport { SEGMENT_SIZE } from '../constants'\nimport { Token, Color, FieldSector, Players } from '../types'\n\nexport default (ctx: Ctx) => {\n    const tokens: Token[] = ctx.playOrder.reduce<Token[]>(\n        (prev, p, i) => [\n            ...prev,\n            {\n                id: i * 4,\n                color: Color.Red,\n                playerId: p,\n                sector: FieldSector.START,\n                fieldId: 0,\n            },\n            {\n                id: i * 4 + 1,\n                color: Color.Green,\n                playerId: p,\n                sector: FieldSector.START,\n                fieldId: 1,\n            },\n            {\n                id: i * 4 + 2,\n                color: Color.Blue,\n                playerId: p,\n                sector: FieldSector.START,\n                fieldId: 2,\n            },\n            {\n                id: i * 4 + 3,\n                color: Color.Yellow,\n                playerId: p,\n                sector: FieldSector.START,\n                fieldId: 3,\n            },\n        ],\n        [],\n    )\n    const size = 4 * SEGMENT_SIZE\n    const players: Players = ctx.playOrder.reduce(\n        (p, v) => ({\n            ...p,\n            [v]: {\n                name: '',\n                start: {\n                    red: true,\n                    green: true,\n                    blue: true,\n                    yellow: true,\n                },\n                end: {\n                    red: false,\n                    green: false,\n                    blue: false,\n                    yellow: false,\n                },\n                finish: [false, false, false, false],\n                finished: 0,\n            },\n        }),\n        {},\n    )\n\n    return {\n        size,\n        tokens,\n        squares: new Array(size).fill(null),\n        kicked: null,\n        die: null,\n        moves: 0,\n        players,\n    }\n}\n","import type { Game } from 'boardgame.io'\n\nimport enumerate from './helpers/enumerate'\nimport endIf from './helpers/endIf'\nimport setup from './helpers/setup'\nimport { move } from './moves/move'\nimport { roll } from './moves/roll'\nimport { select } from './moves/select'\nimport { State } from './types'\n\nconst game: Game<State> = {\n    name: 'Clovece',\n    seed: 0,\n    minPlayers: 2,\n    maxPlayers: 4,\n    setup,\n    moves: {\n        roll,\n        move,\n        select,\n    },\n    endIf,\n    ai: {\n        enumerate,\n    },\n}\n\nexport default game\n","import { Ctx } from 'boardgame.io'\n\nimport { State } from '../types'\n\nexport default (G: State, ctx: Ctx) => {\n    for (let i = 0; i < ctx.playOrder.length; i++) {\n        if (G.players[ctx.playOrder[i]].finished === 4) {\n            return { winner: ctx.playOrder[i] }\n        }\n    }\n}\n","import { Point } from './types'\n\nexport const stepper = (\n    start: Point,\n    walk: string,\n    stepSize: number,\n    skipFirst = true,\n) => {\n    let { x, y } = start\n    return walk.split('').map((d) => {\n        const oldX = x\n        const oldY = y\n        if (d === 'U') {\n            y -= stepSize\n        } else if (d === 'D') {\n            y += stepSize\n        } else if (d === 'L') {\n            x -= stepSize\n        } else if (d === 'R') {\n            x += stepSize\n        } else if (d === '↘') {\n            x += stepSize\n            y += stepSize\n        } else if (d === '↖') {\n            x -= stepSize\n            y -= stepSize\n        } else if (d === '↙') {\n            x -= stepSize\n            y += stepSize\n        } else if (d === '↗') {\n            x += stepSize\n            y -= stepSize\n        } else {\n            throw new Error(`Unknown direction \"${d}\"`)\n        }\n        if (skipFirst) {\n            return { x, y }\n        }\n        return { x: oldX, y: oldY }\n    })\n}\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport { Animated } from 'react-native'\nimport { Rect, G, Circle } from 'react-native-svg'\n\ninterface Props {\n    x: number\n    y: number\n    size: number\n    value: number\n    disabled: boolean\n    onPress: () => void\n}\n\nconst SIZE = 200\n\nconst AnimatedG = Animated.createAnimatedComponent(G)\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle)\n\nconst inputRange = [0, 59, 60, 119, 120, 179, 180, 239, 240, 299, 300, 360]\n\nconst Die: React.FC<Props> = ({ x, y, size, value, disabled, onPress }) => {\n    const v = useRef(new Animated.Value(value)).current\n    const v60 = v.interpolate({ inputRange: [1, 6], outputRange: [0, 360] })\n    const scale = useRef(new Animated.Value(size / 200)).current\n\n    const d1 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],\n    })\n    const d2 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\n    })\n    const d3 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    })\n    const d4 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    })\n    const d5 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\n    })\n    const d6 = v60.interpolate({\n        inputRange,\n        outputRange: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],\n    })\n    const d7 = v60.interpolate({\n        inputRange,\n        outputRange: [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],\n    })\n    useEffect(() => {\n        v.setValue(value)\n    }, [disabled, value])\n\n    const roll = useCallback(() => {\n        if (!disabled) {\n            Animated.parallel([\n                Animated.sequence([\n                    Animated.timing(scale, {\n                        toValue: (size / SIZE) * 1.2,\n                        duration: 500,\n                        useNativeDriver: false,\n                    }),\n                    Animated.timing(scale, {\n                        toValue: size / SIZE,\n                        duration: 500,\n                        useNativeDriver: false,\n                    }),\n                ]),\n                Animated.sequence([\n                    Animated.timing(v, {\n                        toValue: 6,\n                        duration: 500,\n                        useNativeDriver: true,\n                    }),\n                    Animated.timing(v, {\n                        toValue: 1,\n                        duration: 500,\n                        useNativeDriver: true,\n                    }),\n                ]),\n            ]).start(() => {\n                onPress()\n            })\n        } else {\n            onPress()\n        }\n    }, [disabled])\n\n    return (\n        <G x={x} y={y}>\n            <AnimatedG scale={scale} onPress={roll} onClick={roll}>\n                <Rect\n                    x={-100}\n                    y={-100}\n                    width={200}\n                    height={200}\n                    stroke=\"gray\"\n                    strokeWidth={1}\n                    rx={20}\n                    ry={20}\n                    fill=\"white\"\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={-60}\n                    cy={-60}\n                    r={25}\n                    opacity={d1}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={0}\n                    cy={-60}\n                    r={25}\n                    opacity={d2}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={60}\n                    cy={-60}\n                    r={25}\n                    opacity={d3}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={-60}\n                    cy={60}\n                    r={25}\n                    opacity={d4}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={0}\n                    cy={60}\n                    r={25}\n                    opacity={d5}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={60}\n                    cy={60}\n                    r={25}\n                    opacity={d6}\n                />\n                <AnimatedCircle\n                    fill=\"black\"\n                    cx={0}\n                    cy={0}\n                    r={25}\n                    opacity={d7}\n                />\n            </AnimatedG>\n        </G>\n    )\n}\n\nexport default Die\n","import React from 'react'\nimport { Circle } from 'react-native-svg'\n\ninterface Props {\n    x: number\n    y: number\n}\nconst Square = ({ x, y }: Props) => {\n    return (\n        <Circle\n            cx={x}\n            cy={y}\n            r={30}\n            fill=\"white\"\n            stroke=\"#333\"\n            strokeWidth={3}\n        />\n    )\n}\n\nexport default Square\n","import React from 'react'\nimport { Path } from 'react-native-svg'\n\nimport { Point } from '../../../types'\nimport Square from './Square'\n\ninterface Props {\n    data: Point[]\n}\n\nconst Lap = ({ data }: Props) => {\n    return (\n        <>\n            <Path\n                d={\n                    data\n                        .map(\n                            ({ x, y }, i) =>\n                                `${i === 0 ? 'M' : 'L'} ${x} ${y} `,\n                        )\n                        .join('') + 'Z'\n                }\n                stroke=\"#333\"\n                strokeWidth=\"30\"\n                fill=\"transparent\"\n            />\n            {data.map(({ x, y }, i) => (\n                <Square x={x} y={y} key={i} />\n            ))}\n        </>\n    )\n}\n\nexport default Lap\n","import React from 'react'\nimport { Path, PathProps } from 'react-native-svg'\nimport { Point } from '../../../types'\n\ninterface LineProps extends PathProps {\n    data: Point[]\n    closed?: boolean\n}\n\nconst Road = ({ data, closed, ...rest }: LineProps) => {\n    return (\n        <Path\n            d={\n                data\n                    .map(({ x, y }, i) => `${i === 0 ? 'M' : 'L'} ${x} ${y} `)\n                    .join('') + (closed ? 'Z' : '')\n            }\n            fill=\"transparent\"\n            stroke=\"#333\"\n            strokeWidth={30}\n            {...rest}\n        />\n    )\n}\n\nexport default Road\n","import React from 'react'\n\nimport { Point } from '../../../types'\nimport Road from './Road'\nimport Square from './Square'\n\ninterface Props {\n    data: Point[]\n}\n\nconst End = ({ data }: Props) => {\n    return (\n        <>\n            <Road data={data} stroke=\"#333\" strokeWidth={30} />\n            {data.map(({ x, y }, i) => (\n                <Square key={i} x={x} y={y} />\n            ))}\n        </>\n    )\n}\n\nexport default End\n","import React, { useEffect, useRef } from 'react'\nimport { Animated } from 'react-native'\nimport { Circle, G, Path } from 'react-native-svg'\n\ninterface TokenProps {\n    x: number\n    y: number\n    size: number\n    color: string\n    disabled: boolean\n    onPress: () => void\n}\n\nconst AG = Animated.createAnimatedComponent(G)\nconst ACircle = Animated.createAnimatedComponent(Circle)\n\nexport const Token: React.FC<TokenProps> = ({\n    x,\n    y,\n    size,\n    color,\n    disabled,\n    onPress,\n}) => {\n    const xy = useRef(new Animated.ValueXY({ x, y })).current\n    const animation = useRef(new Animated.Value(0)).current\n    const glow = animation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 30],\n    })\n    const wiggle = animation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, -10],\n    })\n    useEffect(() => {\n        Animated.timing(xy, {\n            toValue: { x, y },\n            duration: 400,\n            useNativeDriver: false,\n        }).start()\n    }, [x, y])\n    useEffect(() => {\n        if (disabled) {\n            animation.setValue(0)\n            animation.stopAnimation()\n        } else {\n            Animated.loop(\n                Animated.sequence([\n                    Animated.timing(animation, {\n                        toValue: 1,\n                        duration: 500,\n                        useNativeDriver: false,\n                    }),\n                    Animated.timing(animation, {\n                        toValue: 0,\n                        duration: 500,\n                        useNativeDriver: false,\n                    }),\n                ]),\n            ).start()\n        }\n    }, [disabled])\n    return (\n        <AG x={xy.x} y={xy.y} onClick={onPress} onPress={onPress}>\n            <ACircle\n                r={glow}\n                fill={color}\n                fillOpacity={0.2}\n                strokeWidth={disabled ? 2 : 4}\n                opacity={disabled ? 0.7 : 1}\n            />\n            <AG y={wiggle}>\n                <Path\n                    d=\"M10,-20 -10,-20 -15,0 a15,15 0 0,0 30,0 Z\"\n                    stroke=\"black\"\n                    strokeWidth={disabled ? 2 : 4}\n                    opacity={disabled ? 0.7 : 1}\n                    fill={color}\n                />\n                <Circle cy={-size} r={14} fill=\"white\" />\n                <Circle\n                    cy={-size}\n                    r={14}\n                    fill={color}\n                    stroke=\"black\"\n                    strokeWidth={disabled ? 2 : 4}\n                    opacity={disabled ? 0.7 : 1}\n                />\n            </AG>\n        </AG>\n    )\n}\n","import { Color } from '../../types'\n\nexport function getColor(playerColor: Color, light = false) {\n    switch (playerColor) {\n        case Color.Red:\n            return light ? '#ff8080' : '#bf202f'\n\n        case Color.Green:\n            return light ? '#29b376' : '#006f3c'\n\n        case Color.Blue:\n            return light ? '#8080ff' : '#274b96'\n\n        case Color.Yellow:\n            return light ? '#ffff80' : '#faa73e'\n    }\n}\n","import React from 'react'\n\nimport { Point } from '../../../types'\nimport Square from './Square'\n\ninterface Props {\n    data: Point[]\n}\n\nconst Start = ({ data }: Props) => {\n    return (\n        <>\n            {data.map(({ x, y }, i) => (\n                <Square x={x} y={y} key={i} />\n            ))}\n        </>\n    )\n}\n\nexport default Start\n","import React from 'react'\nimport { useWindowDimensions } from 'react-native'\nimport { Box, useToast, VStack } from 'native-base'\nimport Svg, { Rect, G } from 'react-native-svg'\n\nimport { FieldSector, GenericPlayingBoardProps, Point } from '../../types'\nimport { stepper } from '../../utils'\nimport Die from '../components/Die'\nimport Lap from './components/Lap'\nimport End from './components/End'\nimport { Token } from './components/Token'\nimport { getColor } from './colors'\nimport Start from './components/Start'\nimport Road from './components/Road'\n\nconst WIDTH = 1000\nconst HEIGHT = 1000\nconst START = 350\nconst STEP = 90\nconst DIE_SIZE = 100\nconst TOKEN_SIZE = 30\nconst SQUARE_ZERO = {\n    x: -40,\n    y: 500 - STEP,\n}\n\nconst playerBox = stepper(\n    { x: START / 2, y: START / 2 },\n    '↘L↗D',\n    WIDTH - START,\n    false,\n)\n\ninterface Squares {\n    [FieldSector.START]: Point[][]\n    [FieldSector.LAP]: Point[]\n    [FieldSector.END]: Point[][]\n}\n\nconst lap = stepper(\n    SQUARE_ZERO,\n    'RRRRRUUUURRDDDDRRRRDDLLLLDDDDLLUUUULLLLU',\n    STEP,\n)\n\nconst start = [\n    stepper(\n        { x: START / 2 - STEP / 2, y: START / 2 - STEP / 2 },\n        'RDLU',\n        STEP,\n        false,\n    ),\n    stepper(\n        { x: WIDTH - START / 2 - STEP / 2, y: HEIGHT - START / 2 - STEP / 2 },\n        'RDLU',\n        STEP,\n        false,\n    ),\n    stepper(\n        { x: WIDTH - START / 2 - STEP / 2, y: START / 2 - STEP / 2 },\n        'RDLU',\n        STEP,\n        false,\n    ),\n    stepper(\n        { x: START / 2 - STEP / 2, y: HEIGHT - START / 2 - STEP / 2 },\n        'RDLU',\n        STEP,\n        false,\n    ),\n]\n\nconst exits = [39, 19, 9, 29]\n\nconst end = [\n    stepper(lap[39], 'RRRR', STEP),\n    stepper(lap[19], 'LLLL', STEP),\n    stepper(lap[9], 'DDDD', STEP),\n    stepper(lap[29], 'UUUU', STEP),\n]\n\nconst squares: Squares = {\n    [FieldSector.LAP]: lap,\n    [FieldSector.START]: start,\n    [FieldSector.END]: end,\n}\n\nconst Classic = ({\n    die,\n    dieError,\n    onDiePress,\n    tokens,\n    onTokenPress,\n    players,\n    currentPlayer,\n}: GenericPlayingBoardProps) => {\n    const { width, height } = useWindowDimensions()\n    const maxSize = Math.min(width, height)\n    const toast = useToast()\n    return (\n        <VStack safeArea alignItems=\"center\">\n            <Box w={maxSize} h={maxSize}>\n                <Svg\n                    height=\"100%\"\n                    width=\"100%\"\n                    viewBox={`0 0 ${WIDTH} ${HEIGHT}`}\n                    preserveAspectRatio=\"xMinYMin slice\">\n                    <Rect width=\"1000\" height=\"1000\" fill=\"#f5d9a1\" />\n                    <Rect\n                        x=\"10\"\n                        y=\"10\"\n                        width=\"980\"\n                        height=\"980\"\n                        strokeWidth=\"3\"\n                        stroke=\"black\"\n                        fill=\"transparent\"\n                    />\n                    <Rect\n                        width=\"1000\"\n                        height=\"1000\"\n                        strokeWidth=\"10\"\n                        stroke=\"#bb3630\"\n                        fill=\"transparent\"\n                    />\n                    {players.map((p, i) => (\n                        <React.Fragment key={i}>\n                            <G {...playerBox[i]}>\n                                <Rect\n                                    width={START / 2}\n                                    height={START / 2}\n                                    x={-START / 4}\n                                    y={-START / 4}\n                                    fill={\n                                        p.id === currentPlayer\n                                            ? 'yellow'\n                                            : 'transparent'\n                                    }\n                                    stroke=\"#333\"\n                                    strokeWidth={p.id === currentPlayer ? 4 : 0}\n                                    rx=\"30\"\n                                />\n                            </G>\n                            <Road\n                                data={[\n                                    squares.lap[exits[i]],\n                                    squares.end[i][0],\n                                ]}\n                            />\n                            <Start data={squares.start[i]} />\n                            <End data={squares.end[i]} />\n                        </React.Fragment>\n                    ))}\n                    <Lap data={squares.lap} />\n                    <Die\n                        x={WIDTH / 2}\n                        y={HEIGHT / 2}\n                        size={DIE_SIZE}\n                        value={die}\n                        disabled={!!dieError}\n                        onPress={() => {\n                            if (dieError) {\n                                toast.show({ title: dieError })\n                            } else {\n                                onDiePress()\n                            }\n                        }}\n                    />\n                    {tokens.map(\n                        ({ id, sector, fieldId, playerId, color, error }) => {\n                            const field =\n                                sector === FieldSector.LAP\n                                    ? squares[sector][fieldId]\n                                    : squares[sector][+playerId][fieldId]\n                            return (\n                                <Token\n                                    key={id}\n                                    x={field.x}\n                                    y={field.y}\n                                    color={getColor(color)}\n                                    size={TOKEN_SIZE}\n                                    disabled={!!error}\n                                    onPress={() => {\n                                        if (error) {\n                                            toast.show({\n                                                title: error,\n                                            })\n                                        } else {\n                                            onTokenPress(id)\n                                        }\n                                    }}\n                                />\n                            )\n                        },\n                    )}\n                </Svg>\n            </Box>\n        </VStack>\n    )\n}\n\nexport default Classic\n","import { PlayingBoardDefinition } from '../../types'\n\nexport const definition: PlayingBoardDefinition = {\n    maxPlayers: 2,\n    tokensPerPlayer: 4,\n    allFields: 12,\n    startField: [\n        0, // player 0\n        6, // player 1\n    ],\n    fieldsToHome: 9,\n}\n","import { Color } from '../../types'\n\nexport function getColor(playerColor: Color, light = false) {\n    switch (playerColor) {\n        case Color.Red:\n            return light ? '#ff8080' : '#bf202f'\n\n        case Color.Green:\n            return light ? '#29b376' : '#006f3c'\n\n        case Color.Blue:\n            return light ? '#8080ff' : '#274b96'\n\n        case Color.Yellow:\n            return light ? '#ffff80' : '#faa73e'\n    }\n}\n","import React from 'react'\nimport { G, Rect, Text } from 'react-native-svg'\n\ninterface StackProps {\n    x: number\n    y: number\n    width: number\n    height: number\n    title: string\n    color: string\n}\n\nexport const Stack: React.FC<StackProps> = (props) => {\n    return (\n        <G>\n            <Rect\n                x={props.x - props.width / 2}\n                y={props.y}\n                width={props.width}\n                height={props.height}\n                stroke=\"black\"\n                strokeWidth=\"2\"\n                fill={props.color}\n            />\n            <Text\n                x={props.x}\n                y={props.y + 40}\n                textAnchor=\"middle\"\n                stroke=\"black\"\n                fill=\"black\"\n                fontSize=\"40\"\n            >\n                {props.title}\n            </Text>\n        </G>\n    )\n}\n","export enum BoardType {\n    SMALL_BOARD_FOR_TWO,\n    CLASSIC,\n}\n","import React from 'react'\nimport Svg, { Line, Rect, G } from 'react-native-svg'\nimport { Field, definition, Token } from '.'\nimport { FieldSector, GenericPlayingBoardProps } from '../../types'\nimport Die from '../components/Die'\nimport { getColor } from './colors'\nimport { Stack } from './Stack'\n\nconst WHOLE_BOARD_WIDTH = 1000\nconst WHOLE_BOARD_HEIGHT = 1000\nconst WHOLE_BOARD_MARGIN = 20\n\nconst STACK_WIDTH = (WHOLE_BOARD_WIDTH - 2 * WHOLE_BOARD_MARGIN) / 2 - 40\nconst FIELD_SIZE = 80\nconst TOKEN_SIZE = 40\n\ninterface PositionAndColor {\n    x: number\n    y: number\n    color: string\n}\n\ninterface Fields {\n    [FieldSector.START]: PositionAndColor[][]\n    [FieldSector.LAP]: PositionAndColor[]\n    [FieldSector.END]: PositionAndColor[][]\n}\n\nexport const Board: React.FC<GenericPlayingBoardProps> = (props) => {\n    const fieldSpace = 0.5 * FIELD_SIZE\n    const boardWidth = 3 * (FIELD_SIZE + fieldSpace)\n    const boardHeight = boardWidth\n    const boardX = WHOLE_BOARD_WIDTH / 2 - boardWidth / 2\n    const boardY = 400\n\n    // helper array with all player ids\n    const FOR_ALL_PLAYERS = [...Array(definition.maxPlayers).keys()]\n    const [P0, P1] = FOR_ALL_PLAYERS\n\n    const stackData = [\n        { posX: 260, color: getColor(props.players[P0].color) },\n        { posX: 740, color: getColor(props.players[P1].color) },\n    ]\n\n    const fields: Fields = {\n        start: [\n            // player 0\n            [\n                { x: 40 + 1 * 55, y: 150, color: 'white' },\n                { x: 40 + 3 * 55, y: 150, color: 'white' },\n                { x: 40 + 5 * 55, y: 150, color: 'white' },\n                { x: 40 + 7 * 55, y: 150, color: 'white' },\n            ],\n            // player 1\n            [\n                { x: 520 + 1 * 55, y: 150, color: 'white' },\n                { x: 520 + 3 * 55, y: 150, color: 'white' },\n                { x: 520 + 5 * 55, y: 150, color: 'white' },\n                { x: 520 + 7 * 55, y: 150, color: 'white' },\n            ],\n        ],\n        end: FOR_ALL_PLAYERS.map((playerId) => {\n            return new Array(definition.tokensPerPlayer).fill(null).map(() => {\n                return {\n                    x: boardX,\n                    y: boardY,\n                    color: getColor(props.players[playerId].color),\n                }\n            })\n        }),\n        board: new Array(definition.allFields).fill(null).map(() => {\n            return { x: boardX, y: boardY, color: 'white' }\n        }),\n    }\n\n    // calculate home field positions\n    for (let i = 0; i < definition.tokensPerPlayer; i++) {\n        // player 0\n        fields.end[P0][i].x -= 1 * (fieldSpace + FIELD_SIZE)\n        fields.end[P0][i].y += (3 - i) * (fieldSpace + FIELD_SIZE)\n        // player 1\n        fields.end[P1][i].x += 4 * (fieldSpace + FIELD_SIZE)\n        fields.end[P1][i].y += i * (fieldSpace + FIELD_SIZE)\n    }\n\n    // update start field colors\n    FOR_ALL_PLAYERS.map((playerId) => {\n        fields.board[definition.startField[playerId]].color = getColor(\n            props.players[playerId].color,\n            true,\n        )\n    })\n\n    // calculate board field positions\n    for (let i = 1; i < 4; i++) {\n        // top row\n        fields.board[i].x += i * (fieldSpace + FIELD_SIZE)\n        // right row\n        fields.board[i + 3].x += 3 * (fieldSpace + FIELD_SIZE)\n        fields.board[i + 3].y += i * (fieldSpace + FIELD_SIZE)\n        // bottom row\n        fields.board[i + 6].x += (3 - i) * (fieldSpace + FIELD_SIZE)\n        fields.board[i + 6].y += 3 * (fieldSpace + FIELD_SIZE)\n        // left row\n        fields.board[(i + 9) % definition.allFields].y +=\n            (3 - i) * (fieldSpace + FIELD_SIZE)\n    }\n\n    const renderStacks = () => {\n        return FOR_ALL_PLAYERS.map((playerId) => {\n            return (\n                <Stack\n                    key={playerId}\n                    x={stackData[playerId].posX}\n                    y={50}\n                    color={stackData[playerId].color}\n                    width={STACK_WIDTH}\n                    height={2 * FIELD_SIZE}\n                    title={props.players[playerId].name}\n                />\n            )\n        })\n    }\n\n    const renderFields = (list: PositionAndColor[], idPrefix: string) => {\n        return list.map((field, idx) => {\n            return (\n                <Field\n                    key={idx}\n                    id={`${idPrefix}-${idx}`}\n                    x={field.x}\n                    y={field.y}\n                    color={field.color}\n                    size={FIELD_SIZE}\n                />\n            )\n        })\n    }\n\n    const renderAllFields = () => {\n        return [\n            FOR_ALL_PLAYERS.flatMap((playerId) => {\n                return [\n                    renderFields(\n                        fields[FieldSector.START][playerId],\n                        `start-${playerId}`,\n                    ),\n                    renderFields(\n                        fields[FieldSector.END][playerId],\n                        `end-${playerId}`,\n                    ),\n                ]\n            }),\n            renderFields(fields[FieldSector.LAP], 'fields'),\n        ]\n    }\n\n    const renderTokens = () => {\n        return props.tokens.map(\n            ({ id, sector, fieldId, playerId, color, disabled }) => {\n                const field =\n                    sector === FieldSector.LAP\n                        ? fields[sector][fieldId]\n                        : fields[sector][+playerId][fieldId]\n                return (\n                    <Token\n                        key={id}\n                        id={`token-${id}`}\n                        x={field.x}\n                        y={field.y}\n                        color={getColor(color)}\n                        size={TOKEN_SIZE}\n                        disabled={disabled}\n                        onPress={() => props.onTokenPress(id)}\n                    />\n                )\n            },\n        )\n    }\n\n    return (\n        <Svg\n            height=\"100%\"\n            width=\"100%\"\n            viewBox={`0 0 ${WHOLE_BOARD_WIDTH} ${WHOLE_BOARD_HEIGHT}`}>\n            <Rect\n                x={WHOLE_BOARD_MARGIN / 2}\n                y={WHOLE_BOARD_MARGIN / 2}\n                width={WHOLE_BOARD_WIDTH - WHOLE_BOARD_MARGIN}\n                height={WHOLE_BOARD_HEIGHT - WHOLE_BOARD_MARGIN}\n                stroke=\"gray\"\n                strokeWidth={WHOLE_BOARD_MARGIN}\n                fill=\"white\"\n            />\n            {renderStacks()}\n\n            {/* lines under board fields */}\n            <Rect\n                x={boardX}\n                y={boardY}\n                width={boardWidth}\n                height={boardHeight}\n                stroke=\"black\"\n                strokeWidth=\"2\"\n                fill=\"transparent\"\n            />\n            {FOR_ALL_PLAYERS.map((playerId) => {\n                const lastField =\n                    (definition.startField[playerId] +\n                        definition.fieldsToHome) %\n                    definition.allFields\n                return (\n                    <Line\n                        key={playerId}\n                        x1={fields.board[lastField].x}\n                        y1={fields.board[lastField].y}\n                        x2={fields.end[playerId][0].x}\n                        y2={fields.end[playerId][0].y}\n                        stroke=\"black\"\n                        strokeWidth=\"2\"\n                    />\n                )\n            })}\n            {renderAllFields()}\n            {renderTokens()}\n            <G x={WHOLE_BOARD_WIDTH / 2 - 100} y={WHOLE_BOARD_HEIGHT / 2 - 30}>\n                <Die\n                    value={props.die}\n                    disabled={props.dieDisabled}\n                    onPress={props.onDiePress}\n                />\n            </G>\n        </Svg>\n    )\n}\n","import React from 'react'\nimport { Circle } from 'react-native-svg'\n\ninterface FieldProps {\n    id?: string\n    x: number\n    y: number\n    size: number\n    color: string\n}\n\nexport const Field: React.FC<FieldProps> = (props) => {\n    return (\n        <Circle\n            id={props.id}\n            cx={props.x}\n            cy={props.y}\n            r={props.size / 2}\n            stroke=\"black\"\n            strokeWidth=\"2\"\n            fill={props.color}\n        />\n    )\n}\n","import React from 'react'\nimport { Rect } from 'react-native-svg'\n\ninterface TokenProps {\n    id?: string\n    x: number\n    y: number\n    size: number\n    color: string\n    disabled: boolean\n    onPress?: () => void\n}\n\nexport const Token: React.FC<TokenProps> = ({\n    id,\n    x,\n    y,\n    size,\n    color,\n    disabled,\n    onPress,\n}) => {\n    return (\n        <Rect\n            id={id}\n            x={x - size / 2}\n            y={y - size / 2}\n            width={size}\n            height={size}\n            stroke=\"black\"\n            strokeWidth=\"2\"\n            opacity={disabled ? 0.5 : 1}\n            fill={color}\n            // TODO: onPress vs onClick\n            // https://github.com/react-native-svg/react-native-svg/issues/1483\n            onClick={onPress}\n            onPress={onPress}\n        />\n    )\n}\n","import React from 'react'\nimport { GenericPlayingBoardProps } from '../types'\nimport Classic from './Classic/Classis'\nimport { Board as SmallBoardForTwo } from './SmallBoardForTwo'\nimport { BoardType } from './types'\n\ninterface PlayingBoardOwnProps {\n    boardType: BoardType\n}\n\ntype PlayingBoardProps = PlayingBoardOwnProps & GenericPlayingBoardProps\n\n/**\n * Playing board unification and selection layer\n */\nexport const PlayingBoard: React.FC<PlayingBoardProps> = (props) => {\n    const { boardType, ...boardProps } = props\n\n    switch (boardType) {\n        case BoardType.SMALL_BOARD_FOR_TWO:\n            return <SmallBoardForTwo {...boardProps} />\n\n        case BoardType.CLASSIC:\n            return <Classic {...boardProps} />\n\n        default:\n            console.warn('No such board!')\n            return null\n    }\n}\n","import React from 'react'\nimport type { BoardProps } from 'boardgame.io/react'\n\nimport { State } from './types'\nimport { PlayingBoard } from './boards/PlayingBoard'\nimport { BoardType } from './boards/types'\nimport { rollError } from './moves/roll'\nimport { moveError } from './moves/move'\n\nconst Board: React.FC<BoardProps<State>> = ({ G, ctx, moves }) => {\n    const players = ctx.playOrder.map((id) => ({\n        id,\n        name: id,\n    }))\n    const { move, roll } = moves\n    const selectedBoard = BoardType.CLASSIC\n    const tokens = G.tokens.map((t) => ({\n        ...t,\n        error: moveError(G, ctx, t.id),\n    }))\n\n    return (\n        <PlayingBoard\n            boardType={selectedBoard}\n            players={players}\n            currentPlayer={ctx.currentPlayer}\n            die={G.die ?? 6}\n            onTokenPress={move}\n            onDiePress={roll}\n            dieError={rollError(G, ctx)}\n            tokens={tokens}\n        />\n    )\n}\n\nexport default Board\n","import { Client as ClientReact } from 'boardgame.io/react'\nimport { Client as ClientReactNative } from 'boardgame.io/react-native'\nimport { Platform } from 'react-native'\n\nexport default Platform.OS === 'web' ? ClientReact : ClientReactNative\n","import { MCTSBot } from 'boardgame.io/ai'\nimport { Ctx } from 'boardgame.io'\n\nimport { State } from '../types'\n\nclass SimpleBot extends MCTSBot {\n    constructor(config, ...args) {\n        super(\n            {\n                ...config,\n                objectives: (_G: State, _ctx: Ctx, playerId: string) => ({\n                    finished1: {\n                        checker: (G: State, _ctx: Ctx) => {\n                            return G.players[playerId].finished === 1\n                        },\n                        weight: 10,\n                    },\n                    finished2: {\n                        checker: (G: State, _ctx: Ctx) => {\n                            return G.players[playerId].finished === 2\n                        },\n                        weight: 20,\n                    },\n                    finished3: {\n                        checker: (G: State, _ctx: Ctx) => {\n                            return G.players[playerId].finished === 3\n                        },\n                        weight: 30,\n                    },\n                    kickPlayer: {\n                        checker: (G: State, _ctx: Ctx) => {\n                            return G.kicked !== null\n                        },\n                        weight: 1,\n                    },\n                }),\n                iterations: 1,\n                playoutDepth: 1,\n            },\n            ...args,\n        )\n    }\n}\n\nexport default SimpleBot\n","import React, { useMemo } from 'react'\nimport { Local } from 'boardgame.io/multiplayer'\n\nimport Game from './Game'\nimport Board from './Board'\nimport client from './helpers/client'\nimport SimpleBot from './bots/simple'\n\ninterface Props {\n    players: number\n    bot1: boolean\n    bot2: boolean\n    bot3: boolean\n    bot4: boolean\n}\n\nconst Client = ({ players, bot1, bot2, bot3, bot4 }: Props) => {\n    const hasBots = bot1 || bot2 || bot3 || bot4\n    const C = useMemo(() => {\n        const bots = {\n            ...(bot1 && { '0': SimpleBot }),\n            ...(bot2 && { '1': SimpleBot }),\n            ...(bot3 && { '2': SimpleBot }),\n            ...(bot4 && { '3': SimpleBot }),\n        }\n        const multiplayer = hasBots\n            ? Local({\n                  bots,\n              })\n            : undefined\n        return client({\n            game: Game,\n            board: Board,\n            debug: {\n                collapseOnLoad: true,\n            },\n            numPlayers: players,\n            multiplayer,\n        })\n    }, [players, bot1, bot2, bot3, bot4])\n    return <C playerID={hasBots ? '0' : undefined} />\n}\n\nexport default Client\n","import React from 'react'\nimport { Box, IconButton } from 'native-base'\n\nimport { RootStackScreenProps } from '../navigation/types'\nimport Client from '../Client'\n\nconst Play = ({ navigation, route }: RootStackScreenProps<'Play'>) => {\n    const { players, bot1, bot2, bot3, bot4 } = route.params\n    return (\n        <Box safeArea bg=\"lightBlue.200\" flex={1} justifyContent=\"center\">\n            <Client\n                players={players}\n                bot1={bot1}\n                bot2={bot2}\n                bot3={bot3}\n                bot4={bot4}\n            />\n            <Box safeAreaTop safeAreaRight position=\"absolute\" top=\"0\">\n                <IconButton\n                    color=\"black\"\n                    size=\"lg\"\n                    _icon={{\n                        name: 'menu',\n                    }}\n                    onPress={() => navigation.navigate('Settings')}\n                />\n            </Box>\n        </Box>\n    )\n}\n\nexport default Play\n","import * as React from 'react'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\n\nimport Settings from './screens/Settings'\nimport Play from './screens/Play'\nimport { RootStackParamList } from './navigation/types'\n\nconst RootStack = createStackNavigator<RootStackParamList>()\n\nconst Navigation = () => (\n    <NavigationContainer>\n        <RootStack.Navigator\n            screenOptions={{\n                headerShown: false,\n            }}>\n            <RootStack.Screen name=\"Settings\" component={Settings} />\n            <RootStack.Screen name=\"Play\" component={Play} />\n        </RootStack.Navigator>\n    </NavigationContainer>\n)\n\nexport default Navigation\n","import React from 'react'\n\nimport Theme from './src/Theme'\nimport Storage from './src/Storage'\nimport Navigation from './src/Navigation'\n\nconst App = () => {\n    return (\n        <Theme>\n            <Storage>\n                <Navigation />\n            </Storage>\n        </Theme>\n    )\n}\n\nexport default App\n"],"sourceRoot":""}